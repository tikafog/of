// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package resource

import (
	"fmt"
)

const (
	// TypeLocal is a Type of type Local.
	TypeLocal Type = iota
	// TypeRemote is a Type of type Remote.
	TypeRemote
	// TypeHash is a Type of type Hash.
	TypeHash
	// TypeRemoteHash is a Type of type Remote Hash.
	TypeRemoteHash
	// TypeMax is a Type of type Max.
	TypeMax
)

const _TypeName = "localremotehashremote hashmax"

var _TypeMap = map[Type]string{
	TypeLocal:      _TypeName[0:5],
	TypeRemote:     _TypeName[5:11],
	TypeHash:       _TypeName[11:15],
	TypeRemoteHash: _TypeName[15:26],
	TypeMax:        _TypeName[26:29],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

var _TypeValue = map[string]Type{
	_TypeName[0:5]:   TypeLocal,
	_TypeName[5:11]:  TypeRemote,
	_TypeName[11:15]: TypeHash,
	_TypeName[15:26]: TypeRemoteHash,
	_TypeName[26:29]: TypeMax,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is not a valid Type", name)
}
