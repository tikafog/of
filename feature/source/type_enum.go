// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package source

import (
	"fmt"
)

const (
	// TypeBootnode is a Type of type Bootnode.
	TypeBootnode Type = iota
	// TypeKernel is a Type of type Kernel.
	TypeKernel
	// TypeUpgrade is a Type of type Upgrade.
	TypeUpgrade
	// TypeMedia is a Type of type Media.
	TypeMedia
	// TypeMax is a Type of type Max.
	TypeMax
)

const _TypeName = "bootnodekernelupgrademediamax"

var _TypeMap = map[Type]string{
	TypeBootnode: _TypeName[0:8],
	TypeKernel:   _TypeName[8:14],
	TypeUpgrade:  _TypeName[14:21],
	TypeMedia:    _TypeName[21:26],
	TypeMax:      _TypeName[26:29],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

var _TypeValue = map[string]Type{
	_TypeName[0:8]:   TypeBootnode,
	_TypeName[8:14]:  TypeKernel,
	_TypeName[14:21]: TypeUpgrade,
	_TypeName[21:26]: TypeMedia,
	_TypeName[26:29]: TypeMax,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is not a valid Type", name)
}
