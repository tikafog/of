// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package of

import (
	"fmt"
)

const (
	// ProtocolAnswer is a Protocol of type Answer.
	ProtocolAnswer Protocol = iota
	// ProtocolDataSwap is a Protocol of type DataSwap.
	ProtocolDataSwap
	// ProtocolMessage is a Protocol of type Message.
	ProtocolMessage
	// ProtocolMessageV2 is a Protocol of type MessageV2.
	ProtocolMessageV2
)

const _ProtocolName = "answerdataswapmessagemessagev2"

var _ProtocolMap = map[Protocol]string{
	ProtocolAnswer:    _ProtocolName[0:6],
	ProtocolDataSwap:  _ProtocolName[6:14],
	ProtocolMessage:   _ProtocolName[14:21],
	ProtocolMessageV2: _ProtocolName[21:30],
}

// String implements the Stringer interface.
func (x Protocol) String() string {
	if str, ok := _ProtocolMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Protocol(%d)", x)
}

var _ProtocolValue = map[string]Protocol{
	_ProtocolName[0:6]:   ProtocolAnswer,
	_ProtocolName[6:14]:  ProtocolDataSwap,
	_ProtocolName[14:21]: ProtocolMessage,
	_ProtocolName[21:30]: ProtocolMessageV2,
}

// ParseProtocol attempts to convert a string to a Protocol.
func ParseProtocol(name string) (Protocol, error) {
	if x, ok := _ProtocolValue[name]; ok {
		return x, nil
	}
	return Protocol(0), fmt.Errorf("%s is not a valid Protocol", name)
}
