// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package content

import (
	"fmt"
)

const (
	// NodeStateOffline is a NodeState of type Offline.
	NodeStateOffline NodeState = iota
	// NodeStateOnline is a NodeState of type Online.
	NodeStateOnline
	// NodeStateMax is a NodeState of type Max.
	NodeStateMax
)

const _NodeStateName = "offlineonlinemax"

var _NodeStateMap = map[NodeState]string{
	NodeStateOffline: _NodeStateName[0:7],
	NodeStateOnline:  _NodeStateName[7:13],
	NodeStateMax:     _NodeStateName[13:16],
}

// String implements the Stringer interface.
func (x NodeState) String() string {
	if str, ok := _NodeStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("NodeState(%d)", x)
}

var _NodeStateValue = map[string]NodeState{
	_NodeStateName[0:7]:   NodeStateOffline,
	_NodeStateName[7:13]:  NodeStateOnline,
	_NodeStateName[13:16]: NodeStateMax,
}

// ParseNodeState attempts to convert a string to a NodeState.
func ParseNodeState(name string) (NodeState, error) {
	if x, ok := _NodeStateValue[name]; ok {
		return x, nil
	}
	return NodeState(0), fmt.Errorf("%s is not a valid NodeState", name)
}

const (
	// NodeTypeServer is a NodeType of type Server.
	NodeTypeServer NodeType = iota
	// NodeTypeAdapter is a NodeType of type Adapter.
	NodeTypeAdapter
	// NodeTypeClient is a NodeType of type Client.
	NodeTypeClient
	// NodeTypeBox is a NodeType of type Box.
	NodeTypeBox
	// NodeTypeMobile is a NodeType of type Mobile.
	NodeTypeMobile
	// NodeTypeMax is a NodeType of type Max.
	NodeTypeMax
)

const _NodeTypeName = "serveradapterclientboxmobilemax"

var _NodeTypeMap = map[NodeType]string{
	NodeTypeServer:  _NodeTypeName[0:6],
	NodeTypeAdapter: _NodeTypeName[6:13],
	NodeTypeClient:  _NodeTypeName[13:19],
	NodeTypeBox:     _NodeTypeName[19:22],
	NodeTypeMobile:  _NodeTypeName[22:28],
	NodeTypeMax:     _NodeTypeName[28:31],
}

// String implements the Stringer interface.
func (x NodeType) String() string {
	if str, ok := _NodeTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("NodeType(%d)", x)
}

var _NodeTypeValue = map[string]NodeType{
	_NodeTypeName[0:6]:   NodeTypeServer,
	_NodeTypeName[6:13]:  NodeTypeAdapter,
	_NodeTypeName[13:19]: NodeTypeClient,
	_NodeTypeName[19:22]: NodeTypeBox,
	_NodeTypeName[22:28]: NodeTypeMobile,
	_NodeTypeName[28:31]: NodeTypeMax,
}

// ParseNodeType attempts to convert a string to a NodeType.
func ParseNodeType(name string) (NodeType, error) {
	if x, ok := _NodeTypeValue[name]; ok {
		return x, nil
	}
	return NodeType(0), fmt.Errorf("%s is not a valid NodeType", name)
}
