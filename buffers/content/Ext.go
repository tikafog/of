// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package content

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Ext struct {
	_tab flatbuffers.Table
}

func GetRootAsExt(buf []byte, offset flatbuffers.UOffsetT) *Ext {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Ext{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExt(buf []byte, offset flatbuffers.UOffsetT) *Ext {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Ext{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Ext) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ext) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Ext) Type() ExtType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ExtType(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Ext) MutateType(n ExtType) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func (rcv *Ext) Data() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ExtStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ExtAddType(builder *flatbuffers.Builder, type_ ExtType) {
	builder.PrependUint32Slot(0, uint32(type_), 0)
}
func ExtAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func ExtEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
