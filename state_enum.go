// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package of

import (
	"fmt"
)

const (
	// StateInvalid is a State of type Invalid.
	StateInvalid State = iota
	// StateInit is a State of type Init.
	StateInit
	// StatePreload is a State of type Preload.
	StatePreload
	// StateLoading is a State of type Loading.
	StateLoading
	// StateWaiting is a State of type Waiting.
	StateWaiting
	// StateRunning is a State of type Running.
	StateRunning
	// StateSyncing is a State of type Syncing.
	StateSyncing
	// StateStopping is a State of type Stopping.
	StateStopping
	// StateStopped is a State of type Stopped.
	StateStopped
	// StateError is a State of type Error.
	StateError
	// StateMax is a State of type Max.
	StateMax
)

const _StateName = "invalidinitpreloadloadingwaitingrunningsyncingstoppingstoppederrormax"

var _StateMap = map[State]string{
	StateInvalid:  _StateName[0:7],
	StateInit:     _StateName[7:11],
	StatePreload:  _StateName[11:18],
	StateLoading:  _StateName[18:25],
	StateWaiting:  _StateName[25:32],
	StateRunning:  _StateName[32:39],
	StateSyncing:  _StateName[39:46],
	StateStopping: _StateName[46:54],
	StateStopped:  _StateName[54:61],
	StateError:    _StateName[61:66],
	StateMax:      _StateName[66:69],
}

// String implements the Stringer interface.
func (x State) String() string {
	if str, ok := _StateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("State(%d)", x)
}

var _StateValue = map[string]State{
	_StateName[0:7]:   StateInvalid,
	_StateName[7:11]:  StateInit,
	_StateName[11:18]: StatePreload,
	_StateName[18:25]: StateLoading,
	_StateName[25:32]: StateWaiting,
	_StateName[32:39]: StateRunning,
	_StateName[39:46]: StateSyncing,
	_StateName[46:54]: StateStopping,
	_StateName[54:61]: StateStopped,
	_StateName[61:66]: StateError,
	_StateName[66:69]: StateMax,
}

// ParseState attempts to convert a string to a State.
func ParseState(name string) (State, error) {
	if x, ok := _StateValue[name]; ok {
		return x, nil
	}
	return State(0), fmt.Errorf("%s is not a valid State", name)
}

// MarshalText implements the text marshaller method.
func (x State) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *State) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
