// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package of

import (
	"fmt"
)

const (
	// StateInit is a State of type Init.
	StateInit State = iota
	// StatePreload is a State of type Preload.
	StatePreload
	// StateLoading is a State of type Loading.
	StateLoading
	// StateWaiting is a State of type Waiting.
	StateWaiting
	// StateRunning is a State of type Running.
	StateRunning
	// StateError is a State of type Error.
	StateError
)

const _StateName = "initpreloadloadingwaitingrunningerror"

var _StateMap = map[State]string{
	StateInit:    _StateName[0:4],
	StatePreload: _StateName[4:11],
	StateLoading: _StateName[11:18],
	StateWaiting: _StateName[18:25],
	StateRunning: _StateName[25:32],
	StateError:   _StateName[32:37],
}

// String implements the Stringer interface.
func (x State) String() string {
	if str, ok := _StateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("State(%d)", x)
}

var _StateValue = map[string]State{
	_StateName[0:4]:   StateInit,
	_StateName[4:11]:  StatePreload,
	_StateName[11:18]: StateLoading,
	_StateName[18:25]: StateWaiting,
	_StateName[25:32]: StateRunning,
	_StateName[32:37]: StateError,
}

// ParseState attempts to convert a string to a State.
func ParseState(name string) (State, error) {
	if x, ok := _StateValue[name]; ok {
		return x, nil
	}
	return State(0), fmt.Errorf("%s is not a valid State", name)
}
