// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package utils

import (
	"fmt"
)

const (
	// DSNTypeSqlite3 is a DSNType of type Sqlite3.
	DSNTypeSqlite3 DSNType = iota
	// DSNTypeMysql is a DSNType of type Mysql.
	DSNTypeMysql
	// DSNTypePostgres is a DSNType of type Postgres.
	DSNTypePostgres
	// DSNTypeOracle is a DSNType of type Oracle.
	DSNTypeOracle
	// DSNTypeMssql is a DSNType of type Mssql.
	DSNTypeMssql
	// DSNTypeRedis is a DSNType of type Redis.
	DSNTypeRedis
	// DSNTypeMongodb is a DSNType of type Mongodb.
	DSNTypeMongodb
	// DSNTypeElasticsearch is a DSNType of type Elasticsearch.
	DSNTypeElasticsearch
	// DSNTypeCouchbase is a DSNType of type Couchbase.
	DSNTypeCouchbase
	// DSNTypeCassandra is a DSNType of type Cassandra.
	DSNTypeCassandra
	// DSNTypeTidb is a DSNType of type Tidb.
	DSNTypeTidb
	// DSNTypeClickhouse is a DSNType of type Clickhouse.
	DSNTypeClickhouse
	// DSNTypeMax is a DSNType of type Max.
	DSNTypeMax
)

const _DSNTypeName = "sqlite3mysqlpostgresoraclemssqlredismongodbelasticsearchcouchbasecassandratidbclickhousemax"

var _DSNTypeMap = map[DSNType]string{
	DSNTypeSqlite3:       _DSNTypeName[0:7],
	DSNTypeMysql:         _DSNTypeName[7:12],
	DSNTypePostgres:      _DSNTypeName[12:20],
	DSNTypeOracle:        _DSNTypeName[20:26],
	DSNTypeMssql:         _DSNTypeName[26:31],
	DSNTypeRedis:         _DSNTypeName[31:36],
	DSNTypeMongodb:       _DSNTypeName[36:43],
	DSNTypeElasticsearch: _DSNTypeName[43:56],
	DSNTypeCouchbase:     _DSNTypeName[56:65],
	DSNTypeCassandra:     _DSNTypeName[65:74],
	DSNTypeTidb:          _DSNTypeName[74:78],
	DSNTypeClickhouse:    _DSNTypeName[78:88],
	DSNTypeMax:           _DSNTypeName[88:91],
}

// String implements the Stringer interface.
func (x DSNType) String() string {
	if str, ok := _DSNTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DSNType(%d)", x)
}

var _DSNTypeValue = map[string]DSNType{
	_DSNTypeName[0:7]:   DSNTypeSqlite3,
	_DSNTypeName[7:12]:  DSNTypeMysql,
	_DSNTypeName[12:20]: DSNTypePostgres,
	_DSNTypeName[20:26]: DSNTypeOracle,
	_DSNTypeName[26:31]: DSNTypeMssql,
	_DSNTypeName[31:36]: DSNTypeRedis,
	_DSNTypeName[36:43]: DSNTypeMongodb,
	_DSNTypeName[43:56]: DSNTypeElasticsearch,
	_DSNTypeName[56:65]: DSNTypeCouchbase,
	_DSNTypeName[65:74]: DSNTypeCassandra,
	_DSNTypeName[74:78]: DSNTypeTidb,
	_DSNTypeName[78:88]: DSNTypeClickhouse,
	_DSNTypeName[88:91]: DSNTypeMax,
}

// ParseDSNType attempts to convert a string to a DSNType.
func ParseDSNType(name string) (DSNType, error) {
	if x, ok := _DSNTypeValue[name]; ok {
		return x, nil
	}
	return DSNType(0), fmt.Errorf("%s is not a valid DSNType", name)
}
