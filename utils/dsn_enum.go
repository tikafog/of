// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package utils

import (
	"fmt"
)

const (
	// DSNTypeSqlite is a DSNType of type Sqlite.
	DSNTypeSqlite DSNType = iota
	// DSNTypeSqlite3 is a DSNType of type Sqlite3.
	DSNTypeSqlite3
	// DSNTypeMysql is a DSNType of type Mysql.
	DSNTypeMysql
	// DSNTypePostgres is a DSNType of type Postgres.
	DSNTypePostgres
	// DSNTypeOracle is a DSNType of type Oracle.
	DSNTypeOracle
	// DSNTypeMssql is a DSNType of type Mssql.
	DSNTypeMssql
	// DSNTypeRedis is a DSNType of type Redis.
	DSNTypeRedis
	// DSNTypeMongodb is a DSNType of type Mongodb.
	DSNTypeMongodb
	// DSNTypeElasticsearch is a DSNType of type Elasticsearch.
	DSNTypeElasticsearch
	// DSNTypeCouchbase is a DSNType of type Couchbase.
	DSNTypeCouchbase
	// DSNTypeCassandra is a DSNType of type Cassandra.
	DSNTypeCassandra
	// DSNTypeTidb is a DSNType of type Tidb.
	DSNTypeTidb
	// DSNTypeClickhouse is a DSNType of type Clickhouse.
	DSNTypeClickhouse
	// DSNTypeMax is a DSNType of type Max.
	DSNTypeMax
)

const _DSNTypeName = "sqlitesqlite3mysqlpostgresoraclemssqlredismongodbelasticsearchcouchbasecassandratidbclickhousemax"

var _DSNTypeMap = map[DSNType]string{
	DSNTypeSqlite:        _DSNTypeName[0:6],
	DSNTypeSqlite3:       _DSNTypeName[6:13],
	DSNTypeMysql:         _DSNTypeName[13:18],
	DSNTypePostgres:      _DSNTypeName[18:26],
	DSNTypeOracle:        _DSNTypeName[26:32],
	DSNTypeMssql:         _DSNTypeName[32:37],
	DSNTypeRedis:         _DSNTypeName[37:42],
	DSNTypeMongodb:       _DSNTypeName[42:49],
	DSNTypeElasticsearch: _DSNTypeName[49:62],
	DSNTypeCouchbase:     _DSNTypeName[62:71],
	DSNTypeCassandra:     _DSNTypeName[71:80],
	DSNTypeTidb:          _DSNTypeName[80:84],
	DSNTypeClickhouse:    _DSNTypeName[84:94],
	DSNTypeMax:           _DSNTypeName[94:97],
}

// String implements the Stringer interface.
func (x DSNType) String() string {
	if str, ok := _DSNTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DSNType(%d)", x)
}

var _DSNTypeValue = map[string]DSNType{
	_DSNTypeName[0:6]:   DSNTypeSqlite,
	_DSNTypeName[6:13]:  DSNTypeSqlite3,
	_DSNTypeName[13:18]: DSNTypeMysql,
	_DSNTypeName[18:26]: DSNTypePostgres,
	_DSNTypeName[26:32]: DSNTypeOracle,
	_DSNTypeName[32:37]: DSNTypeMssql,
	_DSNTypeName[37:42]: DSNTypeRedis,
	_DSNTypeName[42:49]: DSNTypeMongodb,
	_DSNTypeName[49:62]: DSNTypeElasticsearch,
	_DSNTypeName[62:71]: DSNTypeCouchbase,
	_DSNTypeName[71:80]: DSNTypeCassandra,
	_DSNTypeName[80:84]: DSNTypeTidb,
	_DSNTypeName[84:94]: DSNTypeClickhouse,
	_DSNTypeName[94:97]: DSNTypeMax,
}

// ParseDSNType attempts to convert a string to a DSNType.
func ParseDSNType(name string) (DSNType, error) {
	if x, ok := _DSNTypeValue[name]; ok {
		return x, nil
	}
	return DSNType(0), fmt.Errorf("%s is not a valid DSNType", name)
}
