// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package of

import (
	"fmt"
)

const (
	// NameAdmin is a Name of type Admin.
	NameAdmin Name = iota
	// NameCenter is a Name of type Center.
	NameCenter
	// NameNode is a Name of type Node.
	NameNode
	// NameBootNode is a Name of type BootNode.
	NameBootNode
	// NameInstruct is a Name of type Instruct.
	NameInstruct
	// NameMax is a Name of type Max.
	NameMax
)

const _NameName = "admincenternodebootnodeinstructmax"

var _NameMap = map[Name]string{
	NameAdmin:    _NameName[0:5],
	NameCenter:   _NameName[5:11],
	NameNode:     _NameName[11:15],
	NameBootNode: _NameName[15:23],
	NameInstruct: _NameName[23:31],
	NameMax:      _NameName[31:34],
}

// String implements the Stringer interface.
func (x Name) String() string {
	if str, ok := _NameMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Name(%d)", x)
}

var _NameValue = map[string]Name{
	_NameName[0:5]:   NameAdmin,
	_NameName[5:11]:  NameCenter,
	_NameName[11:15]: NameNode,
	_NameName[15:23]: NameBootNode,
	_NameName[23:31]: NameInstruct,
	_NameName[31:34]: NameMax,
}

// ParseName attempts to convert a string to a Name.
func ParseName(name string) (Name, error) {
	if x, ok := _NameValue[name]; ok {
		return x, nil
	}
	return Name(0), fmt.Errorf("%s is not a valid Name", name)
}
