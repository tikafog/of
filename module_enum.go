// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.10
// Revision: 07a5b318d9ef317345f0cfca0c9347eda0e2bfc4
// Build Date: 2022-01-23T20:31:33Z
// Built By: goreleaser

package of

import (
	"fmt"
)

const (
	// NameBootNode is a Name of type BootNode.
	NameBootNode Name = iota
	// NameInstruct is a Name of type Instruct.
	NameInstruct
	// NameMax is a Name of type Max.
	NameMax
)

const _NameName = "bootnodeinstructmax"

var _NameMap = map[Name]string{
	NameBootNode: _NameName[0:8],
	NameInstruct: _NameName[8:16],
	NameMax:      _NameName[16:19],
}

// String implements the Stringer interface.
func (x Name) String() string {
	if str, ok := _NameMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Name(%d)", x)
}

var _NameValue = map[string]Name{
	_NameName[0:8]:   NameBootNode,
	_NameName[8:16]:  NameInstruct,
	_NameName[16:19]: NameMax,
}

// ParseName attempts to convert a string to a Name.
func ParseName(name string) (Name, error) {
	if x, ok := _NameValue[name]; ok {
		return x, nil
	}
	return Name(0), fmt.Errorf("%s is not a valid Name", name)
}
