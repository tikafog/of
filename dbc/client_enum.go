// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package dbc

import (
	"fmt"
)

const (
	// ClientTypeBootnode is a ClientType of type Bootnode.
	ClientTypeBootnode ClientType = iota
	// ClientTypeKernel is a ClientType of type Kernel.
	ClientTypeKernel
	// ClientTypeUpgrade is a ClientType of type Upgrade.
	ClientTypeUpgrade
	// ClientTypeMedia is a ClientType of type Media.
	ClientTypeMedia
	// ClientTypeMax is a ClientType of type Max.
	ClientTypeMax
)

const _ClientTypeName = "bootnodekernelupgrademediamax"

var _ClientTypeMap = map[ClientType]string{
	ClientTypeBootnode: _ClientTypeName[0:8],
	ClientTypeKernel:   _ClientTypeName[8:14],
	ClientTypeUpgrade:  _ClientTypeName[14:21],
	ClientTypeMedia:    _ClientTypeName[21:26],
	ClientTypeMax:      _ClientTypeName[26:29],
}

// String implements the Stringer interface.
func (x ClientType) String() string {
	if str, ok := _ClientTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ClientType(%d)", x)
}

var _ClientTypeValue = map[string]ClientType{
	_ClientTypeName[0:8]:   ClientTypeBootnode,
	_ClientTypeName[8:14]:  ClientTypeKernel,
	_ClientTypeName[14:21]: ClientTypeUpgrade,
	_ClientTypeName[21:26]: ClientTypeMedia,
	_ClientTypeName[26:29]: ClientTypeMax,
}

// ParseClientType attempts to convert a string to a ClientType.
func ParseClientType(name string) (ClientType, error) {
	if x, ok := _ClientTypeValue[name]; ok {
		return x, nil
	}
	return ClientType(0), fmt.Errorf("%s is not a valid ClientType", name)
}
