// Code generated by entc, DO NOT EDIT.

package bootstrap

import (
	"entgo.io/ent/dialect/sql"
	"github.com/tikafog/of/dbc/bootnode/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// Expired applies equality check predicate on the "expired" field. It's identical to ExpiredEQ.
func Expired(v bool) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpired), v))
	})
}

// ServicePort applies equality check predicate on the "service_port" field. It's identical to ServicePortEQ.
func ServicePort(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServicePort), v))
	})
}

// FailCounts applies equality check predicate on the "fail_counts" field. It's identical to FailCountsEQ.
func FailCounts(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFailCounts), v))
	})
}

// Sign applies equality check predicate on the "sign" field. It's identical to SignEQ.
func Sign(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSign), v))
	})
}

// UpdatedUnix applies equality check predicate on the "updated_unix" field. It's identical to UpdatedUnixEQ.
func UpdatedUnix(v int64) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPid), v))
	})
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...string) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPid), v...))
	})
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...string) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPid), v...))
	})
}

// PidGT applies the GT predicate on the "pid" field.
func PidGT(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPid), v))
	})
}

// PidGTE applies the GTE predicate on the "pid" field.
func PidGTE(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPid), v))
	})
}

// PidLT applies the LT predicate on the "pid" field.
func PidLT(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPid), v))
	})
}

// PidLTE applies the LTE predicate on the "pid" field.
func PidLTE(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPid), v))
	})
}

// PidContains applies the Contains predicate on the "pid" field.
func PidContains(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPid), v))
	})
}

// PidHasPrefix applies the HasPrefix predicate on the "pid" field.
func PidHasPrefix(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPid), v))
	})
}

// PidHasSuffix applies the HasSuffix predicate on the "pid" field.
func PidHasSuffix(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPid), v))
	})
}

// PidEqualFold applies the EqualFold predicate on the "pid" field.
func PidEqualFold(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPid), v))
	})
}

// PidContainsFold applies the ContainsFold predicate on the "pid" field.
func PidContainsFold(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPid), v))
	})
}

// ExpiredEQ applies the EQ predicate on the "expired" field.
func ExpiredEQ(v bool) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpired), v))
	})
}

// ExpiredNEQ applies the NEQ predicate on the "expired" field.
func ExpiredNEQ(v bool) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpired), v))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v Level) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v Level) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...Level) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...Level) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// ServicePortEQ applies the EQ predicate on the "service_port" field.
func ServicePortEQ(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServicePort), v))
	})
}

// ServicePortNEQ applies the NEQ predicate on the "service_port" field.
func ServicePortNEQ(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServicePort), v))
	})
}

// ServicePortIn applies the In predicate on the "service_port" field.
func ServicePortIn(vs ...int) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServicePort), v...))
	})
}

// ServicePortNotIn applies the NotIn predicate on the "service_port" field.
func ServicePortNotIn(vs ...int) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServicePort), v...))
	})
}

// ServicePortGT applies the GT predicate on the "service_port" field.
func ServicePortGT(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServicePort), v))
	})
}

// ServicePortGTE applies the GTE predicate on the "service_port" field.
func ServicePortGTE(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServicePort), v))
	})
}

// ServicePortLT applies the LT predicate on the "service_port" field.
func ServicePortLT(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServicePort), v))
	})
}

// ServicePortLTE applies the LTE predicate on the "service_port" field.
func ServicePortLTE(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServicePort), v))
	})
}

// FailCountsEQ applies the EQ predicate on the "fail_counts" field.
func FailCountsEQ(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFailCounts), v))
	})
}

// FailCountsNEQ applies the NEQ predicate on the "fail_counts" field.
func FailCountsNEQ(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFailCounts), v))
	})
}

// FailCountsIn applies the In predicate on the "fail_counts" field.
func FailCountsIn(vs ...int) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFailCounts), v...))
	})
}

// FailCountsNotIn applies the NotIn predicate on the "fail_counts" field.
func FailCountsNotIn(vs ...int) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFailCounts), v...))
	})
}

// FailCountsGT applies the GT predicate on the "fail_counts" field.
func FailCountsGT(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFailCounts), v))
	})
}

// FailCountsGTE applies the GTE predicate on the "fail_counts" field.
func FailCountsGTE(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFailCounts), v))
	})
}

// FailCountsLT applies the LT predicate on the "fail_counts" field.
func FailCountsLT(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFailCounts), v))
	})
}

// FailCountsLTE applies the LTE predicate on the "fail_counts" field.
func FailCountsLTE(v int) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFailCounts), v))
	})
}

// SignEQ applies the EQ predicate on the "sign" field.
func SignEQ(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSign), v))
	})
}

// SignNEQ applies the NEQ predicate on the "sign" field.
func SignNEQ(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSign), v))
	})
}

// SignIn applies the In predicate on the "sign" field.
func SignIn(vs ...string) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSign), v...))
	})
}

// SignNotIn applies the NotIn predicate on the "sign" field.
func SignNotIn(vs ...string) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSign), v...))
	})
}

// SignGT applies the GT predicate on the "sign" field.
func SignGT(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSign), v))
	})
}

// SignGTE applies the GTE predicate on the "sign" field.
func SignGTE(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSign), v))
	})
}

// SignLT applies the LT predicate on the "sign" field.
func SignLT(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSign), v))
	})
}

// SignLTE applies the LTE predicate on the "sign" field.
func SignLTE(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSign), v))
	})
}

// SignContains applies the Contains predicate on the "sign" field.
func SignContains(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSign), v))
	})
}

// SignHasPrefix applies the HasPrefix predicate on the "sign" field.
func SignHasPrefix(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSign), v))
	})
}

// SignHasSuffix applies the HasSuffix predicate on the "sign" field.
func SignHasSuffix(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSign), v))
	})
}

// SignIsNil applies the IsNil predicate on the "sign" field.
func SignIsNil() predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSign)))
	})
}

// SignNotNil applies the NotNil predicate on the "sign" field.
func SignNotNil() predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSign)))
	})
}

// SignEqualFold applies the EqualFold predicate on the "sign" field.
func SignEqualFold(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSign), v))
	})
}

// SignContainsFold applies the ContainsFold predicate on the "sign" field.
func SignContainsFold(v string) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSign), v))
	})
}

// UpdatedUnixEQ applies the EQ predicate on the "updated_unix" field.
func UpdatedUnixEQ(v int64) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixNEQ applies the NEQ predicate on the "updated_unix" field.
func UpdatedUnixNEQ(v int64) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixIn applies the In predicate on the "updated_unix" field.
func UpdatedUnixIn(vs ...int64) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixNotIn applies the NotIn predicate on the "updated_unix" field.
func UpdatedUnixNotIn(vs ...int64) predicate.Bootstrap {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bootstrap(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixGT applies the GT predicate on the "updated_unix" field.
func UpdatedUnixGT(v int64) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixGTE applies the GTE predicate on the "updated_unix" field.
func UpdatedUnixGTE(v int64) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLT applies the LT predicate on the "updated_unix" field.
func UpdatedUnixLT(v int64) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLTE applies the LTE predicate on the "updated_unix" field.
func UpdatedUnixLTE(v int64) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedUnix), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bootstrap) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bootstrap) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bootstrap) predicate.Bootstrap {
	return predicate.Bootstrap(func(s *sql.Selector) {
		p(s.Not())
	})
}
