// Code generated by entc, DO NOT EDIT.

package bootnode

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tikafog/of/dbc/bootnode/bootstrap"
)

// BootstrapCreate is the builder for creating a Bootstrap entity.
type BootstrapCreate struct {
	config
	mutation *BootstrapMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPid sets the "pid" field.
func (bc *BootstrapCreate) SetPid(s string) *BootstrapCreate {
	bc.mutation.SetPid(s)
	return bc
}

// SetAddrs sets the "addrs" field.
func (bc *BootstrapCreate) SetAddrs(s []string) *BootstrapCreate {
	bc.mutation.SetAddrs(s)
	return bc
}

// SetExpired sets the "expired" field.
func (bc *BootstrapCreate) SetExpired(b bool) *BootstrapCreate {
	bc.mutation.SetExpired(b)
	return bc
}

// SetNillableExpired sets the "expired" field if the given value is not nil.
func (bc *BootstrapCreate) SetNillableExpired(b *bool) *BootstrapCreate {
	if b != nil {
		bc.SetExpired(*b)
	}
	return bc
}

// SetLevel sets the "level" field.
func (bc *BootstrapCreate) SetLevel(b bootstrap.Level) *BootstrapCreate {
	bc.mutation.SetLevel(b)
	return bc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (bc *BootstrapCreate) SetNillableLevel(b *bootstrap.Level) *BootstrapCreate {
	if b != nil {
		bc.SetLevel(*b)
	}
	return bc
}

// SetServicePort sets the "service_port" field.
func (bc *BootstrapCreate) SetServicePort(i int) *BootstrapCreate {
	bc.mutation.SetServicePort(i)
	return bc
}

// SetNillableServicePort sets the "service_port" field if the given value is not nil.
func (bc *BootstrapCreate) SetNillableServicePort(i *int) *BootstrapCreate {
	if i != nil {
		bc.SetServicePort(*i)
	}
	return bc
}

// SetFailCounts sets the "fail_counts" field.
func (bc *BootstrapCreate) SetFailCounts(i int) *BootstrapCreate {
	bc.mutation.SetFailCounts(i)
	return bc
}

// SetNillableFailCounts sets the "fail_counts" field if the given value is not nil.
func (bc *BootstrapCreate) SetNillableFailCounts(i *int) *BootstrapCreate {
	if i != nil {
		bc.SetFailCounts(*i)
	}
	return bc
}

// SetSign sets the "sign" field.
func (bc *BootstrapCreate) SetSign(s string) *BootstrapCreate {
	bc.mutation.SetSign(s)
	return bc
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (bc *BootstrapCreate) SetNillableSign(s *string) *BootstrapCreate {
	if s != nil {
		bc.SetSign(*s)
	}
	return bc
}

// SetUpdatedUnix sets the "updated_unix" field.
func (bc *BootstrapCreate) SetUpdatedUnix(i int64) *BootstrapCreate {
	bc.mutation.SetUpdatedUnix(i)
	return bc
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (bc *BootstrapCreate) SetNillableUpdatedUnix(i *int64) *BootstrapCreate {
	if i != nil {
		bc.SetUpdatedUnix(*i)
	}
	return bc
}

// Mutation returns the BootstrapMutation object of the builder.
func (bc *BootstrapCreate) Mutation() *BootstrapMutation {
	return bc.mutation
}

// Save creates the Bootstrap in the database.
func (bc *BootstrapCreate) Save(ctx context.Context) (*Bootstrap, error) {
	var (
		err  error
		node *Bootstrap
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BootstrapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("bootnode: uninitialized hook (forgotten import bootnode/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BootstrapCreate) SaveX(ctx context.Context) *Bootstrap {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BootstrapCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BootstrapCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BootstrapCreate) defaults() {
	if _, ok := bc.mutation.Expired(); !ok {
		v := bootstrap.DefaultExpired
		bc.mutation.SetExpired(v)
	}
	if _, ok := bc.mutation.Level(); !ok {
		v := bootstrap.DefaultLevel
		bc.mutation.SetLevel(v)
	}
	if _, ok := bc.mutation.ServicePort(); !ok {
		v := bootstrap.DefaultServicePort
		bc.mutation.SetServicePort(v)
	}
	if _, ok := bc.mutation.FailCounts(); !ok {
		v := bootstrap.DefaultFailCounts
		bc.mutation.SetFailCounts(v)
	}
	if _, ok := bc.mutation.UpdatedUnix(); !ok {
		v := bootstrap.DefaultUpdatedUnix
		bc.mutation.SetUpdatedUnix(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BootstrapCreate) check() error {
	if _, ok := bc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New(`bootnode: missing required field "Bootstrap.pid"`)}
	}
	if _, ok := bc.mutation.Addrs(); !ok {
		return &ValidationError{Name: "addrs", err: errors.New(`bootnode: missing required field "Bootstrap.addrs"`)}
	}
	if _, ok := bc.mutation.Expired(); !ok {
		return &ValidationError{Name: "expired", err: errors.New(`bootnode: missing required field "Bootstrap.expired"`)}
	}
	if _, ok := bc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`bootnode: missing required field "Bootstrap.level"`)}
	}
	if v, ok := bc.mutation.Level(); ok {
		if err := bootstrap.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`bootnode: validator failed for field "Bootstrap.level": %w`, err)}
		}
	}
	if _, ok := bc.mutation.ServicePort(); !ok {
		return &ValidationError{Name: "service_port", err: errors.New(`bootnode: missing required field "Bootstrap.service_port"`)}
	}
	if _, ok := bc.mutation.FailCounts(); !ok {
		return &ValidationError{Name: "fail_counts", err: errors.New(`bootnode: missing required field "Bootstrap.fail_counts"`)}
	}
	if _, ok := bc.mutation.UpdatedUnix(); !ok {
		return &ValidationError{Name: "updated_unix", err: errors.New(`bootnode: missing required field "Bootstrap.updated_unix"`)}
	}
	return nil
}

func (bc *BootstrapCreate) sqlSave(ctx context.Context) (*Bootstrap, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BootstrapCreate) createSpec() (*Bootstrap, *sqlgraph.CreateSpec) {
	var (
		_node = &Bootstrap{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bootstrap.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bootstrap.FieldID,
			},
		}
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.Pid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bootstrap.FieldPid,
		})
		_node.Pid = value
	}
	if value, ok := bc.mutation.Addrs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: bootstrap.FieldAddrs,
		})
		_node.Addrs = value
	}
	if value, ok := bc.mutation.Expired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: bootstrap.FieldExpired,
		})
		_node.Expired = value
	}
	if value, ok := bc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: bootstrap.FieldLevel,
		})
		_node.Level = value
	}
	if value, ok := bc.mutation.ServicePort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bootstrap.FieldServicePort,
		})
		_node.ServicePort = value
	}
	if value, ok := bc.mutation.FailCounts(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bootstrap.FieldFailCounts,
		})
		_node.FailCounts = value
	}
	if value, ok := bc.mutation.Sign(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bootstrap.FieldSign,
		})
		_node.Sign = value
	}
	if value, ok := bc.mutation.UpdatedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bootstrap.FieldUpdatedUnix,
		})
		_node.UpdatedUnix = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bootstrap.Create().
//		SetPid(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BootstrapUpsert) {
//			SetPid(v+v).
//		}).
//		Exec(ctx)
//
func (bc *BootstrapCreate) OnConflict(opts ...sql.ConflictOption) *BootstrapUpsertOne {
	bc.conflict = opts
	return &BootstrapUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (bc *BootstrapCreate) OnConflictColumns(columns ...string) *BootstrapUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BootstrapUpsertOne{
		create: bc,
	}
}

type (
	// BootstrapUpsertOne is the builder for "upsert"-ing
	//  one Bootstrap node.
	BootstrapUpsertOne struct {
		create *BootstrapCreate
	}

	// BootstrapUpsert is the "OnConflict" setter.
	BootstrapUpsert struct {
		*sql.UpdateSet
	}
)

// SetPid sets the "pid" field.
func (u *BootstrapUpsert) SetPid(v string) *BootstrapUpsert {
	u.Set(bootstrap.FieldPid, v)
	return u
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdatePid() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldPid)
	return u
}

// SetAddrs sets the "addrs" field.
func (u *BootstrapUpsert) SetAddrs(v []string) *BootstrapUpsert {
	u.Set(bootstrap.FieldAddrs, v)
	return u
}

// UpdateAddrs sets the "addrs" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdateAddrs() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldAddrs)
	return u
}

// SetExpired sets the "expired" field.
func (u *BootstrapUpsert) SetExpired(v bool) *BootstrapUpsert {
	u.Set(bootstrap.FieldExpired, v)
	return u
}

// UpdateExpired sets the "expired" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdateExpired() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldExpired)
	return u
}

// SetLevel sets the "level" field.
func (u *BootstrapUpsert) SetLevel(v bootstrap.Level) *BootstrapUpsert {
	u.Set(bootstrap.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdateLevel() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldLevel)
	return u
}

// SetServicePort sets the "service_port" field.
func (u *BootstrapUpsert) SetServicePort(v int) *BootstrapUpsert {
	u.Set(bootstrap.FieldServicePort, v)
	return u
}

// UpdateServicePort sets the "service_port" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdateServicePort() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldServicePort)
	return u
}

// AddServicePort adds v to the "service_port" field.
func (u *BootstrapUpsert) AddServicePort(v int) *BootstrapUpsert {
	u.Add(bootstrap.FieldServicePort, v)
	return u
}

// SetFailCounts sets the "fail_counts" field.
func (u *BootstrapUpsert) SetFailCounts(v int) *BootstrapUpsert {
	u.Set(bootstrap.FieldFailCounts, v)
	return u
}

// UpdateFailCounts sets the "fail_counts" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdateFailCounts() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldFailCounts)
	return u
}

// AddFailCounts adds v to the "fail_counts" field.
func (u *BootstrapUpsert) AddFailCounts(v int) *BootstrapUpsert {
	u.Add(bootstrap.FieldFailCounts, v)
	return u
}

// SetSign sets the "sign" field.
func (u *BootstrapUpsert) SetSign(v string) *BootstrapUpsert {
	u.Set(bootstrap.FieldSign, v)
	return u
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdateSign() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldSign)
	return u
}

// ClearSign clears the value of the "sign" field.
func (u *BootstrapUpsert) ClearSign() *BootstrapUpsert {
	u.SetNull(bootstrap.FieldSign)
	return u
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *BootstrapUpsert) SetUpdatedUnix(v int64) *BootstrapUpsert {
	u.Set(bootstrap.FieldUpdatedUnix, v)
	return u
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdateUpdatedUnix() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldUpdatedUnix)
	return u
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *BootstrapUpsert) AddUpdatedUnix(v int64) *BootstrapUpsert {
	u.Add(bootstrap.FieldUpdatedUnix, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *BootstrapUpsertOne) UpdateNewValues() *BootstrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Bootstrap.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *BootstrapUpsertOne) Ignore() *BootstrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BootstrapUpsertOne) DoNothing() *BootstrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BootstrapCreate.OnConflict
// documentation for more info.
func (u *BootstrapUpsertOne) Update(set func(*BootstrapUpsert)) *BootstrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BootstrapUpsert{UpdateSet: update})
	}))
	return u
}

// SetPid sets the "pid" field.
func (u *BootstrapUpsertOne) SetPid(v string) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdatePid() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdatePid()
	})
}

// SetAddrs sets the "addrs" field.
func (u *BootstrapUpsertOne) SetAddrs(v []string) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetAddrs(v)
	})
}

// UpdateAddrs sets the "addrs" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdateAddrs() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateAddrs()
	})
}

// SetExpired sets the "expired" field.
func (u *BootstrapUpsertOne) SetExpired(v bool) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetExpired(v)
	})
}

// UpdateExpired sets the "expired" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdateExpired() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateExpired()
	})
}

// SetLevel sets the "level" field.
func (u *BootstrapUpsertOne) SetLevel(v bootstrap.Level) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdateLevel() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateLevel()
	})
}

// SetServicePort sets the "service_port" field.
func (u *BootstrapUpsertOne) SetServicePort(v int) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetServicePort(v)
	})
}

// AddServicePort adds v to the "service_port" field.
func (u *BootstrapUpsertOne) AddServicePort(v int) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.AddServicePort(v)
	})
}

// UpdateServicePort sets the "service_port" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdateServicePort() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateServicePort()
	})
}

// SetFailCounts sets the "fail_counts" field.
func (u *BootstrapUpsertOne) SetFailCounts(v int) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetFailCounts(v)
	})
}

// AddFailCounts adds v to the "fail_counts" field.
func (u *BootstrapUpsertOne) AddFailCounts(v int) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.AddFailCounts(v)
	})
}

// UpdateFailCounts sets the "fail_counts" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdateFailCounts() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateFailCounts()
	})
}

// SetSign sets the "sign" field.
func (u *BootstrapUpsertOne) SetSign(v string) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetSign(v)
	})
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdateSign() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateSign()
	})
}

// ClearSign clears the value of the "sign" field.
func (u *BootstrapUpsertOne) ClearSign() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.ClearSign()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *BootstrapUpsertOne) SetUpdatedUnix(v int64) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *BootstrapUpsertOne) AddUpdatedUnix(v int64) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdateUpdatedUnix() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateUpdatedUnix()
	})
}

// Exec executes the query.
func (u *BootstrapUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("bootnode: missing options for BootstrapCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BootstrapUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BootstrapUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BootstrapUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BootstrapCreateBulk is the builder for creating many Bootstrap entities in bulk.
type BootstrapCreateBulk struct {
	config
	builders []*BootstrapCreate
	conflict []sql.ConflictOption
}

// Save creates the Bootstrap entities in the database.
func (bcb *BootstrapCreateBulk) Save(ctx context.Context) ([]*Bootstrap, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bootstrap, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BootstrapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BootstrapCreateBulk) SaveX(ctx context.Context) []*Bootstrap {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BootstrapCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BootstrapCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bootstrap.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BootstrapUpsert) {
//			SetPid(v+v).
//		}).
//		Exec(ctx)
//
func (bcb *BootstrapCreateBulk) OnConflict(opts ...sql.ConflictOption) *BootstrapUpsertBulk {
	bcb.conflict = opts
	return &BootstrapUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (bcb *BootstrapCreateBulk) OnConflictColumns(columns ...string) *BootstrapUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BootstrapUpsertBulk{
		create: bcb,
	}
}

// BootstrapUpsertBulk is the builder for "upsert"-ing
// a bulk of Bootstrap nodes.
type BootstrapUpsertBulk struct {
	create *BootstrapCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *BootstrapUpsertBulk) UpdateNewValues() *BootstrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *BootstrapUpsertBulk) Ignore() *BootstrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BootstrapUpsertBulk) DoNothing() *BootstrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BootstrapCreateBulk.OnConflict
// documentation for more info.
func (u *BootstrapUpsertBulk) Update(set func(*BootstrapUpsert)) *BootstrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BootstrapUpsert{UpdateSet: update})
	}))
	return u
}

// SetPid sets the "pid" field.
func (u *BootstrapUpsertBulk) SetPid(v string) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdatePid() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdatePid()
	})
}

// SetAddrs sets the "addrs" field.
func (u *BootstrapUpsertBulk) SetAddrs(v []string) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetAddrs(v)
	})
}

// UpdateAddrs sets the "addrs" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdateAddrs() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateAddrs()
	})
}

// SetExpired sets the "expired" field.
func (u *BootstrapUpsertBulk) SetExpired(v bool) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetExpired(v)
	})
}

// UpdateExpired sets the "expired" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdateExpired() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateExpired()
	})
}

// SetLevel sets the "level" field.
func (u *BootstrapUpsertBulk) SetLevel(v bootstrap.Level) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdateLevel() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateLevel()
	})
}

// SetServicePort sets the "service_port" field.
func (u *BootstrapUpsertBulk) SetServicePort(v int) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetServicePort(v)
	})
}

// AddServicePort adds v to the "service_port" field.
func (u *BootstrapUpsertBulk) AddServicePort(v int) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.AddServicePort(v)
	})
}

// UpdateServicePort sets the "service_port" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdateServicePort() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateServicePort()
	})
}

// SetFailCounts sets the "fail_counts" field.
func (u *BootstrapUpsertBulk) SetFailCounts(v int) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetFailCounts(v)
	})
}

// AddFailCounts adds v to the "fail_counts" field.
func (u *BootstrapUpsertBulk) AddFailCounts(v int) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.AddFailCounts(v)
	})
}

// UpdateFailCounts sets the "fail_counts" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdateFailCounts() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateFailCounts()
	})
}

// SetSign sets the "sign" field.
func (u *BootstrapUpsertBulk) SetSign(v string) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetSign(v)
	})
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdateSign() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateSign()
	})
}

// ClearSign clears the value of the "sign" field.
func (u *BootstrapUpsertBulk) ClearSign() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.ClearSign()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *BootstrapUpsertBulk) SetUpdatedUnix(v int64) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *BootstrapUpsertBulk) AddUpdatedUnix(v int64) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdateUpdatedUnix() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateUpdatedUnix()
	})
}

// Exec executes the query.
func (u *BootstrapUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("bootnode: OnConflict was set for builder %d. Set it on the BootstrapCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("bootnode: missing options for BootstrapCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BootstrapUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
