// Code generated by ent, DO NOT EDIT.

package bootnode

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/tikafog/of/dbc/bootnode/bootstrap"
	"github.com/tikafog/of/dbc/bootnode/predicate"
	"github.com/tikafog/of/dbc/bootnode/version"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBootstrap = "Bootstrap"
	TypeVersion   = "Version"
)

// BootstrapMutation represents an operation that mutates the Bootstrap nodes in the graph.
type BootstrapMutation struct {
	config
	op              Op
	typ             string
	id              *int
	pid             *string
	addrs           *[]string
	expired         *bool
	level           *bootstrap.Level
	service_port    *int
	addservice_port *int
	fail_counts     *int
	addfail_counts  *int
	sign            *string
	updated_unix    *int64
	addupdated_unix *int64
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Bootstrap, error)
	predicates      []predicate.Bootstrap
}

var _ ent.Mutation = (*BootstrapMutation)(nil)

// bootstrapOption allows management of the mutation configuration using functional options.
type bootstrapOption func(*BootstrapMutation)

// newBootstrapMutation creates new mutation for the Bootstrap entity.
func newBootstrapMutation(c config, op Op, opts ...bootstrapOption) *BootstrapMutation {
	m := &BootstrapMutation{
		config:        c,
		op:            op,
		typ:           TypeBootstrap,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBootstrapID sets the ID field of the mutation.
func withBootstrapID(id int) bootstrapOption {
	return func(m *BootstrapMutation) {
		var (
			err   error
			once  sync.Once
			value *Bootstrap
		)
		m.oldValue = func(ctx context.Context) (*Bootstrap, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bootstrap.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBootstrap sets the old Bootstrap of the mutation.
func withBootstrap(node *Bootstrap) bootstrapOption {
	return func(m *BootstrapMutation) {
		m.oldValue = func(context.Context) (*Bootstrap, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BootstrapMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BootstrapMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("bootnode: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BootstrapMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BootstrapMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bootstrap.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPid sets the "pid" field.
func (m *BootstrapMutation) SetPid(s string) {
	m.pid = &s
}

// Pid returns the value of the "pid" field in the mutation.
func (m *BootstrapMutation) Pid() (r string, exists bool) {
	v := m.pid
	if v == nil {
		return
	}
	return *v, true
}

// OldPid returns the old "pid" field's value of the Bootstrap entity.
// If the Bootstrap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BootstrapMutation) OldPid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPid: %w", err)
	}
	return oldValue.Pid, nil
}

// ResetPid resets all changes to the "pid" field.
func (m *BootstrapMutation) ResetPid() {
	m.pid = nil
}

// SetAddrs sets the "addrs" field.
func (m *BootstrapMutation) SetAddrs(s []string) {
	m.addrs = &s
}

// Addrs returns the value of the "addrs" field in the mutation.
func (m *BootstrapMutation) Addrs() (r []string, exists bool) {
	v := m.addrs
	if v == nil {
		return
	}
	return *v, true
}

// OldAddrs returns the old "addrs" field's value of the Bootstrap entity.
// If the Bootstrap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BootstrapMutation) OldAddrs(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddrs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddrs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddrs: %w", err)
	}
	return oldValue.Addrs, nil
}

// ResetAddrs resets all changes to the "addrs" field.
func (m *BootstrapMutation) ResetAddrs() {
	m.addrs = nil
}

// SetExpired sets the "expired" field.
func (m *BootstrapMutation) SetExpired(b bool) {
	m.expired = &b
}

// Expired returns the value of the "expired" field in the mutation.
func (m *BootstrapMutation) Expired() (r bool, exists bool) {
	v := m.expired
	if v == nil {
		return
	}
	return *v, true
}

// OldExpired returns the old "expired" field's value of the Bootstrap entity.
// If the Bootstrap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BootstrapMutation) OldExpired(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpired: %w", err)
	}
	return oldValue.Expired, nil
}

// ResetExpired resets all changes to the "expired" field.
func (m *BootstrapMutation) ResetExpired() {
	m.expired = nil
}

// SetLevel sets the "level" field.
func (m *BootstrapMutation) SetLevel(b bootstrap.Level) {
	m.level = &b
}

// Level returns the value of the "level" field in the mutation.
func (m *BootstrapMutation) Level() (r bootstrap.Level, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Bootstrap entity.
// If the Bootstrap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BootstrapMutation) OldLevel(ctx context.Context) (v bootstrap.Level, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ResetLevel resets all changes to the "level" field.
func (m *BootstrapMutation) ResetLevel() {
	m.level = nil
}

// SetServicePort sets the "service_port" field.
func (m *BootstrapMutation) SetServicePort(i int) {
	m.service_port = &i
	m.addservice_port = nil
}

// ServicePort returns the value of the "service_port" field in the mutation.
func (m *BootstrapMutation) ServicePort() (r int, exists bool) {
	v := m.service_port
	if v == nil {
		return
	}
	return *v, true
}

// OldServicePort returns the old "service_port" field's value of the Bootstrap entity.
// If the Bootstrap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BootstrapMutation) OldServicePort(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServicePort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServicePort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServicePort: %w", err)
	}
	return oldValue.ServicePort, nil
}

// AddServicePort adds i to the "service_port" field.
func (m *BootstrapMutation) AddServicePort(i int) {
	if m.addservice_port != nil {
		*m.addservice_port += i
	} else {
		m.addservice_port = &i
	}
}

// AddedServicePort returns the value that was added to the "service_port" field in this mutation.
func (m *BootstrapMutation) AddedServicePort() (r int, exists bool) {
	v := m.addservice_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetServicePort resets all changes to the "service_port" field.
func (m *BootstrapMutation) ResetServicePort() {
	m.service_port = nil
	m.addservice_port = nil
}

// SetFailCounts sets the "fail_counts" field.
func (m *BootstrapMutation) SetFailCounts(i int) {
	m.fail_counts = &i
	m.addfail_counts = nil
}

// FailCounts returns the value of the "fail_counts" field in the mutation.
func (m *BootstrapMutation) FailCounts() (r int, exists bool) {
	v := m.fail_counts
	if v == nil {
		return
	}
	return *v, true
}

// OldFailCounts returns the old "fail_counts" field's value of the Bootstrap entity.
// If the Bootstrap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BootstrapMutation) OldFailCounts(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailCounts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailCounts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailCounts: %w", err)
	}
	return oldValue.FailCounts, nil
}

// AddFailCounts adds i to the "fail_counts" field.
func (m *BootstrapMutation) AddFailCounts(i int) {
	if m.addfail_counts != nil {
		*m.addfail_counts += i
	} else {
		m.addfail_counts = &i
	}
}

// AddedFailCounts returns the value that was added to the "fail_counts" field in this mutation.
func (m *BootstrapMutation) AddedFailCounts() (r int, exists bool) {
	v := m.addfail_counts
	if v == nil {
		return
	}
	return *v, true
}

// ResetFailCounts resets all changes to the "fail_counts" field.
func (m *BootstrapMutation) ResetFailCounts() {
	m.fail_counts = nil
	m.addfail_counts = nil
}

// SetSign sets the "sign" field.
func (m *BootstrapMutation) SetSign(s string) {
	m.sign = &s
}

// Sign returns the value of the "sign" field in the mutation.
func (m *BootstrapMutation) Sign() (r string, exists bool) {
	v := m.sign
	if v == nil {
		return
	}
	return *v, true
}

// OldSign returns the old "sign" field's value of the Bootstrap entity.
// If the Bootstrap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BootstrapMutation) OldSign(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSign is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSign requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSign: %w", err)
	}
	return oldValue.Sign, nil
}

// ClearSign clears the value of the "sign" field.
func (m *BootstrapMutation) ClearSign() {
	m.sign = nil
	m.clearedFields[bootstrap.FieldSign] = struct{}{}
}

// SignCleared returns if the "sign" field was cleared in this mutation.
func (m *BootstrapMutation) SignCleared() bool {
	_, ok := m.clearedFields[bootstrap.FieldSign]
	return ok
}

// ResetSign resets all changes to the "sign" field.
func (m *BootstrapMutation) ResetSign() {
	m.sign = nil
	delete(m.clearedFields, bootstrap.FieldSign)
}

// SetUpdatedUnix sets the "updated_unix" field.
func (m *BootstrapMutation) SetUpdatedUnix(i int64) {
	m.updated_unix = &i
	m.addupdated_unix = nil
}

// UpdatedUnix returns the value of the "updated_unix" field in the mutation.
func (m *BootstrapMutation) UpdatedUnix() (r int64, exists bool) {
	v := m.updated_unix
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedUnix returns the old "updated_unix" field's value of the Bootstrap entity.
// If the Bootstrap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BootstrapMutation) OldUpdatedUnix(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedUnix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedUnix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedUnix: %w", err)
	}
	return oldValue.UpdatedUnix, nil
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (m *BootstrapMutation) AddUpdatedUnix(i int64) {
	if m.addupdated_unix != nil {
		*m.addupdated_unix += i
	} else {
		m.addupdated_unix = &i
	}
}

// AddedUpdatedUnix returns the value that was added to the "updated_unix" field in this mutation.
func (m *BootstrapMutation) AddedUpdatedUnix() (r int64, exists bool) {
	v := m.addupdated_unix
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedUnix resets all changes to the "updated_unix" field.
func (m *BootstrapMutation) ResetUpdatedUnix() {
	m.updated_unix = nil
	m.addupdated_unix = nil
}

// Where appends a list predicates to the BootstrapMutation builder.
func (m *BootstrapMutation) Where(ps ...predicate.Bootstrap) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BootstrapMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bootstrap).
func (m *BootstrapMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BootstrapMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.pid != nil {
		fields = append(fields, bootstrap.FieldPid)
	}
	if m.addrs != nil {
		fields = append(fields, bootstrap.FieldAddrs)
	}
	if m.expired != nil {
		fields = append(fields, bootstrap.FieldExpired)
	}
	if m.level != nil {
		fields = append(fields, bootstrap.FieldLevel)
	}
	if m.service_port != nil {
		fields = append(fields, bootstrap.FieldServicePort)
	}
	if m.fail_counts != nil {
		fields = append(fields, bootstrap.FieldFailCounts)
	}
	if m.sign != nil {
		fields = append(fields, bootstrap.FieldSign)
	}
	if m.updated_unix != nil {
		fields = append(fields, bootstrap.FieldUpdatedUnix)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BootstrapMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bootstrap.FieldPid:
		return m.Pid()
	case bootstrap.FieldAddrs:
		return m.Addrs()
	case bootstrap.FieldExpired:
		return m.Expired()
	case bootstrap.FieldLevel:
		return m.Level()
	case bootstrap.FieldServicePort:
		return m.ServicePort()
	case bootstrap.FieldFailCounts:
		return m.FailCounts()
	case bootstrap.FieldSign:
		return m.Sign()
	case bootstrap.FieldUpdatedUnix:
		return m.UpdatedUnix()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BootstrapMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bootstrap.FieldPid:
		return m.OldPid(ctx)
	case bootstrap.FieldAddrs:
		return m.OldAddrs(ctx)
	case bootstrap.FieldExpired:
		return m.OldExpired(ctx)
	case bootstrap.FieldLevel:
		return m.OldLevel(ctx)
	case bootstrap.FieldServicePort:
		return m.OldServicePort(ctx)
	case bootstrap.FieldFailCounts:
		return m.OldFailCounts(ctx)
	case bootstrap.FieldSign:
		return m.OldSign(ctx)
	case bootstrap.FieldUpdatedUnix:
		return m.OldUpdatedUnix(ctx)
	}
	return nil, fmt.Errorf("unknown Bootstrap field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BootstrapMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bootstrap.FieldPid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPid(v)
		return nil
	case bootstrap.FieldAddrs:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddrs(v)
		return nil
	case bootstrap.FieldExpired:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpired(v)
		return nil
	case bootstrap.FieldLevel:
		v, ok := value.(bootstrap.Level)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case bootstrap.FieldServicePort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServicePort(v)
		return nil
	case bootstrap.FieldFailCounts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailCounts(v)
		return nil
	case bootstrap.FieldSign:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSign(v)
		return nil
	case bootstrap.FieldUpdatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedUnix(v)
		return nil
	}
	return fmt.Errorf("unknown Bootstrap field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BootstrapMutation) AddedFields() []string {
	var fields []string
	if m.addservice_port != nil {
		fields = append(fields, bootstrap.FieldServicePort)
	}
	if m.addfail_counts != nil {
		fields = append(fields, bootstrap.FieldFailCounts)
	}
	if m.addupdated_unix != nil {
		fields = append(fields, bootstrap.FieldUpdatedUnix)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BootstrapMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bootstrap.FieldServicePort:
		return m.AddedServicePort()
	case bootstrap.FieldFailCounts:
		return m.AddedFailCounts()
	case bootstrap.FieldUpdatedUnix:
		return m.AddedUpdatedUnix()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BootstrapMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bootstrap.FieldServicePort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddServicePort(v)
		return nil
	case bootstrap.FieldFailCounts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFailCounts(v)
		return nil
	case bootstrap.FieldUpdatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedUnix(v)
		return nil
	}
	return fmt.Errorf("unknown Bootstrap numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BootstrapMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bootstrap.FieldSign) {
		fields = append(fields, bootstrap.FieldSign)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BootstrapMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BootstrapMutation) ClearField(name string) error {
	switch name {
	case bootstrap.FieldSign:
		m.ClearSign()
		return nil
	}
	return fmt.Errorf("unknown Bootstrap nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BootstrapMutation) ResetField(name string) error {
	switch name {
	case bootstrap.FieldPid:
		m.ResetPid()
		return nil
	case bootstrap.FieldAddrs:
		m.ResetAddrs()
		return nil
	case bootstrap.FieldExpired:
		m.ResetExpired()
		return nil
	case bootstrap.FieldLevel:
		m.ResetLevel()
		return nil
	case bootstrap.FieldServicePort:
		m.ResetServicePort()
		return nil
	case bootstrap.FieldFailCounts:
		m.ResetFailCounts()
		return nil
	case bootstrap.FieldSign:
		m.ResetSign()
		return nil
	case bootstrap.FieldUpdatedUnix:
		m.ResetUpdatedUnix()
		return nil
	}
	return fmt.Errorf("unknown Bootstrap field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BootstrapMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BootstrapMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BootstrapMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BootstrapMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BootstrapMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BootstrapMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BootstrapMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Bootstrap unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BootstrapMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Bootstrap edge %s", name)
}

// VersionMutation represents an operation that mutates the Version nodes in the graph.
type VersionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Current      *int
	add_Current   *int
	_Last         *int
	add_Last      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Version, error)
	predicates    []predicate.Version
}

var _ ent.Mutation = (*VersionMutation)(nil)

// versionOption allows management of the mutation configuration using functional options.
type versionOption func(*VersionMutation)

// newVersionMutation creates new mutation for the Version entity.
func newVersionMutation(c config, op Op, opts ...versionOption) *VersionMutation {
	m := &VersionMutation{
		config:        c,
		op:            op,
		typ:           TypeVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVersionID sets the ID field of the mutation.
func withVersionID(id int) versionOption {
	return func(m *VersionMutation) {
		var (
			err   error
			once  sync.Once
			value *Version
		)
		m.oldValue = func(ctx context.Context) (*Version, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Version.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVersion sets the old Version of the mutation.
func withVersion(node *Version) versionOption {
	return func(m *VersionMutation) {
		m.oldValue = func(context.Context) (*Version, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("bootnode: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VersionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VersionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Version.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCurrent sets the "Current" field.
func (m *VersionMutation) SetCurrent(i int) {
	m._Current = &i
	m.add_Current = nil
}

// Current returns the value of the "Current" field in the mutation.
func (m *VersionMutation) Current() (r int, exists bool) {
	v := m._Current
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrent returns the old "Current" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldCurrent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrent: %w", err)
	}
	return oldValue.Current, nil
}

// AddCurrent adds i to the "Current" field.
func (m *VersionMutation) AddCurrent(i int) {
	if m.add_Current != nil {
		*m.add_Current += i
	} else {
		m.add_Current = &i
	}
}

// AddedCurrent returns the value that was added to the "Current" field in this mutation.
func (m *VersionMutation) AddedCurrent() (r int, exists bool) {
	v := m.add_Current
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrent resets all changes to the "Current" field.
func (m *VersionMutation) ResetCurrent() {
	m._Current = nil
	m.add_Current = nil
}

// SetLast sets the "Last" field.
func (m *VersionMutation) SetLast(i int) {
	m._Last = &i
	m.add_Last = nil
}

// Last returns the value of the "Last" field in the mutation.
func (m *VersionMutation) Last() (r int, exists bool) {
	v := m._Last
	if v == nil {
		return
	}
	return *v, true
}

// OldLast returns the old "Last" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldLast(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLast is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLast requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLast: %w", err)
	}
	return oldValue.Last, nil
}

// AddLast adds i to the "Last" field.
func (m *VersionMutation) AddLast(i int) {
	if m.add_Last != nil {
		*m.add_Last += i
	} else {
		m.add_Last = &i
	}
}

// AddedLast returns the value that was added to the "Last" field in this mutation.
func (m *VersionMutation) AddedLast() (r int, exists bool) {
	v := m.add_Last
	if v == nil {
		return
	}
	return *v, true
}

// ResetLast resets all changes to the "Last" field.
func (m *VersionMutation) ResetLast() {
	m._Last = nil
	m.add_Last = nil
}

// Where appends a list predicates to the VersionMutation builder.
func (m *VersionMutation) Where(ps ...predicate.Version) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VersionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Version).
func (m *VersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VersionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Current != nil {
		fields = append(fields, version.FieldCurrent)
	}
	if m._Last != nil {
		fields = append(fields, version.FieldLast)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case version.FieldCurrent:
		return m.Current()
	case version.FieldLast:
		return m.Last()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case version.FieldCurrent:
		return m.OldCurrent(ctx)
	case version.FieldLast:
		return m.OldLast(ctx)
	}
	return nil, fmt.Errorf("unknown Version field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case version.FieldCurrent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrent(v)
		return nil
	case version.FieldLast:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLast(v)
		return nil
	}
	return fmt.Errorf("unknown Version field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VersionMutation) AddedFields() []string {
	var fields []string
	if m.add_Current != nil {
		fields = append(fields, version.FieldCurrent)
	}
	if m.add_Last != nil {
		fields = append(fields, version.FieldLast)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case version.FieldCurrent:
		return m.AddedCurrent()
	case version.FieldLast:
		return m.AddedLast()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case version.FieldCurrent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrent(v)
		return nil
	case version.FieldLast:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLast(v)
		return nil
	}
	return fmt.Errorf("unknown Version numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Version nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VersionMutation) ResetField(name string) error {
	switch name {
	case version.FieldCurrent:
		m.ResetCurrent()
		return nil
	case version.FieldLast:
		m.ResetLast()
		return nil
	}
	return fmt.Errorf("unknown Version field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VersionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VersionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VersionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VersionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Version unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VersionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Version edge %s", name)
}
