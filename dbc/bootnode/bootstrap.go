// Code generated by entc, DO NOT EDIT.

package bootnode

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/tikafog/of/dbc/bootnode/bootstrap"
)

// Bootstrap is the model entity for the Bootstrap schema.
type Bootstrap struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Pid holds the value of the "pid" field.
	Pid string `json:"pid,omitempty"`
	// Addrs holds the value of the "addrs" field.
	Addrs []string `json:"addrs,omitempty"`
	// Expired holds the value of the "expired" field.
	Expired bool `json:"expired,omitempty"`
	// Level holds the value of the "level" field.
	Level bootstrap.Level `json:"level,omitempty"`
	// ServicePort holds the value of the "service_port" field.
	ServicePort int `json:"service_port,omitempty"`
	// FailCounts holds the value of the "fail_counts" field.
	FailCounts int `json:"fail_counts,omitempty"`
	// Sign holds the value of the "sign" field.
	Sign string `json:"sign,omitempty"`
	// UpdatedUnix holds the value of the "updated_unix" field.
	UpdatedUnix int64 `json:"updated_unix,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bootstrap) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bootstrap.FieldAddrs:
			values[i] = new([]byte)
		case bootstrap.FieldExpired:
			values[i] = new(sql.NullBool)
		case bootstrap.FieldID, bootstrap.FieldServicePort, bootstrap.FieldFailCounts, bootstrap.FieldUpdatedUnix:
			values[i] = new(sql.NullInt64)
		case bootstrap.FieldPid, bootstrap.FieldLevel, bootstrap.FieldSign:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bootstrap", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bootstrap fields.
func (b *Bootstrap) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bootstrap.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bootstrap.FieldPid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				b.Pid = value.String
			}
		case bootstrap.FieldAddrs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field addrs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Addrs); err != nil {
					return fmt.Errorf("unmarshal field addrs: %w", err)
				}
			}
		case bootstrap.FieldExpired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field expired", values[i])
			} else if value.Valid {
				b.Expired = value.Bool
			}
		case bootstrap.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				b.Level = bootstrap.Level(value.String)
			}
		case bootstrap.FieldServicePort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field service_port", values[i])
			} else if value.Valid {
				b.ServicePort = int(value.Int64)
			}
		case bootstrap.FieldFailCounts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fail_counts", values[i])
			} else if value.Valid {
				b.FailCounts = int(value.Int64)
			}
		case bootstrap.FieldSign:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sign", values[i])
			} else if value.Valid {
				b.Sign = value.String
			}
		case bootstrap.FieldUpdatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_unix", values[i])
			} else if value.Valid {
				b.UpdatedUnix = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Bootstrap.
// Note that you need to call Bootstrap.Unwrap() before calling this method if this Bootstrap
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bootstrap) Update() *BootstrapUpdateOne {
	return (&BootstrapClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bootstrap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bootstrap) Unwrap() *Bootstrap {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("bootnode: Bootstrap is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bootstrap) String() string {
	var builder strings.Builder
	builder.WriteString("Bootstrap(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", pid=")
	builder.WriteString(b.Pid)
	builder.WriteString(", addrs=")
	builder.WriteString(fmt.Sprintf("%v", b.Addrs))
	builder.WriteString(", expired=")
	builder.WriteString(fmt.Sprintf("%v", b.Expired))
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", b.Level))
	builder.WriteString(", service_port=")
	builder.WriteString(fmt.Sprintf("%v", b.ServicePort))
	builder.WriteString(", fail_counts=")
	builder.WriteString(fmt.Sprintf("%v", b.FailCounts))
	builder.WriteString(", sign=")
	builder.WriteString(b.Sign)
	builder.WriteString(", updated_unix=")
	builder.WriteString(fmt.Sprintf("%v", b.UpdatedUnix))
	builder.WriteByte(')')
	return builder.String()
}

// Bootstraps is a parsable slice of Bootstrap.
type Bootstraps []*Bootstrap

func (b Bootstraps) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
