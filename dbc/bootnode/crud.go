// Code generated by ent, DO NOT EDIT.

package bootnode

func (bc *BootstrapCreate) SetBootstrap(input *Bootstrap) *BootstrapCreate {
	bc.SetPid(input.Pid)
	bc.SetAddrs(input.Addrs)
	bc.SetExpired(input.Expired)
	bc.SetLevel(input.Level)
	bc.SetServicePort(input.ServicePort)
	bc.SetFailCounts(input.FailCounts)
	bc.SetUpdatedUnix(input.UpdatedUnix)
	return bc
}

func (bc *BootstrapCreate) SetBootstrapWithOptional(input *Bootstrap) *BootstrapCreate {
	bc.SetPid(input.Pid)
	bc.SetAddrs(input.Addrs)
	bc.SetExpired(input.Expired)
	bc.SetLevel(input.Level)
	bc.SetServicePort(input.ServicePort)
	bc.SetFailCounts(input.FailCounts)
	bc.SetSign(input.Sign)
	bc.SetUpdatedUnix(input.UpdatedUnix)
	return bc
}

func (buo *BootstrapUpdateOne) SetBootstrap(input *Bootstrap) *BootstrapUpdateOne {
	buo.SetPid(input.Pid)
	buo.SetAddrs(input.Addrs)
	buo.SetExpired(input.Expired)
	buo.SetLevel(input.Level)
	buo.SetServicePort(input.ServicePort)
	buo.SetFailCounts(input.FailCounts)
	buo.SetUpdatedUnix(input.UpdatedUnix)
	return buo
}

func (bu *BootstrapUpdate) SetBootstrap(input *Bootstrap) *BootstrapUpdate {
	bu.SetPid(input.Pid)
	bu.SetAddrs(input.Addrs)
	bu.SetExpired(input.Expired)
	bu.SetLevel(input.Level)
	bu.SetServicePort(input.ServicePort)
	bu.SetFailCounts(input.FailCounts)
	bu.SetUpdatedUnix(input.UpdatedUnix)
	return bu
}

func (bu *BootstrapUpdate) SetBootstrapWithOptional(input *Bootstrap) *BootstrapUpdate {
	bu.SetPid(input.Pid)
	bu.SetAddrs(input.Addrs)
	bu.SetExpired(input.Expired)
	bu.SetLevel(input.Level)
	bu.SetServicePort(input.ServicePort)
	bu.SetFailCounts(input.FailCounts)
	bu.SetSign(input.Sign)
	bu.SetUpdatedUnix(input.UpdatedUnix)
	return bu
}

func (vc *VersionCreate) SetVersion(input *Version) *VersionCreate {
	vc.SetCurrent(input.Current)
	vc.SetLast(input.Last)
	return vc
}

func (vc *VersionCreate) SetVersionWithOptional(input *Version) *VersionCreate {
	vc.SetCurrent(input.Current)
	vc.SetLast(input.Last)
	return vc
}

func (vuo *VersionUpdateOne) SetVersion(input *Version) *VersionUpdateOne {
	vuo.SetCurrent(input.Current)
	vuo.SetLast(input.Last)
	return vuo
}

func (vu *VersionUpdate) SetVersion(input *Version) *VersionUpdate {
	vu.SetCurrent(input.Current)
	vu.SetLast(input.Last)
	return vu
}

func (vu *VersionUpdate) SetVersionWithOptional(input *Version) *VersionUpdate {
	vu.SetCurrent(input.Current)
	vu.SetLast(input.Last)
	return vu
}
