// Code generated by ent, DO NOT EDIT.

package resource

import (
	"entgo.io/ent/dialect/sql"
	"github.com/tikafog/of/dbc/kernel/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Rid applies equality check predicate on the "rid" field. It's identical to RidEQ.
func Rid(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRid), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Step applies equality check predicate on the "step" field. It's identical to StepEQ.
func Step(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStep), v))
	})
}

// Retried applies equality check predicate on the "retried" field. It's identical to RetriedEQ.
func Retried(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRetried), v))
	})
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// Relate applies equality check predicate on the "relate" field. It's identical to RelateEQ.
func Relate(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRelate), v))
	})
}

// UpdatedUnix applies equality check predicate on the "updated_unix" field. It's identical to UpdatedUnixEQ.
func UpdatedUnix(v int64) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// RidEQ applies the EQ predicate on the "rid" field.
func RidEQ(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRid), v))
	})
}

// RidNEQ applies the NEQ predicate on the "rid" field.
func RidNEQ(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRid), v))
	})
}

// RidIn applies the In predicate on the "rid" field.
func RidIn(vs ...string) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRid), v...))
	})
}

// RidNotIn applies the NotIn predicate on the "rid" field.
func RidNotIn(vs ...string) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRid), v...))
	})
}

// RidGT applies the GT predicate on the "rid" field.
func RidGT(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRid), v))
	})
}

// RidGTE applies the GTE predicate on the "rid" field.
func RidGTE(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRid), v))
	})
}

// RidLT applies the LT predicate on the "rid" field.
func RidLT(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRid), v))
	})
}

// RidLTE applies the LTE predicate on the "rid" field.
func RidLTE(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRid), v))
	})
}

// RidContains applies the Contains predicate on the "rid" field.
func RidContains(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRid), v))
	})
}

// RidHasPrefix applies the HasPrefix predicate on the "rid" field.
func RidHasPrefix(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRid), v))
	})
}

// RidHasSuffix applies the HasSuffix predicate on the "rid" field.
func RidHasSuffix(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRid), v))
	})
}

// RidEqualFold applies the EqualFold predicate on the "rid" field.
func RidEqualFold(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRid), v))
	})
}

// RidContainsFold applies the ContainsFold predicate on the "rid" field.
func RidContainsFold(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRid), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStep), v))
	})
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStep), v))
	})
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...uint8) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStep), v...))
	})
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...uint8) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStep), v...))
	})
}

// StepGT applies the GT predicate on the "step" field.
func StepGT(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStep), v))
	})
}

// StepGTE applies the GTE predicate on the "step" field.
func StepGTE(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStep), v))
	})
}

// StepLT applies the LT predicate on the "step" field.
func StepLT(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStep), v))
	})
}

// StepLTE applies the LTE predicate on the "step" field.
func StepLTE(v uint8) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStep), v))
	})
}

// RetriedEQ applies the EQ predicate on the "retried" field.
func RetriedEQ(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRetried), v))
	})
}

// RetriedNEQ applies the NEQ predicate on the "retried" field.
func RetriedNEQ(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRetried), v))
	})
}

// RetriedIn applies the In predicate on the "retried" field.
func RetriedIn(vs ...int) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRetried), v...))
	})
}

// RetriedNotIn applies the NotIn predicate on the "retried" field.
func RetriedNotIn(vs ...int) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRetried), v...))
	})
}

// RetriedGT applies the GT predicate on the "retried" field.
func RetriedGT(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRetried), v))
	})
}

// RetriedGTE applies the GTE predicate on the "retried" field.
func RetriedGTE(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRetried), v))
	})
}

// RetriedLT applies the LT predicate on the "retried" field.
func RetriedLT(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRetried), v))
	})
}

// RetriedLTE applies the LTE predicate on the "retried" field.
func RetriedLTE(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRetried), v))
	})
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriority), v))
	})
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriority), v...))
	})
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriority), v...))
	})
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriority), v))
	})
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriority), v))
	})
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriority), v))
	})
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriority), v))
	})
}

// RelateEQ applies the EQ predicate on the "relate" field.
func RelateEQ(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRelate), v))
	})
}

// RelateNEQ applies the NEQ predicate on the "relate" field.
func RelateNEQ(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRelate), v))
	})
}

// RelateIn applies the In predicate on the "relate" field.
func RelateIn(vs ...string) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRelate), v...))
	})
}

// RelateNotIn applies the NotIn predicate on the "relate" field.
func RelateNotIn(vs ...string) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRelate), v...))
	})
}

// RelateGT applies the GT predicate on the "relate" field.
func RelateGT(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRelate), v))
	})
}

// RelateGTE applies the GTE predicate on the "relate" field.
func RelateGTE(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRelate), v))
	})
}

// RelateLT applies the LT predicate on the "relate" field.
func RelateLT(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRelate), v))
	})
}

// RelateLTE applies the LTE predicate on the "relate" field.
func RelateLTE(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRelate), v))
	})
}

// RelateContains applies the Contains predicate on the "relate" field.
func RelateContains(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRelate), v))
	})
}

// RelateHasPrefix applies the HasPrefix predicate on the "relate" field.
func RelateHasPrefix(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRelate), v))
	})
}

// RelateHasSuffix applies the HasSuffix predicate on the "relate" field.
func RelateHasSuffix(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRelate), v))
	})
}

// RelateEqualFold applies the EqualFold predicate on the "relate" field.
func RelateEqualFold(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRelate), v))
	})
}

// RelateContainsFold applies the ContainsFold predicate on the "relate" field.
func RelateContainsFold(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRelate), v))
	})
}

// UpdatedUnixEQ applies the EQ predicate on the "updated_unix" field.
func UpdatedUnixEQ(v int64) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixNEQ applies the NEQ predicate on the "updated_unix" field.
func UpdatedUnixNEQ(v int64) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixIn applies the In predicate on the "updated_unix" field.
func UpdatedUnixIn(vs ...int64) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixNotIn applies the NotIn predicate on the "updated_unix" field.
func UpdatedUnixNotIn(vs ...int64) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixGT applies the GT predicate on the "updated_unix" field.
func UpdatedUnixGT(v int64) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixGTE applies the GTE predicate on the "updated_unix" field.
func UpdatedUnixGTE(v int64) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLT applies the LT predicate on the "updated_unix" field.
func UpdatedUnixLT(v int64) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLTE applies the LTE predicate on the "updated_unix" field.
func UpdatedUnixLTE(v int64) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedUnix), v))
	})
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComment), v))
	})
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComment), v...))
	})
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Resource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Resource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComment), v...))
	})
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComment), v))
	})
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComment), v))
	})
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComment), v))
	})
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComment), v))
	})
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComment), v))
	})
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComment), v))
	})
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComment), v))
	})
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComment)))
	})
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComment)))
	})
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComment), v))
	})
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComment), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Resource) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		p(s.Not())
	})
}
