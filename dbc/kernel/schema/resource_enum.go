// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package schema

import (
	"fmt"
)

const (
	// StatusNone is a Status of type None.
	StatusNone Status = iota
	// StatusWaiting is a Status of type Waiting.
	StatusWaiting
	// StatusSuccess is a Status of type Success.
	StatusSuccess
	// StatusFailed is a Status of type Failed.
	StatusFailed
	// StatusMax is a Status of type Max.
	StatusMax
)

const _StatusName = "nonewaitingsuccessfailedmax"

var _StatusMap = map[Status]string{
	StatusNone:    _StatusName[0:4],
	StatusWaiting: _StatusName[4:11],
	StatusSuccess: _StatusName[11:18],
	StatusFailed:  _StatusName[18:24],
	StatusMax:     _StatusName[24:27],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

var _StatusValue = map[string]Status{
	_StatusName[0:4]:   StatusNone,
	_StatusName[4:11]:  StatusWaiting,
	_StatusName[11:18]: StatusSuccess,
	_StatusName[18:24]: StatusFailed,
	_StatusName[24:27]: StatusMax,
}

// ParseStatus attempts to convert a string to a Status.
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid Status", name)
}

const (
	// StepNone is a Step of type None.
	StepNone Step = iota
	// StepAdd is a Step of type Add.
	StepAdd
	// StepRemove is a Step of type Remove.
	StepRemove
	// StepMax is a Step of type Max.
	StepMax
)

const _StepName = "noneaddremovemax"

var _StepMap = map[Step]string{
	StepNone:   _StepName[0:4],
	StepAdd:    _StepName[4:7],
	StepRemove: _StepName[7:13],
	StepMax:    _StepName[13:16],
}

// String implements the Stringer interface.
func (x Step) String() string {
	if str, ok := _StepMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Step(%d)", x)
}

var _StepValue = map[string]Step{
	_StepName[0:4]:   StepNone,
	_StepName[4:7]:   StepAdd,
	_StepName[7:13]:  StepRemove,
	_StepName[13:16]: StepMax,
}

// ParseStep attempts to convert a string to a Step.
func ParseStep(name string) (Step, error) {
	if x, ok := _StepValue[name]; ok {
		return x, nil
	}
	return Step(0), fmt.Errorf("%s is not a valid Step", name)
}
