// Code generated by ent, DO NOT EDIT.

package kernel

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tikafog/of/dbc/kernel/predicate"
	"github.com/tikafog/of/dbc/kernel/resource"
)

// ResourceUpdate is the builder for updating Resource entities.
type ResourceUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceMutation
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ru *ResourceUpdate) Where(ps ...predicate.Resource) *ResourceUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRid sets the "rid" field.
func (ru *ResourceUpdate) SetRid(s string) *ResourceUpdate {
	ru.mutation.SetRid(s)
	return ru
}

// SetStatus sets the "status" field.
func (ru *ResourceUpdate) SetStatus(u uint8) *ResourceUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(u)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableStatus(u *uint8) *ResourceUpdate {
	if u != nil {
		ru.SetStatus(*u)
	}
	return ru
}

// AddStatus adds u to the "status" field.
func (ru *ResourceUpdate) AddStatus(u int8) *ResourceUpdate {
	ru.mutation.AddStatus(u)
	return ru
}

// SetStep sets the "step" field.
func (ru *ResourceUpdate) SetStep(u uint8) *ResourceUpdate {
	ru.mutation.ResetStep()
	ru.mutation.SetStep(u)
	return ru
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableStep(u *uint8) *ResourceUpdate {
	if u != nil {
		ru.SetStep(*u)
	}
	return ru
}

// AddStep adds u to the "step" field.
func (ru *ResourceUpdate) AddStep(u int8) *ResourceUpdate {
	ru.mutation.AddStep(u)
	return ru
}

// SetRetried sets the "retried" field.
func (ru *ResourceUpdate) SetRetried(i int) *ResourceUpdate {
	ru.mutation.ResetRetried()
	ru.mutation.SetRetried(i)
	return ru
}

// SetNillableRetried sets the "retried" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableRetried(i *int) *ResourceUpdate {
	if i != nil {
		ru.SetRetried(*i)
	}
	return ru
}

// AddRetried adds i to the "retried" field.
func (ru *ResourceUpdate) AddRetried(i int) *ResourceUpdate {
	ru.mutation.AddRetried(i)
	return ru
}

// SetPriority sets the "priority" field.
func (ru *ResourceUpdate) SetPriority(i int) *ResourceUpdate {
	ru.mutation.ResetPriority()
	ru.mutation.SetPriority(i)
	return ru
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillablePriority(i *int) *ResourceUpdate {
	if i != nil {
		ru.SetPriority(*i)
	}
	return ru
}

// AddPriority adds i to the "priority" field.
func (ru *ResourceUpdate) AddPriority(i int) *ResourceUpdate {
	ru.mutation.AddPriority(i)
	return ru
}

// SetRelate sets the "relate" field.
func (ru *ResourceUpdate) SetRelate(s string) *ResourceUpdate {
	ru.mutation.SetRelate(s)
	return ru
}

// SetNillableRelate sets the "relate" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableRelate(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetRelate(*s)
	}
	return ru
}

// SetUpdatedUnix sets the "updated_unix" field.
func (ru *ResourceUpdate) SetUpdatedUnix(i int64) *ResourceUpdate {
	ru.mutation.ResetUpdatedUnix()
	ru.mutation.SetUpdatedUnix(i)
	return ru
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableUpdatedUnix(i *int64) *ResourceUpdate {
	if i != nil {
		ru.SetUpdatedUnix(*i)
	}
	return ru
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (ru *ResourceUpdate) AddUpdatedUnix(i int64) *ResourceUpdate {
	ru.mutation.AddUpdatedUnix(i)
	return ru
}

// SetComment sets the "comment" field.
func (ru *ResourceUpdate) SetComment(s string) *ResourceUpdate {
	ru.mutation.SetComment(s)
	return ru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableComment(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetComment(*s)
	}
	return ru
}

// ClearComment clears the value of the "comment" field.
func (ru *ResourceUpdate) ClearComment() *ResourceUpdate {
	ru.mutation.ClearComment()
	return ru
}

// Mutation returns the ResourceMutation object of the builder.
func (ru *ResourceUpdate) Mutation() *ResourceMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("kernel: uninitialized hook (forgotten import kernel/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResourceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResourceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resource.Table,
			Columns: resource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resource.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Rid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resource.FieldRid,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: resource.FieldStatus,
		})
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: resource.FieldStatus,
		})
	}
	if value, ok := ru.mutation.Step(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: resource.FieldStep,
		})
	}
	if value, ok := ru.mutation.AddedStep(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: resource.FieldStep,
		})
	}
	if value, ok := ru.mutation.Retried(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resource.FieldRetried,
		})
	}
	if value, ok := ru.mutation.AddedRetried(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resource.FieldRetried,
		})
	}
	if value, ok := ru.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resource.FieldPriority,
		})
	}
	if value, ok := ru.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resource.FieldPriority,
		})
	}
	if value, ok := ru.mutation.Relate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resource.FieldRelate,
		})
	}
	if value, ok := ru.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resource.FieldUpdatedUnix,
		})
	}
	if value, ok := ru.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resource.FieldUpdatedUnix,
		})
	}
	if value, ok := ru.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resource.FieldComment,
		})
	}
	if ru.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resource.FieldComment,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ResourceUpdateOne is the builder for updating a single Resource entity.
type ResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourceMutation
}

// SetRid sets the "rid" field.
func (ruo *ResourceUpdateOne) SetRid(s string) *ResourceUpdateOne {
	ruo.mutation.SetRid(s)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ResourceUpdateOne) SetStatus(u uint8) *ResourceUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(u)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableStatus(u *uint8) *ResourceUpdateOne {
	if u != nil {
		ruo.SetStatus(*u)
	}
	return ruo
}

// AddStatus adds u to the "status" field.
func (ruo *ResourceUpdateOne) AddStatus(u int8) *ResourceUpdateOne {
	ruo.mutation.AddStatus(u)
	return ruo
}

// SetStep sets the "step" field.
func (ruo *ResourceUpdateOne) SetStep(u uint8) *ResourceUpdateOne {
	ruo.mutation.ResetStep()
	ruo.mutation.SetStep(u)
	return ruo
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableStep(u *uint8) *ResourceUpdateOne {
	if u != nil {
		ruo.SetStep(*u)
	}
	return ruo
}

// AddStep adds u to the "step" field.
func (ruo *ResourceUpdateOne) AddStep(u int8) *ResourceUpdateOne {
	ruo.mutation.AddStep(u)
	return ruo
}

// SetRetried sets the "retried" field.
func (ruo *ResourceUpdateOne) SetRetried(i int) *ResourceUpdateOne {
	ruo.mutation.ResetRetried()
	ruo.mutation.SetRetried(i)
	return ruo
}

// SetNillableRetried sets the "retried" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableRetried(i *int) *ResourceUpdateOne {
	if i != nil {
		ruo.SetRetried(*i)
	}
	return ruo
}

// AddRetried adds i to the "retried" field.
func (ruo *ResourceUpdateOne) AddRetried(i int) *ResourceUpdateOne {
	ruo.mutation.AddRetried(i)
	return ruo
}

// SetPriority sets the "priority" field.
func (ruo *ResourceUpdateOne) SetPriority(i int) *ResourceUpdateOne {
	ruo.mutation.ResetPriority()
	ruo.mutation.SetPriority(i)
	return ruo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillablePriority(i *int) *ResourceUpdateOne {
	if i != nil {
		ruo.SetPriority(*i)
	}
	return ruo
}

// AddPriority adds i to the "priority" field.
func (ruo *ResourceUpdateOne) AddPriority(i int) *ResourceUpdateOne {
	ruo.mutation.AddPriority(i)
	return ruo
}

// SetRelate sets the "relate" field.
func (ruo *ResourceUpdateOne) SetRelate(s string) *ResourceUpdateOne {
	ruo.mutation.SetRelate(s)
	return ruo
}

// SetNillableRelate sets the "relate" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableRelate(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetRelate(*s)
	}
	return ruo
}

// SetUpdatedUnix sets the "updated_unix" field.
func (ruo *ResourceUpdateOne) SetUpdatedUnix(i int64) *ResourceUpdateOne {
	ruo.mutation.ResetUpdatedUnix()
	ruo.mutation.SetUpdatedUnix(i)
	return ruo
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableUpdatedUnix(i *int64) *ResourceUpdateOne {
	if i != nil {
		ruo.SetUpdatedUnix(*i)
	}
	return ruo
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (ruo *ResourceUpdateOne) AddUpdatedUnix(i int64) *ResourceUpdateOne {
	ruo.mutation.AddUpdatedUnix(i)
	return ruo
}

// SetComment sets the "comment" field.
func (ruo *ResourceUpdateOne) SetComment(s string) *ResourceUpdateOne {
	ruo.mutation.SetComment(s)
	return ruo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableComment(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetComment(*s)
	}
	return ruo
}

// ClearComment clears the value of the "comment" field.
func (ruo *ResourceUpdateOne) ClearComment() *ResourceUpdateOne {
	ruo.mutation.ClearComment()
	return ruo
}

// Mutation returns the ResourceMutation object of the builder.
func (ruo *ResourceUpdateOne) Mutation() *ResourceMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResourceUpdateOne) Select(field string, fields ...string) *ResourceUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resource entity.
func (ruo *ResourceUpdateOne) Save(ctx context.Context) (*Resource, error) {
	var (
		err  error
		node *Resource
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("kernel: uninitialized hook (forgotten import kernel/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Resource)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ResourceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResourceUpdateOne) SaveX(ctx context.Context) *Resource {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResourceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ResourceUpdateOne) sqlSave(ctx context.Context) (_node *Resource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resource.Table,
			Columns: resource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resource.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`kernel: missing "Resource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resource.FieldID)
		for _, f := range fields {
			if !resource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("kernel: invalid field %q for query", f)}
			}
			if f != resource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Rid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resource.FieldRid,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: resource.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: resource.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.Step(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: resource.FieldStep,
		})
	}
	if value, ok := ruo.mutation.AddedStep(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: resource.FieldStep,
		})
	}
	if value, ok := ruo.mutation.Retried(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resource.FieldRetried,
		})
	}
	if value, ok := ruo.mutation.AddedRetried(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resource.FieldRetried,
		})
	}
	if value, ok := ruo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resource.FieldPriority,
		})
	}
	if value, ok := ruo.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resource.FieldPriority,
		})
	}
	if value, ok := ruo.mutation.Relate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resource.FieldRelate,
		})
	}
	if value, ok := ruo.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resource.FieldUpdatedUnix,
		})
	}
	if value, ok := ruo.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resource.FieldUpdatedUnix,
		})
	}
	if value, ok := ruo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resource.FieldComment,
		})
	}
	if ruo.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resource.FieldComment,
		})
	}
	_node = &Resource{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
