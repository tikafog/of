// Code generated by ent, DO NOT EDIT.

package instruct

import (
	"entgo.io/ent/dialect/sql"
	"github.com/tikafog/of/dbc/kernel/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CurrentUnix applies equality check predicate on the "current_unix" field. It's identical to CurrentUnixEQ.
func CurrentUnix(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentUnix), v))
	})
}

// UpdatedUnix applies equality check predicate on the "updated_unix" field. It's identical to UpdatedUnixEQ.
func UpdatedUnix(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// CurrentUnixEQ applies the EQ predicate on the "current_unix" field.
func CurrentUnixEQ(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentUnix), v))
	})
}

// CurrentUnixNEQ applies the NEQ predicate on the "current_unix" field.
func CurrentUnixNEQ(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentUnix), v))
	})
}

// CurrentUnixIn applies the In predicate on the "current_unix" field.
func CurrentUnixIn(vs ...int64) predicate.Instruct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instruct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrentUnix), v...))
	})
}

// CurrentUnixNotIn applies the NotIn predicate on the "current_unix" field.
func CurrentUnixNotIn(vs ...int64) predicate.Instruct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instruct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrentUnix), v...))
	})
}

// CurrentUnixGT applies the GT predicate on the "current_unix" field.
func CurrentUnixGT(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentUnix), v))
	})
}

// CurrentUnixGTE applies the GTE predicate on the "current_unix" field.
func CurrentUnixGTE(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentUnix), v))
	})
}

// CurrentUnixLT applies the LT predicate on the "current_unix" field.
func CurrentUnixLT(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentUnix), v))
	})
}

// CurrentUnixLTE applies the LTE predicate on the "current_unix" field.
func CurrentUnixLTE(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentUnix), v))
	})
}

// UpdatedUnixEQ applies the EQ predicate on the "updated_unix" field.
func UpdatedUnixEQ(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixNEQ applies the NEQ predicate on the "updated_unix" field.
func UpdatedUnixNEQ(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixIn applies the In predicate on the "updated_unix" field.
func UpdatedUnixIn(vs ...int64) predicate.Instruct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instruct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixNotIn applies the NotIn predicate on the "updated_unix" field.
func UpdatedUnixNotIn(vs ...int64) predicate.Instruct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instruct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixGT applies the GT predicate on the "updated_unix" field.
func UpdatedUnixGT(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixGTE applies the GTE predicate on the "updated_unix" field.
func UpdatedUnixGTE(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLT applies the LT predicate on the "updated_unix" field.
func UpdatedUnixLT(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLTE applies the LTE predicate on the "updated_unix" field.
func UpdatedUnixLTE(v int64) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedUnix), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Instruct) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Instruct) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Instruct) predicate.Instruct {
	return predicate.Instruct(func(s *sql.Selector) {
		p(s.Not())
	})
}
