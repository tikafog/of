// Code generated by ent, DO NOT EDIT.

package kernel

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/tikafog/of/dbc/kernel/instruct"
	"github.com/tikafog/of/dbc/kernel/predicate"
	"github.com/tikafog/of/dbc/kernel/resource"
	"github.com/tikafog/of/dbc/kernel/version"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeInstruct = "instruct"
	TypeResource = "Resource"
	TypeVersion  = "Version"
)

// InstructMutation represents an operation that mutates the Instruct nodes in the graph.
type InstructMutation struct {
	config
	op              Op
	typ             string
	id              *int
	current_unix    *int64
	addcurrent_unix *int64
	updated_unix    *int64
	addupdated_unix *int64
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Instruct, error)
	predicates      []predicate.Instruct
}

var _ ent.Mutation = (*InstructMutation)(nil)

// instructOption allows management of the mutation configuration using functional options.
type instructOption func(*InstructMutation)

// newInstructMutation creates new mutation for the Instruct entity.
func newInstructMutation(c config, op Op, opts ...instructOption) *InstructMutation {
	m := &InstructMutation{
		config:        c,
		op:            op,
		typ:           TypeInstruct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInstructID sets the ID field of the mutation.
func withInstructID(id int) instructOption {
	return func(m *InstructMutation) {
		var (
			err   error
			once  sync.Once
			value *Instruct
		)
		m.oldValue = func(ctx context.Context) (*Instruct, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Instruct.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInstruct sets the old Instruct of the mutation.
func withInstruct(node *Instruct) instructOption {
	return func(m *InstructMutation) {
		m.oldValue = func(context.Context) (*Instruct, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InstructMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InstructMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("kernel: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InstructMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InstructMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Instruct.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCurrentUnix sets the "current_unix" field.
func (m *InstructMutation) SetCurrentUnix(i int64) {
	m.current_unix = &i
	m.addcurrent_unix = nil
}

// CurrentUnix returns the value of the "current_unix" field in the mutation.
func (m *InstructMutation) CurrentUnix() (r int64, exists bool) {
	v := m.current_unix
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentUnix returns the old "current_unix" field's value of the Instruct entity.
// If the Instruct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstructMutation) OldCurrentUnix(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentUnix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentUnix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentUnix: %w", err)
	}
	return oldValue.CurrentUnix, nil
}

// AddCurrentUnix adds i to the "current_unix" field.
func (m *InstructMutation) AddCurrentUnix(i int64) {
	if m.addcurrent_unix != nil {
		*m.addcurrent_unix += i
	} else {
		m.addcurrent_unix = &i
	}
}

// AddedCurrentUnix returns the value that was added to the "current_unix" field in this mutation.
func (m *InstructMutation) AddedCurrentUnix() (r int64, exists bool) {
	v := m.addcurrent_unix
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrentUnix resets all changes to the "current_unix" field.
func (m *InstructMutation) ResetCurrentUnix() {
	m.current_unix = nil
	m.addcurrent_unix = nil
}

// SetUpdatedUnix sets the "updated_unix" field.
func (m *InstructMutation) SetUpdatedUnix(i int64) {
	m.updated_unix = &i
	m.addupdated_unix = nil
}

// UpdatedUnix returns the value of the "updated_unix" field in the mutation.
func (m *InstructMutation) UpdatedUnix() (r int64, exists bool) {
	v := m.updated_unix
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedUnix returns the old "updated_unix" field's value of the Instruct entity.
// If the Instruct object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstructMutation) OldUpdatedUnix(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedUnix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedUnix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedUnix: %w", err)
	}
	return oldValue.UpdatedUnix, nil
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (m *InstructMutation) AddUpdatedUnix(i int64) {
	if m.addupdated_unix != nil {
		*m.addupdated_unix += i
	} else {
		m.addupdated_unix = &i
	}
}

// AddedUpdatedUnix returns the value that was added to the "updated_unix" field in this mutation.
func (m *InstructMutation) AddedUpdatedUnix() (r int64, exists bool) {
	v := m.addupdated_unix
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedUnix resets all changes to the "updated_unix" field.
func (m *InstructMutation) ResetUpdatedUnix() {
	m.updated_unix = nil
	m.addupdated_unix = nil
}

// Where appends a list predicates to the InstructMutation builder.
func (m *InstructMutation) Where(ps ...predicate.Instruct) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *InstructMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Instruct).
func (m *InstructMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InstructMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.current_unix != nil {
		fields = append(fields, instruct.FieldCurrentUnix)
	}
	if m.updated_unix != nil {
		fields = append(fields, instruct.FieldUpdatedUnix)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InstructMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case instruct.FieldCurrentUnix:
		return m.CurrentUnix()
	case instruct.FieldUpdatedUnix:
		return m.UpdatedUnix()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InstructMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case instruct.FieldCurrentUnix:
		return m.OldCurrentUnix(ctx)
	case instruct.FieldUpdatedUnix:
		return m.OldUpdatedUnix(ctx)
	}
	return nil, fmt.Errorf("unknown instruct field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstructMutation) SetField(name string, value ent.Value) error {
	switch name {
	case instruct.FieldCurrentUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentUnix(v)
		return nil
	case instruct.FieldUpdatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedUnix(v)
		return nil
	}
	return fmt.Errorf("unknown instruct field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InstructMutation) AddedFields() []string {
	var fields []string
	if m.addcurrent_unix != nil {
		fields = append(fields, instruct.FieldCurrentUnix)
	}
	if m.addupdated_unix != nil {
		fields = append(fields, instruct.FieldUpdatedUnix)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InstructMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case instruct.FieldCurrentUnix:
		return m.AddedCurrentUnix()
	case instruct.FieldUpdatedUnix:
		return m.AddedUpdatedUnix()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstructMutation) AddField(name string, value ent.Value) error {
	switch name {
	case instruct.FieldCurrentUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentUnix(v)
		return nil
	case instruct.FieldUpdatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedUnix(v)
		return nil
	}
	return fmt.Errorf("unknown instruct numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InstructMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InstructMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InstructMutation) ClearField(name string) error {
	return fmt.Errorf("unknown instruct nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InstructMutation) ResetField(name string) error {
	switch name {
	case instruct.FieldCurrentUnix:
		m.ResetCurrentUnix()
		return nil
	case instruct.FieldUpdatedUnix:
		m.ResetUpdatedUnix()
		return nil
	}
	return fmt.Errorf("unknown instruct field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InstructMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InstructMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InstructMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InstructMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InstructMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InstructMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InstructMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown instruct unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InstructMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown instruct edge %s", name)
}

// ResourceMutation represents an operation that mutates the Resource nodes in the graph.
type ResourceMutation struct {
	config
	op              Op
	typ             string
	id              *int
	rid             *string
	status          *uint8
	addstatus       *int8
	step            *uint8
	addstep         *int8
	retried         *int
	addretried      *int
	priority        *int
	addpriority     *int
	relate          *string
	updated_unix    *int64
	addupdated_unix *int64
	comment         *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Resource, error)
	predicates      []predicate.Resource
}

var _ ent.Mutation = (*ResourceMutation)(nil)

// resourceOption allows management of the mutation configuration using functional options.
type resourceOption func(*ResourceMutation)

// newResourceMutation creates new mutation for the Resource entity.
func newResourceMutation(c config, op Op, opts ...resourceOption) *ResourceMutation {
	m := &ResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResourceID sets the ID field of the mutation.
func withResourceID(id int) resourceOption {
	return func(m *ResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Resource
		)
		m.oldValue = func(ctx context.Context) (*Resource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Resource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResource sets the old Resource of the mutation.
func withResource(node *Resource) resourceOption {
	return func(m *ResourceMutation) {
		m.oldValue = func(context.Context) (*Resource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("kernel: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Resource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRid sets the "rid" field.
func (m *ResourceMutation) SetRid(s string) {
	m.rid = &s
}

// Rid returns the value of the "rid" field in the mutation.
func (m *ResourceMutation) Rid() (r string, exists bool) {
	v := m.rid
	if v == nil {
		return
	}
	return *v, true
}

// OldRid returns the old "rid" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldRid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRid: %w", err)
	}
	return oldValue.Rid, nil
}

// ResetRid resets all changes to the "rid" field.
func (m *ResourceMutation) ResetRid() {
	m.rid = nil
}

// SetStatus sets the "status" field.
func (m *ResourceMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ResourceMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ResourceMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ResourceMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ResourceMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetStep sets the "step" field.
func (m *ResourceMutation) SetStep(u uint8) {
	m.step = &u
	m.addstep = nil
}

// Step returns the value of the "step" field in the mutation.
func (m *ResourceMutation) Step() (r uint8, exists bool) {
	v := m.step
	if v == nil {
		return
	}
	return *v, true
}

// OldStep returns the old "step" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldStep(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStep is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStep requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStep: %w", err)
	}
	return oldValue.Step, nil
}

// AddStep adds u to the "step" field.
func (m *ResourceMutation) AddStep(u int8) {
	if m.addstep != nil {
		*m.addstep += u
	} else {
		m.addstep = &u
	}
}

// AddedStep returns the value that was added to the "step" field in this mutation.
func (m *ResourceMutation) AddedStep() (r int8, exists bool) {
	v := m.addstep
	if v == nil {
		return
	}
	return *v, true
}

// ResetStep resets all changes to the "step" field.
func (m *ResourceMutation) ResetStep() {
	m.step = nil
	m.addstep = nil
}

// SetRetried sets the "retried" field.
func (m *ResourceMutation) SetRetried(i int) {
	m.retried = &i
	m.addretried = nil
}

// Retried returns the value of the "retried" field in the mutation.
func (m *ResourceMutation) Retried() (r int, exists bool) {
	v := m.retried
	if v == nil {
		return
	}
	return *v, true
}

// OldRetried returns the old "retried" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldRetried(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetried is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetried requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetried: %w", err)
	}
	return oldValue.Retried, nil
}

// AddRetried adds i to the "retried" field.
func (m *ResourceMutation) AddRetried(i int) {
	if m.addretried != nil {
		*m.addretried += i
	} else {
		m.addretried = &i
	}
}

// AddedRetried returns the value that was added to the "retried" field in this mutation.
func (m *ResourceMutation) AddedRetried() (r int, exists bool) {
	v := m.addretried
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetried resets all changes to the "retried" field.
func (m *ResourceMutation) ResetRetried() {
	m.retried = nil
	m.addretried = nil
}

// SetPriority sets the "priority" field.
func (m *ResourceMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *ResourceMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldPriority(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *ResourceMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *ResourceMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *ResourceMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetRelate sets the "relate" field.
func (m *ResourceMutation) SetRelate(s string) {
	m.relate = &s
}

// Relate returns the value of the "relate" field in the mutation.
func (m *ResourceMutation) Relate() (r string, exists bool) {
	v := m.relate
	if v == nil {
		return
	}
	return *v, true
}

// OldRelate returns the old "relate" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldRelate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelate: %w", err)
	}
	return oldValue.Relate, nil
}

// ResetRelate resets all changes to the "relate" field.
func (m *ResourceMutation) ResetRelate() {
	m.relate = nil
}

// SetUpdatedUnix sets the "updated_unix" field.
func (m *ResourceMutation) SetUpdatedUnix(i int64) {
	m.updated_unix = &i
	m.addupdated_unix = nil
}

// UpdatedUnix returns the value of the "updated_unix" field in the mutation.
func (m *ResourceMutation) UpdatedUnix() (r int64, exists bool) {
	v := m.updated_unix
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedUnix returns the old "updated_unix" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldUpdatedUnix(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedUnix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedUnix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedUnix: %w", err)
	}
	return oldValue.UpdatedUnix, nil
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (m *ResourceMutation) AddUpdatedUnix(i int64) {
	if m.addupdated_unix != nil {
		*m.addupdated_unix += i
	} else {
		m.addupdated_unix = &i
	}
}

// AddedUpdatedUnix returns the value that was added to the "updated_unix" field in this mutation.
func (m *ResourceMutation) AddedUpdatedUnix() (r int64, exists bool) {
	v := m.addupdated_unix
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedUnix resets all changes to the "updated_unix" field.
func (m *ResourceMutation) ResetUpdatedUnix() {
	m.updated_unix = nil
	m.addupdated_unix = nil
}

// SetComment sets the "comment" field.
func (m *ResourceMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *ResourceMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *ResourceMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[resource.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *ResourceMutation) CommentCleared() bool {
	_, ok := m.clearedFields[resource.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *ResourceMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, resource.FieldComment)
}

// Where appends a list predicates to the ResourceMutation builder.
func (m *ResourceMutation) Where(ps ...predicate.Resource) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ResourceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Resource).
func (m *ResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResourceMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.rid != nil {
		fields = append(fields, resource.FieldRid)
	}
	if m.status != nil {
		fields = append(fields, resource.FieldStatus)
	}
	if m.step != nil {
		fields = append(fields, resource.FieldStep)
	}
	if m.retried != nil {
		fields = append(fields, resource.FieldRetried)
	}
	if m.priority != nil {
		fields = append(fields, resource.FieldPriority)
	}
	if m.relate != nil {
		fields = append(fields, resource.FieldRelate)
	}
	if m.updated_unix != nil {
		fields = append(fields, resource.FieldUpdatedUnix)
	}
	if m.comment != nil {
		fields = append(fields, resource.FieldComment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case resource.FieldRid:
		return m.Rid()
	case resource.FieldStatus:
		return m.Status()
	case resource.FieldStep:
		return m.Step()
	case resource.FieldRetried:
		return m.Retried()
	case resource.FieldPriority:
		return m.Priority()
	case resource.FieldRelate:
		return m.Relate()
	case resource.FieldUpdatedUnix:
		return m.UpdatedUnix()
	case resource.FieldComment:
		return m.Comment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case resource.FieldRid:
		return m.OldRid(ctx)
	case resource.FieldStatus:
		return m.OldStatus(ctx)
	case resource.FieldStep:
		return m.OldStep(ctx)
	case resource.FieldRetried:
		return m.OldRetried(ctx)
	case resource.FieldPriority:
		return m.OldPriority(ctx)
	case resource.FieldRelate:
		return m.OldRelate(ctx)
	case resource.FieldUpdatedUnix:
		return m.OldUpdatedUnix(ctx)
	case resource.FieldComment:
		return m.OldComment(ctx)
	}
	return nil, fmt.Errorf("unknown Resource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case resource.FieldRid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRid(v)
		return nil
	case resource.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case resource.FieldStep:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStep(v)
		return nil
	case resource.FieldRetried:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetried(v)
		return nil
	case resource.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case resource.FieldRelate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelate(v)
		return nil
	case resource.FieldUpdatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedUnix(v)
		return nil
	case resource.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResourceMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, resource.FieldStatus)
	}
	if m.addstep != nil {
		fields = append(fields, resource.FieldStep)
	}
	if m.addretried != nil {
		fields = append(fields, resource.FieldRetried)
	}
	if m.addpriority != nil {
		fields = append(fields, resource.FieldPriority)
	}
	if m.addupdated_unix != nil {
		fields = append(fields, resource.FieldUpdatedUnix)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case resource.FieldStatus:
		return m.AddedStatus()
	case resource.FieldStep:
		return m.AddedStep()
	case resource.FieldRetried:
		return m.AddedRetried()
	case resource.FieldPriority:
		return m.AddedPriority()
	case resource.FieldUpdatedUnix:
		return m.AddedUpdatedUnix()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case resource.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case resource.FieldStep:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStep(v)
		return nil
	case resource.FieldRetried:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetried(v)
		return nil
	case resource.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	case resource.FieldUpdatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedUnix(v)
		return nil
	}
	return fmt.Errorf("unknown Resource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(resource.FieldComment) {
		fields = append(fields, resource.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResourceMutation) ClearField(name string) error {
	switch name {
	case resource.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown Resource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResourceMutation) ResetField(name string) error {
	switch name {
	case resource.FieldRid:
		m.ResetRid()
		return nil
	case resource.FieldStatus:
		m.ResetStatus()
		return nil
	case resource.FieldStep:
		m.ResetStep()
		return nil
	case resource.FieldRetried:
		m.ResetRetried()
		return nil
	case resource.FieldPriority:
		m.ResetPriority()
		return nil
	case resource.FieldRelate:
		m.ResetRelate()
		return nil
	case resource.FieldUpdatedUnix:
		m.ResetUpdatedUnix()
		return nil
	case resource.FieldComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Resource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Resource edge %s", name)
}

// VersionMutation represents an operation that mutates the Version nodes in the graph.
type VersionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Current      *int
	add_Current   *int
	_Last         *int
	add_Last      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Version, error)
	predicates    []predicate.Version
}

var _ ent.Mutation = (*VersionMutation)(nil)

// versionOption allows management of the mutation configuration using functional options.
type versionOption func(*VersionMutation)

// newVersionMutation creates new mutation for the Version entity.
func newVersionMutation(c config, op Op, opts ...versionOption) *VersionMutation {
	m := &VersionMutation{
		config:        c,
		op:            op,
		typ:           TypeVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVersionID sets the ID field of the mutation.
func withVersionID(id int) versionOption {
	return func(m *VersionMutation) {
		var (
			err   error
			once  sync.Once
			value *Version
		)
		m.oldValue = func(ctx context.Context) (*Version, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Version.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVersion sets the old Version of the mutation.
func withVersion(node *Version) versionOption {
	return func(m *VersionMutation) {
		m.oldValue = func(context.Context) (*Version, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("kernel: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VersionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VersionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Version.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCurrent sets the "Current" field.
func (m *VersionMutation) SetCurrent(i int) {
	m._Current = &i
	m.add_Current = nil
}

// Current returns the value of the "Current" field in the mutation.
func (m *VersionMutation) Current() (r int, exists bool) {
	v := m._Current
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrent returns the old "Current" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldCurrent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrent: %w", err)
	}
	return oldValue.Current, nil
}

// AddCurrent adds i to the "Current" field.
func (m *VersionMutation) AddCurrent(i int) {
	if m.add_Current != nil {
		*m.add_Current += i
	} else {
		m.add_Current = &i
	}
}

// AddedCurrent returns the value that was added to the "Current" field in this mutation.
func (m *VersionMutation) AddedCurrent() (r int, exists bool) {
	v := m.add_Current
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrent resets all changes to the "Current" field.
func (m *VersionMutation) ResetCurrent() {
	m._Current = nil
	m.add_Current = nil
}

// SetLast sets the "Last" field.
func (m *VersionMutation) SetLast(i int) {
	m._Last = &i
	m.add_Last = nil
}

// Last returns the value of the "Last" field in the mutation.
func (m *VersionMutation) Last() (r int, exists bool) {
	v := m._Last
	if v == nil {
		return
	}
	return *v, true
}

// OldLast returns the old "Last" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldLast(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLast is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLast requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLast: %w", err)
	}
	return oldValue.Last, nil
}

// AddLast adds i to the "Last" field.
func (m *VersionMutation) AddLast(i int) {
	if m.add_Last != nil {
		*m.add_Last += i
	} else {
		m.add_Last = &i
	}
}

// AddedLast returns the value that was added to the "Last" field in this mutation.
func (m *VersionMutation) AddedLast() (r int, exists bool) {
	v := m.add_Last
	if v == nil {
		return
	}
	return *v, true
}

// ResetLast resets all changes to the "Last" field.
func (m *VersionMutation) ResetLast() {
	m._Last = nil
	m.add_Last = nil
}

// Where appends a list predicates to the VersionMutation builder.
func (m *VersionMutation) Where(ps ...predicate.Version) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VersionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Version).
func (m *VersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VersionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Current != nil {
		fields = append(fields, version.FieldCurrent)
	}
	if m._Last != nil {
		fields = append(fields, version.FieldLast)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case version.FieldCurrent:
		return m.Current()
	case version.FieldLast:
		return m.Last()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case version.FieldCurrent:
		return m.OldCurrent(ctx)
	case version.FieldLast:
		return m.OldLast(ctx)
	}
	return nil, fmt.Errorf("unknown Version field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case version.FieldCurrent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrent(v)
		return nil
	case version.FieldLast:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLast(v)
		return nil
	}
	return fmt.Errorf("unknown Version field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VersionMutation) AddedFields() []string {
	var fields []string
	if m.add_Current != nil {
		fields = append(fields, version.FieldCurrent)
	}
	if m.add_Last != nil {
		fields = append(fields, version.FieldLast)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case version.FieldCurrent:
		return m.AddedCurrent()
	case version.FieldLast:
		return m.AddedLast()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case version.FieldCurrent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrent(v)
		return nil
	case version.FieldLast:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLast(v)
		return nil
	}
	return fmt.Errorf("unknown Version numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Version nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VersionMutation) ResetField(name string) error {
	switch name {
	case version.FieldCurrent:
		m.ResetCurrent()
		return nil
	case version.FieldLast:
		m.ResetLast()
		return nil
	}
	return fmt.Errorf("unknown Version field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VersionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VersionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VersionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VersionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Version unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VersionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Version edge %s", name)
}
