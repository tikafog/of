// Code generated by entc, DO NOT EDIT.

package kernel

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tikafog/of/dbc/kernel/pin"
)

// PinCreate is the builder for creating a Pin entity.
type PinCreate struct {
	config
	mutation *PinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRid sets the "rid" field.
func (pc *PinCreate) SetRid(s string) *PinCreate {
	pc.mutation.SetRid(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *PinCreate) SetStatus(s string) *PinCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PinCreate) SetNillableStatus(s *string) *PinCreate {
	if s != nil {
		pc.SetStatus(*s)
	}
	return pc
}

// SetStep sets the "step" field.
func (pc *PinCreate) SetStep(s string) *PinCreate {
	pc.mutation.SetStep(s)
	return pc
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (pc *PinCreate) SetNillableStep(s *string) *PinCreate {
	if s != nil {
		pc.SetStep(*s)
	}
	return pc
}

// SetPriority sets the "priority" field.
func (pc *PinCreate) SetPriority(i int) *PinCreate {
	pc.mutation.SetPriority(i)
	return pc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pc *PinCreate) SetNillablePriority(i *int) *PinCreate {
	if i != nil {
		pc.SetPriority(*i)
	}
	return pc
}

// SetRelate sets the "relate" field.
func (pc *PinCreate) SetRelate(s string) *PinCreate {
	pc.mutation.SetRelate(s)
	return pc
}

// SetNillableRelate sets the "relate" field if the given value is not nil.
func (pc *PinCreate) SetNillableRelate(s *string) *PinCreate {
	if s != nil {
		pc.SetRelate(*s)
	}
	return pc
}

// SetUpdatedUnix sets the "updated_unix" field.
func (pc *PinCreate) SetUpdatedUnix(i int64) *PinCreate {
	pc.mutation.SetUpdatedUnix(i)
	return pc
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (pc *PinCreate) SetNillableUpdatedUnix(i *int64) *PinCreate {
	if i != nil {
		pc.SetUpdatedUnix(*i)
	}
	return pc
}

// SetComment sets the "comment" field.
func (pc *PinCreate) SetComment(s string) *PinCreate {
	pc.mutation.SetComment(s)
	return pc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pc *PinCreate) SetNillableComment(s *string) *PinCreate {
	if s != nil {
		pc.SetComment(*s)
	}
	return pc
}

// Mutation returns the PinMutation object of the builder.
func (pc *PinCreate) Mutation() *PinMutation {
	return pc.mutation
}

// Save creates the Pin in the database.
func (pc *PinCreate) Save(ctx context.Context) (*Pin, error) {
	var (
		err  error
		node *Pin
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("kernel: uninitialized hook (forgotten import kernel/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PinCreate) SaveX(ctx context.Context) *Pin {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PinCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PinCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PinCreate) defaults() {
	if _, ok := pc.mutation.Status(); !ok {
		v := pin.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.Step(); !ok {
		v := pin.DefaultStep
		pc.mutation.SetStep(v)
	}
	if _, ok := pc.mutation.Priority(); !ok {
		v := pin.DefaultPriority
		pc.mutation.SetPriority(v)
	}
	if _, ok := pc.mutation.Relate(); !ok {
		v := pin.DefaultRelate
		pc.mutation.SetRelate(v)
	}
	if _, ok := pc.mutation.UpdatedUnix(); !ok {
		v := pin.DefaultUpdatedUnix
		pc.mutation.SetUpdatedUnix(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PinCreate) check() error {
	if _, ok := pc.mutation.Rid(); !ok {
		return &ValidationError{Name: "rid", err: errors.New(`kernel: missing required field "Pin.rid"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`kernel: missing required field "Pin.status"`)}
	}
	if _, ok := pc.mutation.Step(); !ok {
		return &ValidationError{Name: "step", err: errors.New(`kernel: missing required field "Pin.step"`)}
	}
	if _, ok := pc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`kernel: missing required field "Pin.priority"`)}
	}
	if _, ok := pc.mutation.Relate(); !ok {
		return &ValidationError{Name: "relate", err: errors.New(`kernel: missing required field "Pin.relate"`)}
	}
	if _, ok := pc.mutation.UpdatedUnix(); !ok {
		return &ValidationError{Name: "updated_unix", err: errors.New(`kernel: missing required field "Pin.updated_unix"`)}
	}
	return nil
}

func (pc *PinCreate) sqlSave(ctx context.Context) (*Pin, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PinCreate) createSpec() (*Pin, *sqlgraph.CreateSpec) {
	var (
		_node = &Pin{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pin.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.Rid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pin.FieldRid,
		})
		_node.Rid = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pin.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pc.mutation.Step(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pin.FieldStep,
		})
		_node.Step = value
	}
	if value, ok := pc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pin.FieldPriority,
		})
		_node.Priority = value
	}
	if value, ok := pc.mutation.Relate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pin.FieldRelate,
		})
		_node.Relate = value
	}
	if value, ok := pc.mutation.UpdatedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pin.FieldUpdatedUnix,
		})
		_node.UpdatedUnix = value
	}
	if value, ok := pc.mutation.Comment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pin.FieldComment,
		})
		_node.Comment = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pin.Create().
//		SetRid(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PinUpsert) {
//			SetRid(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PinCreate) OnConflict(opts ...sql.ConflictOption) *PinUpsertOne {
	pc.conflict = opts
	return &PinUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PinCreate) OnConflictColumns(columns ...string) *PinUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PinUpsertOne{
		create: pc,
	}
}

type (
	// PinUpsertOne is the builder for "upsert"-ing
	//  one Pin node.
	PinUpsertOne struct {
		create *PinCreate
	}

	// PinUpsert is the "OnConflict" setter.
	PinUpsert struct {
		*sql.UpdateSet
	}
)

// SetRid sets the "rid" field.
func (u *PinUpsert) SetRid(v string) *PinUpsert {
	u.Set(pin.FieldRid, v)
	return u
}

// UpdateRid sets the "rid" field to the value that was provided on create.
func (u *PinUpsert) UpdateRid() *PinUpsert {
	u.SetExcluded(pin.FieldRid)
	return u
}

// SetStatus sets the "status" field.
func (u *PinUpsert) SetStatus(v string) *PinUpsert {
	u.Set(pin.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PinUpsert) UpdateStatus() *PinUpsert {
	u.SetExcluded(pin.FieldStatus)
	return u
}

// SetStep sets the "step" field.
func (u *PinUpsert) SetStep(v string) *PinUpsert {
	u.Set(pin.FieldStep, v)
	return u
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *PinUpsert) UpdateStep() *PinUpsert {
	u.SetExcluded(pin.FieldStep)
	return u
}

// SetPriority sets the "priority" field.
func (u *PinUpsert) SetPriority(v int) *PinUpsert {
	u.Set(pin.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *PinUpsert) UpdatePriority() *PinUpsert {
	u.SetExcluded(pin.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *PinUpsert) AddPriority(v int) *PinUpsert {
	u.Add(pin.FieldPriority, v)
	return u
}

// SetRelate sets the "relate" field.
func (u *PinUpsert) SetRelate(v string) *PinUpsert {
	u.Set(pin.FieldRelate, v)
	return u
}

// UpdateRelate sets the "relate" field to the value that was provided on create.
func (u *PinUpsert) UpdateRelate() *PinUpsert {
	u.SetExcluded(pin.FieldRelate)
	return u
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *PinUpsert) SetUpdatedUnix(v int64) *PinUpsert {
	u.Set(pin.FieldUpdatedUnix, v)
	return u
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *PinUpsert) UpdateUpdatedUnix() *PinUpsert {
	u.SetExcluded(pin.FieldUpdatedUnix)
	return u
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *PinUpsert) AddUpdatedUnix(v int64) *PinUpsert {
	u.Add(pin.FieldUpdatedUnix, v)
	return u
}

// SetComment sets the "comment" field.
func (u *PinUpsert) SetComment(v string) *PinUpsert {
	u.Set(pin.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *PinUpsert) UpdateComment() *PinUpsert {
	u.SetExcluded(pin.FieldComment)
	return u
}

// ClearComment clears the value of the "comment" field.
func (u *PinUpsert) ClearComment() *PinUpsert {
	u.SetNull(pin.FieldComment)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PinUpsertOne) UpdateNewValues() *PinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Pin.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PinUpsertOne) Ignore() *PinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PinUpsertOne) DoNothing() *PinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PinCreate.OnConflict
// documentation for more info.
func (u *PinUpsertOne) Update(set func(*PinUpsert)) *PinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PinUpsert{UpdateSet: update})
	}))
	return u
}

// SetRid sets the "rid" field.
func (u *PinUpsertOne) SetRid(v string) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetRid(v)
	})
}

// UpdateRid sets the "rid" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateRid() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateRid()
	})
}

// SetStatus sets the "status" field.
func (u *PinUpsertOne) SetStatus(v string) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateStatus() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateStatus()
	})
}

// SetStep sets the "step" field.
func (u *PinUpsertOne) SetStep(v string) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetStep(v)
	})
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateStep() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateStep()
	})
}

// SetPriority sets the "priority" field.
func (u *PinUpsertOne) SetPriority(v int) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *PinUpsertOne) AddPriority(v int) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *PinUpsertOne) UpdatePriority() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdatePriority()
	})
}

// SetRelate sets the "relate" field.
func (u *PinUpsertOne) SetRelate(v string) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetRelate(v)
	})
}

// UpdateRelate sets the "relate" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateRelate() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateRelate()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *PinUpsertOne) SetUpdatedUnix(v int64) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *PinUpsertOne) AddUpdatedUnix(v int64) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateUpdatedUnix() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateUpdatedUnix()
	})
}

// SetComment sets the "comment" field.
func (u *PinUpsertOne) SetComment(v string) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateComment() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *PinUpsertOne) ClearComment() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.ClearComment()
	})
}

// Exec executes the query.
func (u *PinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("kernel: missing options for PinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PinUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PinUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PinCreateBulk is the builder for creating many Pin entities in bulk.
type PinCreateBulk struct {
	config
	builders []*PinCreate
	conflict []sql.ConflictOption
}

// Save creates the Pin entities in the database.
func (pcb *PinCreateBulk) Save(ctx context.Context) ([]*Pin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pin, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PinCreateBulk) SaveX(ctx context.Context) []*Pin {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PinCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PinCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pin.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PinUpsert) {
//			SetRid(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PinCreateBulk) OnConflict(opts ...sql.ConflictOption) *PinUpsertBulk {
	pcb.conflict = opts
	return &PinUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PinCreateBulk) OnConflictColumns(columns ...string) *PinUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PinUpsertBulk{
		create: pcb,
	}
}

// PinUpsertBulk is the builder for "upsert"-ing
// a bulk of Pin nodes.
type PinUpsertBulk struct {
	create *PinCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PinUpsertBulk) UpdateNewValues() *PinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PinUpsertBulk) Ignore() *PinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PinUpsertBulk) DoNothing() *PinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PinCreateBulk.OnConflict
// documentation for more info.
func (u *PinUpsertBulk) Update(set func(*PinUpsert)) *PinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PinUpsert{UpdateSet: update})
	}))
	return u
}

// SetRid sets the "rid" field.
func (u *PinUpsertBulk) SetRid(v string) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetRid(v)
	})
}

// UpdateRid sets the "rid" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateRid() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateRid()
	})
}

// SetStatus sets the "status" field.
func (u *PinUpsertBulk) SetStatus(v string) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateStatus() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateStatus()
	})
}

// SetStep sets the "step" field.
func (u *PinUpsertBulk) SetStep(v string) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetStep(v)
	})
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateStep() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateStep()
	})
}

// SetPriority sets the "priority" field.
func (u *PinUpsertBulk) SetPriority(v int) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *PinUpsertBulk) AddPriority(v int) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdatePriority() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdatePriority()
	})
}

// SetRelate sets the "relate" field.
func (u *PinUpsertBulk) SetRelate(v string) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetRelate(v)
	})
}

// UpdateRelate sets the "relate" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateRelate() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateRelate()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *PinUpsertBulk) SetUpdatedUnix(v int64) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *PinUpsertBulk) AddUpdatedUnix(v int64) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateUpdatedUnix() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateUpdatedUnix()
	})
}

// SetComment sets the "comment" field.
func (u *PinUpsertBulk) SetComment(v string) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateComment() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *PinUpsertBulk) ClearComment() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.ClearComment()
	})
}

// Exec executes the query.
func (u *PinUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("kernel: OnConflict was set for builder %d. Set it on the PinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("kernel: missing options for PinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
