// Code generated by entc, DO NOT EDIT.

package kernel

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/tikafog/of/dbc/kernel/pin"
)

// Pin is the model entity for the Pin schema.
type Pin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rid holds the value of the "rid" field.
	Rid string `json:"rid,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Step holds the value of the "step" field.
	Step string `json:"step,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// Relate holds the value of the "relate" field.
	Relate string `json:"relate,omitempty"`
	// UpdatedUnix holds the value of the "updated_unix" field.
	UpdatedUnix int64 `json:"updated_unix,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pin.FieldID, pin.FieldPriority, pin.FieldUpdatedUnix:
			values[i] = new(sql.NullInt64)
		case pin.FieldRid, pin.FieldStatus, pin.FieldStep, pin.FieldRelate, pin.FieldComment:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pin fields.
func (pi *Pin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case pin.FieldRid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rid", values[i])
			} else if value.Valid {
				pi.Rid = value.String
			}
		case pin.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pi.Status = value.String
			}
		case pin.FieldStep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				pi.Step = value.String
			}
		case pin.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				pi.Priority = int(value.Int64)
			}
		case pin.FieldRelate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relate", values[i])
			} else if value.Valid {
				pi.Relate = value.String
			}
		case pin.FieldUpdatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_unix", values[i])
			} else if value.Valid {
				pi.UpdatedUnix = value.Int64
			}
		case pin.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				pi.Comment = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pin.
// Note that you need to call Pin.Unwrap() before calling this method if this Pin
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Pin) Update() *PinUpdateOne {
	return (&PinClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the Pin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *Pin) Unwrap() *Pin {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("kernel: Pin is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Pin) String() string {
	var builder strings.Builder
	builder.WriteString("Pin(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteString(", rid=")
	builder.WriteString(pi.Rid)
	builder.WriteString(", status=")
	builder.WriteString(pi.Status)
	builder.WriteString(", step=")
	builder.WriteString(pi.Step)
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", pi.Priority))
	builder.WriteString(", relate=")
	builder.WriteString(pi.Relate)
	builder.WriteString(", updated_unix=")
	builder.WriteString(fmt.Sprintf("%v", pi.UpdatedUnix))
	builder.WriteString(", comment=")
	builder.WriteString(pi.Comment)
	builder.WriteByte(')')
	return builder.String()
}

// Pins is a parsable slice of Pin.
type Pins []*Pin

func (pi Pins) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
