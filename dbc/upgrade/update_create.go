// Code generated by ent, DO NOT EDIT.

package upgrade

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/upgrade/update"
)

// UpdateCreate is the builder for creating a Update entity.
type UpdateCreate struct {
	config
	mutation *UpdateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedUnix sets the "created_unix" field.
func (uc *UpdateCreate) SetCreatedUnix(i int64) *UpdateCreate {
	uc.mutation.SetCreatedUnix(i)
	return uc
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableCreatedUnix(i *int64) *UpdateCreate {
	if i != nil {
		uc.SetCreatedUnix(*i)
	}
	return uc
}

// SetUpdatedUnix sets the "updated_unix" field.
func (uc *UpdateCreate) SetUpdatedUnix(i int64) *UpdateCreate {
	uc.mutation.SetUpdatedUnix(i)
	return uc
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableUpdatedUnix(i *int64) *UpdateCreate {
	if i != nil {
		uc.SetUpdatedUnix(*i)
	}
	return uc
}

// SetDeletedUnix sets the "deleted_unix" field.
func (uc *UpdateCreate) SetDeletedUnix(i int64) *UpdateCreate {
	uc.mutation.SetDeletedUnix(i)
	return uc
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableDeletedUnix(i *int64) *UpdateCreate {
	if i != nil {
		uc.SetDeletedUnix(*i)
	}
	return uc
}

// SetOs sets the "os" field.
func (uc *UpdateCreate) SetOs(s string) *UpdateCreate {
	uc.mutation.SetOs(s)
	return uc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableOs(s *string) *UpdateCreate {
	if s != nil {
		uc.SetOs(*s)
	}
	return uc
}

// SetArch sets the "arch" field.
func (uc *UpdateCreate) SetArch(s string) *UpdateCreate {
	uc.mutation.SetArch(s)
	return uc
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableArch(s *string) *UpdateCreate {
	if s != nil {
		uc.SetArch(*s)
	}
	return uc
}

// SetVersion sets the "version" field.
func (uc *UpdateCreate) SetVersion(s string) *UpdateCreate {
	uc.mutation.SetVersion(s)
	return uc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableVersion(s *string) *UpdateCreate {
	if s != nil {
		uc.SetVersion(*s)
	}
	return uc
}

// SetRid sets the "rid" field.
func (uc *UpdateCreate) SetRid(s string) *UpdateCreate {
	uc.mutation.SetRid(s)
	return uc
}

// SetNillableRid sets the "rid" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableRid(s *string) *UpdateCreate {
	if s != nil {
		uc.SetRid(*s)
	}
	return uc
}

// SetCrc32 sets the "crc32" field.
func (uc *UpdateCreate) SetCrc32(s string) *UpdateCreate {
	uc.mutation.SetCrc32(s)
	return uc
}

// SetNillableCrc32 sets the "crc32" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableCrc32(s *string) *UpdateCreate {
	if s != nil {
		uc.SetCrc32(*s)
	}
	return uc
}

// SetAttr sets the "attr" field.
func (uc *UpdateCreate) SetAttr(s string) *UpdateCreate {
	uc.mutation.SetAttr(s)
	return uc
}

// SetNillableAttr sets the "attr" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableAttr(s *string) *UpdateCreate {
	if s != nil {
		uc.SetAttr(*s)
	}
	return uc
}

// SetForcibly sets the "forcibly" field.
func (uc *UpdateCreate) SetForcibly(b bool) *UpdateCreate {
	uc.mutation.SetForcibly(b)
	return uc
}

// SetNillableForcibly sets the "forcibly" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableForcibly(b *bool) *UpdateCreate {
	if b != nil {
		uc.SetForcibly(*b)
	}
	return uc
}

// SetTruncate sets the "truncate" field.
func (uc *UpdateCreate) SetTruncate(b bool) *UpdateCreate {
	uc.mutation.SetTruncate(b)
	return uc
}

// SetNillableTruncate sets the "truncate" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableTruncate(b *bool) *UpdateCreate {
	if b != nil {
		uc.SetTruncate(*b)
	}
	return uc
}

// SetTitle sets the "title" field.
func (uc *UpdateCreate) SetTitle(s string) *UpdateCreate {
	uc.mutation.SetTitle(s)
	return uc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableTitle(s *string) *UpdateCreate {
	if s != nil {
		uc.SetTitle(*s)
	}
	return uc
}

// SetDetail sets the "detail" field.
func (uc *UpdateCreate) SetDetail(s string) *UpdateCreate {
	uc.mutation.SetDetail(s)
	return uc
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableDetail(s *string) *UpdateCreate {
	if s != nil {
		uc.SetDetail(*s)
	}
	return uc
}

// SetSign sets the "sign" field.
func (uc *UpdateCreate) SetSign(s string) *UpdateCreate {
	uc.mutation.SetSign(s)
	return uc
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableSign(s *string) *UpdateCreate {
	if s != nil {
		uc.SetSign(*s)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UpdateCreate) SetID(u uuid.UUID) *UpdateCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableID(u *uuid.UUID) *UpdateCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// Mutation returns the UpdateMutation object of the builder.
func (uc *UpdateCreate) Mutation() *UpdateMutation {
	return uc.mutation
}

// Save creates the Update in the database.
func (uc *UpdateCreate) Save(ctx context.Context) (*Update, error) {
	var (
		err  error
		node *Update
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UpdateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("upgrade: uninitialized hook (forgotten import upgrade/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Update)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UpdateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UpdateCreate) SaveX(ctx context.Context) *Update {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UpdateCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UpdateCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UpdateCreate) defaults() {
	if _, ok := uc.mutation.CreatedUnix(); !ok {
		v := update.DefaultCreatedUnix
		uc.mutation.SetCreatedUnix(v)
	}
	if _, ok := uc.mutation.UpdatedUnix(); !ok {
		v := update.DefaultUpdatedUnix
		uc.mutation.SetUpdatedUnix(v)
	}
	if _, ok := uc.mutation.Os(); !ok {
		v := update.DefaultOs
		uc.mutation.SetOs(v)
	}
	if _, ok := uc.mutation.Arch(); !ok {
		v := update.DefaultArch
		uc.mutation.SetArch(v)
	}
	if _, ok := uc.mutation.Version(); !ok {
		v := update.DefaultVersion
		uc.mutation.SetVersion(v)
	}
	if _, ok := uc.mutation.Rid(); !ok {
		v := update.DefaultRid
		uc.mutation.SetRid(v)
	}
	if _, ok := uc.mutation.Crc32(); !ok {
		v := update.DefaultCrc32
		uc.mutation.SetCrc32(v)
	}
	if _, ok := uc.mutation.Attr(); !ok {
		v := update.DefaultAttr
		uc.mutation.SetAttr(v)
	}
	if _, ok := uc.mutation.Forcibly(); !ok {
		v := update.DefaultForcibly
		uc.mutation.SetForcibly(v)
	}
	if _, ok := uc.mutation.Truncate(); !ok {
		v := update.DefaultTruncate
		uc.mutation.SetTruncate(v)
	}
	if _, ok := uc.mutation.Title(); !ok {
		v := update.DefaultTitle
		uc.mutation.SetTitle(v)
	}
	if _, ok := uc.mutation.Detail(); !ok {
		v := update.DefaultDetail
		uc.mutation.SetDetail(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := update.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UpdateCreate) check() error {
	if _, ok := uc.mutation.CreatedUnix(); !ok {
		return &ValidationError{Name: "created_unix", err: errors.New(`upgrade: missing required field "Update.created_unix"`)}
	}
	if _, ok := uc.mutation.UpdatedUnix(); !ok {
		return &ValidationError{Name: "updated_unix", err: errors.New(`upgrade: missing required field "Update.updated_unix"`)}
	}
	if _, ok := uc.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`upgrade: missing required field "Update.os"`)}
	}
	if _, ok := uc.mutation.Arch(); !ok {
		return &ValidationError{Name: "arch", err: errors.New(`upgrade: missing required field "Update.arch"`)}
	}
	if _, ok := uc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`upgrade: missing required field "Update.version"`)}
	}
	if _, ok := uc.mutation.Rid(); !ok {
		return &ValidationError{Name: "rid", err: errors.New(`upgrade: missing required field "Update.rid"`)}
	}
	if _, ok := uc.mutation.Crc32(); !ok {
		return &ValidationError{Name: "crc32", err: errors.New(`upgrade: missing required field "Update.crc32"`)}
	}
	if _, ok := uc.mutation.Attr(); !ok {
		return &ValidationError{Name: "attr", err: errors.New(`upgrade: missing required field "Update.attr"`)}
	}
	if _, ok := uc.mutation.Forcibly(); !ok {
		return &ValidationError{Name: "forcibly", err: errors.New(`upgrade: missing required field "Update.forcibly"`)}
	}
	if _, ok := uc.mutation.Truncate(); !ok {
		return &ValidationError{Name: "truncate", err: errors.New(`upgrade: missing required field "Update.truncate"`)}
	}
	if _, ok := uc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`upgrade: missing required field "Update.title"`)}
	}
	if _, ok := uc.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New(`upgrade: missing required field "Update.detail"`)}
	}
	return nil
}

func (uc *UpdateCreate) sqlSave(ctx context.Context) (*Update, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (uc *UpdateCreate) createSpec() (*Update, *sqlgraph.CreateSpec) {
	var (
		_node = &Update{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: update.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: update.FieldID,
			},
		}
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.CreatedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: update.FieldCreatedUnix,
		})
		_node.CreatedUnix = value
	}
	if value, ok := uc.mutation.UpdatedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: update.FieldUpdatedUnix,
		})
		_node.UpdatedUnix = value
	}
	if value, ok := uc.mutation.DeletedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: update.FieldDeletedUnix,
		})
		_node.DeletedUnix = value
	}
	if value, ok := uc.mutation.Os(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldOs,
		})
		_node.Os = value
	}
	if value, ok := uc.mutation.Arch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldArch,
		})
		_node.Arch = value
	}
	if value, ok := uc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := uc.mutation.Rid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldRid,
		})
		_node.Rid = value
	}
	if value, ok := uc.mutation.Crc32(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldCrc32,
		})
		_node.Crc32 = value
	}
	if value, ok := uc.mutation.Attr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldAttr,
		})
		_node.Attr = value
	}
	if value, ok := uc.mutation.Forcibly(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: update.FieldForcibly,
		})
		_node.Forcibly = value
	}
	if value, ok := uc.mutation.Truncate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: update.FieldTruncate,
		})
		_node.Truncate = value
	}
	if value, ok := uc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := uc.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := uc.mutation.Sign(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: update.FieldSign,
		})
		_node.Sign = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Update.Create().
//		SetCreatedUnix(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpdateUpsert) {
//			SetCreatedUnix(v+v).
//		}).
//		Exec(ctx)
func (uc *UpdateCreate) OnConflict(opts ...sql.ConflictOption) *UpdateUpsertOne {
	uc.conflict = opts
	return &UpdateUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UpdateCreate) OnConflictColumns(columns ...string) *UpdateUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UpdateUpsertOne{
		create: uc,
	}
}

type (
	// UpdateUpsertOne is the builder for "upsert"-ing
	//  one Update node.
	UpdateUpsertOne struct {
		create *UpdateCreate
	}

	// UpdateUpsert is the "OnConflict" setter.
	UpdateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedUnix sets the "created_unix" field.
func (u *UpdateUpsert) SetCreatedUnix(v int64) *UpdateUpsert {
	u.Set(update.FieldCreatedUnix, v)
	return u
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateCreatedUnix() *UpdateUpsert {
	u.SetExcluded(update.FieldCreatedUnix)
	return u
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *UpdateUpsert) AddCreatedUnix(v int64) *UpdateUpsert {
	u.Add(update.FieldCreatedUnix, v)
	return u
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *UpdateUpsert) SetUpdatedUnix(v int64) *UpdateUpsert {
	u.Set(update.FieldUpdatedUnix, v)
	return u
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateUpdatedUnix() *UpdateUpsert {
	u.SetExcluded(update.FieldUpdatedUnix)
	return u
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *UpdateUpsert) AddUpdatedUnix(v int64) *UpdateUpsert {
	u.Add(update.FieldUpdatedUnix, v)
	return u
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *UpdateUpsert) SetDeletedUnix(v int64) *UpdateUpsert {
	u.Set(update.FieldDeletedUnix, v)
	return u
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateDeletedUnix() *UpdateUpsert {
	u.SetExcluded(update.FieldDeletedUnix)
	return u
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *UpdateUpsert) AddDeletedUnix(v int64) *UpdateUpsert {
	u.Add(update.FieldDeletedUnix, v)
	return u
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *UpdateUpsert) ClearDeletedUnix() *UpdateUpsert {
	u.SetNull(update.FieldDeletedUnix)
	return u
}

// SetOs sets the "os" field.
func (u *UpdateUpsert) SetOs(v string) *UpdateUpsert {
	u.Set(update.FieldOs, v)
	return u
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateOs() *UpdateUpsert {
	u.SetExcluded(update.FieldOs)
	return u
}

// SetArch sets the "arch" field.
func (u *UpdateUpsert) SetArch(v string) *UpdateUpsert {
	u.Set(update.FieldArch, v)
	return u
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateArch() *UpdateUpsert {
	u.SetExcluded(update.FieldArch)
	return u
}

// SetVersion sets the "version" field.
func (u *UpdateUpsert) SetVersion(v string) *UpdateUpsert {
	u.Set(update.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateVersion() *UpdateUpsert {
	u.SetExcluded(update.FieldVersion)
	return u
}

// SetRid sets the "rid" field.
func (u *UpdateUpsert) SetRid(v string) *UpdateUpsert {
	u.Set(update.FieldRid, v)
	return u
}

// UpdateRid sets the "rid" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateRid() *UpdateUpsert {
	u.SetExcluded(update.FieldRid)
	return u
}

// SetCrc32 sets the "crc32" field.
func (u *UpdateUpsert) SetCrc32(v string) *UpdateUpsert {
	u.Set(update.FieldCrc32, v)
	return u
}

// UpdateCrc32 sets the "crc32" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateCrc32() *UpdateUpsert {
	u.SetExcluded(update.FieldCrc32)
	return u
}

// SetAttr sets the "attr" field.
func (u *UpdateUpsert) SetAttr(v string) *UpdateUpsert {
	u.Set(update.FieldAttr, v)
	return u
}

// UpdateAttr sets the "attr" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateAttr() *UpdateUpsert {
	u.SetExcluded(update.FieldAttr)
	return u
}

// SetForcibly sets the "forcibly" field.
func (u *UpdateUpsert) SetForcibly(v bool) *UpdateUpsert {
	u.Set(update.FieldForcibly, v)
	return u
}

// UpdateForcibly sets the "forcibly" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateForcibly() *UpdateUpsert {
	u.SetExcluded(update.FieldForcibly)
	return u
}

// SetTruncate sets the "truncate" field.
func (u *UpdateUpsert) SetTruncate(v bool) *UpdateUpsert {
	u.Set(update.FieldTruncate, v)
	return u
}

// UpdateTruncate sets the "truncate" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateTruncate() *UpdateUpsert {
	u.SetExcluded(update.FieldTruncate)
	return u
}

// SetTitle sets the "title" field.
func (u *UpdateUpsert) SetTitle(v string) *UpdateUpsert {
	u.Set(update.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateTitle() *UpdateUpsert {
	u.SetExcluded(update.FieldTitle)
	return u
}

// SetDetail sets the "detail" field.
func (u *UpdateUpsert) SetDetail(v string) *UpdateUpsert {
	u.Set(update.FieldDetail, v)
	return u
}

// UpdateDetail sets the "detail" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateDetail() *UpdateUpsert {
	u.SetExcluded(update.FieldDetail)
	return u
}

// SetSign sets the "sign" field.
func (u *UpdateUpsert) SetSign(v string) *UpdateUpsert {
	u.Set(update.FieldSign, v)
	return u
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateSign() *UpdateUpsert {
	u.SetExcluded(update.FieldSign)
	return u
}

// ClearSign clears the value of the "sign" field.
func (u *UpdateUpsert) ClearSign() *UpdateUpsert {
	u.SetNull(update.FieldSign)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(update.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpdateUpsertOne) UpdateNewValues() *UpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(update.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Update.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpdateUpsertOne) Ignore() *UpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpdateUpsertOne) DoNothing() *UpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpdateCreate.OnConflict
// documentation for more info.
func (u *UpdateUpsertOne) Update(set func(*UpdateUpsert)) *UpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpdateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedUnix sets the "created_unix" field.
func (u *UpdateUpsertOne) SetCreatedUnix(v int64) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetCreatedUnix(v)
	})
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *UpdateUpsertOne) AddCreatedUnix(v int64) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.AddCreatedUnix(v)
	})
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateCreatedUnix() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateCreatedUnix()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *UpdateUpsertOne) SetUpdatedUnix(v int64) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *UpdateUpsertOne) AddUpdatedUnix(v int64) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateUpdatedUnix() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateUpdatedUnix()
	})
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *UpdateUpsertOne) SetDeletedUnix(v int64) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetDeletedUnix(v)
	})
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *UpdateUpsertOne) AddDeletedUnix(v int64) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.AddDeletedUnix(v)
	})
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateDeletedUnix() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateDeletedUnix()
	})
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *UpdateUpsertOne) ClearDeletedUnix() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.ClearDeletedUnix()
	})
}

// SetOs sets the "os" field.
func (u *UpdateUpsertOne) SetOs(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateOs() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateOs()
	})
}

// SetArch sets the "arch" field.
func (u *UpdateUpsertOne) SetArch(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetArch(v)
	})
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateArch() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateArch()
	})
}

// SetVersion sets the "version" field.
func (u *UpdateUpsertOne) SetVersion(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateVersion() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateVersion()
	})
}

// SetRid sets the "rid" field.
func (u *UpdateUpsertOne) SetRid(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetRid(v)
	})
}

// UpdateRid sets the "rid" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateRid() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateRid()
	})
}

// SetCrc32 sets the "crc32" field.
func (u *UpdateUpsertOne) SetCrc32(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetCrc32(v)
	})
}

// UpdateCrc32 sets the "crc32" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateCrc32() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateCrc32()
	})
}

// SetAttr sets the "attr" field.
func (u *UpdateUpsertOne) SetAttr(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetAttr(v)
	})
}

// UpdateAttr sets the "attr" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateAttr() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateAttr()
	})
}

// SetForcibly sets the "forcibly" field.
func (u *UpdateUpsertOne) SetForcibly(v bool) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetForcibly(v)
	})
}

// UpdateForcibly sets the "forcibly" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateForcibly() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateForcibly()
	})
}

// SetTruncate sets the "truncate" field.
func (u *UpdateUpsertOne) SetTruncate(v bool) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetTruncate(v)
	})
}

// UpdateTruncate sets the "truncate" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateTruncate() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateTruncate()
	})
}

// SetTitle sets the "title" field.
func (u *UpdateUpsertOne) SetTitle(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateTitle() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateTitle()
	})
}

// SetDetail sets the "detail" field.
func (u *UpdateUpsertOne) SetDetail(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetDetail(v)
	})
}

// UpdateDetail sets the "detail" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateDetail() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateDetail()
	})
}

// SetSign sets the "sign" field.
func (u *UpdateUpsertOne) SetSign(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetSign(v)
	})
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateSign() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateSign()
	})
}

// ClearSign clears the value of the "sign" field.
func (u *UpdateUpsertOne) ClearSign() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.ClearSign()
	})
}

// Exec executes the query.
func (u *UpdateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("upgrade: missing options for UpdateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpdateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpdateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("upgrade: UpdateUpsertOne.ID is not supported by MySQL driver. Use UpdateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpdateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpdateCreateBulk is the builder for creating many Update entities in bulk.
type UpdateCreateBulk struct {
	config
	builders []*UpdateCreate
	conflict []sql.ConflictOption
}

// Save creates the Update entities in the database.
func (ucb *UpdateCreateBulk) Save(ctx context.Context) ([]*Update, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Update, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpdateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UpdateCreateBulk) SaveX(ctx context.Context) []*Update {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UpdateCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UpdateCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Update.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpdateUpsert) {
//			SetCreatedUnix(v+v).
//		}).
//		Exec(ctx)
func (ucb *UpdateCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpdateUpsertBulk {
	ucb.conflict = opts
	return &UpdateUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UpdateCreateBulk) OnConflictColumns(columns ...string) *UpdateUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UpdateUpsertBulk{
		create: ucb,
	}
}

// UpdateUpsertBulk is the builder for "upsert"-ing
// a bulk of Update nodes.
type UpdateUpsertBulk struct {
	create *UpdateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(update.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpdateUpsertBulk) UpdateNewValues() *UpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(update.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpdateUpsertBulk) Ignore() *UpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpdateUpsertBulk) DoNothing() *UpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpdateCreateBulk.OnConflict
// documentation for more info.
func (u *UpdateUpsertBulk) Update(set func(*UpdateUpsert)) *UpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpdateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedUnix sets the "created_unix" field.
func (u *UpdateUpsertBulk) SetCreatedUnix(v int64) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetCreatedUnix(v)
	})
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *UpdateUpsertBulk) AddCreatedUnix(v int64) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.AddCreatedUnix(v)
	})
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateCreatedUnix() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateCreatedUnix()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *UpdateUpsertBulk) SetUpdatedUnix(v int64) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *UpdateUpsertBulk) AddUpdatedUnix(v int64) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateUpdatedUnix() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateUpdatedUnix()
	})
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *UpdateUpsertBulk) SetDeletedUnix(v int64) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetDeletedUnix(v)
	})
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *UpdateUpsertBulk) AddDeletedUnix(v int64) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.AddDeletedUnix(v)
	})
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateDeletedUnix() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateDeletedUnix()
	})
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *UpdateUpsertBulk) ClearDeletedUnix() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.ClearDeletedUnix()
	})
}

// SetOs sets the "os" field.
func (u *UpdateUpsertBulk) SetOs(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateOs() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateOs()
	})
}

// SetArch sets the "arch" field.
func (u *UpdateUpsertBulk) SetArch(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetArch(v)
	})
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateArch() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateArch()
	})
}

// SetVersion sets the "version" field.
func (u *UpdateUpsertBulk) SetVersion(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateVersion() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateVersion()
	})
}

// SetRid sets the "rid" field.
func (u *UpdateUpsertBulk) SetRid(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetRid(v)
	})
}

// UpdateRid sets the "rid" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateRid() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateRid()
	})
}

// SetCrc32 sets the "crc32" field.
func (u *UpdateUpsertBulk) SetCrc32(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetCrc32(v)
	})
}

// UpdateCrc32 sets the "crc32" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateCrc32() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateCrc32()
	})
}

// SetAttr sets the "attr" field.
func (u *UpdateUpsertBulk) SetAttr(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetAttr(v)
	})
}

// UpdateAttr sets the "attr" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateAttr() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateAttr()
	})
}

// SetForcibly sets the "forcibly" field.
func (u *UpdateUpsertBulk) SetForcibly(v bool) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetForcibly(v)
	})
}

// UpdateForcibly sets the "forcibly" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateForcibly() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateForcibly()
	})
}

// SetTruncate sets the "truncate" field.
func (u *UpdateUpsertBulk) SetTruncate(v bool) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetTruncate(v)
	})
}

// UpdateTruncate sets the "truncate" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateTruncate() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateTruncate()
	})
}

// SetTitle sets the "title" field.
func (u *UpdateUpsertBulk) SetTitle(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateTitle() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateTitle()
	})
}

// SetDetail sets the "detail" field.
func (u *UpdateUpsertBulk) SetDetail(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetDetail(v)
	})
}

// UpdateDetail sets the "detail" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateDetail() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateDetail()
	})
}

// SetSign sets the "sign" field.
func (u *UpdateUpsertBulk) SetSign(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetSign(v)
	})
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateSign() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateSign()
	})
}

// ClearSign clears the value of the "sign" field.
func (u *UpdateUpsertBulk) ClearSign() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.ClearSign()
	})
}

// Exec executes the query.
func (u *UpdateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("upgrade: OnConflict was set for builder %d. Set it on the UpdateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("upgrade: missing options for UpdateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpdateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
