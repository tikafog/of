// Code generated by ent, DO NOT EDIT.

package upgrade

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/upgrade/update"
)

// Update is the model entity for the Update schema.
type Update struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedUnix holds the value of the "created_unix" field.
	CreatedUnix int64 `json:"created_unix,omitempty"`
	// UpdatedUnix holds the value of the "updated_unix" field.
	UpdatedUnix int64 `json:"updated_unix,omitempty"`
	// DeletedUnix holds the value of the "deleted_unix" field.
	DeletedUnix int64 `json:"deleted_unix,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Arch holds the value of the "arch" field.
	Arch string `json:"arch,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Rid holds the value of the "rid" field.
	Rid string `json:"rid,omitempty"`
	// Crc32 holds the value of the "crc32" field.
	Crc32 string `json:"crc32,omitempty"`
	// Attr holds the value of the "attr" field.
	Attr string `json:"attr,omitempty"`
	// Forcibly holds the value of the "forcibly" field.
	Forcibly bool `json:"forcibly,omitempty"`
	// Truncate holds the value of the "truncate" field.
	Truncate bool `json:"truncate,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// Sign holds the value of the "sign" field.
	Sign string `json:"sign,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Update) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case update.FieldForcibly, update.FieldTruncate:
			values[i] = new(sql.NullBool)
		case update.FieldCreatedUnix, update.FieldUpdatedUnix, update.FieldDeletedUnix:
			values[i] = new(sql.NullInt64)
		case update.FieldOs, update.FieldArch, update.FieldVersion, update.FieldRid, update.FieldCrc32, update.FieldAttr, update.FieldTitle, update.FieldDetail, update.FieldSign:
			values[i] = new(sql.NullString)
		case update.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Update", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Update fields.
func (u *Update) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case update.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case update.FieldCreatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_unix", values[i])
			} else if value.Valid {
				u.CreatedUnix = value.Int64
			}
		case update.FieldUpdatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_unix", values[i])
			} else if value.Valid {
				u.UpdatedUnix = value.Int64
			}
		case update.FieldDeletedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_unix", values[i])
			} else if value.Valid {
				u.DeletedUnix = value.Int64
			}
		case update.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				u.Os = value.String
			}
		case update.FieldArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value.Valid {
				u.Arch = value.String
			}
		case update.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				u.Version = value.String
			}
		case update.FieldRid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rid", values[i])
			} else if value.Valid {
				u.Rid = value.String
			}
		case update.FieldCrc32:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crc32", values[i])
			} else if value.Valid {
				u.Crc32 = value.String
			}
		case update.FieldAttr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attr", values[i])
			} else if value.Valid {
				u.Attr = value.String
			}
		case update.FieldForcibly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field forcibly", values[i])
			} else if value.Valid {
				u.Forcibly = value.Bool
			}
		case update.FieldTruncate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field truncate", values[i])
			} else if value.Valid {
				u.Truncate = value.Bool
			}
		case update.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				u.Title = value.String
			}
		case update.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				u.Detail = value.String
			}
		case update.FieldSign:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sign", values[i])
			} else if value.Valid {
				u.Sign = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Update.
// Note that you need to call Update.Unwrap() before calling this method if this Update
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Update) Update() *UpdateUpdateOne {
	return (&UpdateClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the Update entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Update) Unwrap() *Update {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("upgrade: Update is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Update) String() string {
	var builder strings.Builder
	builder.WriteString("Update(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_unix=")
	builder.WriteString(fmt.Sprintf("%v", u.CreatedUnix))
	builder.WriteString(", ")
	builder.WriteString("updated_unix=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdatedUnix))
	builder.WriteString(", ")
	builder.WriteString("deleted_unix=")
	builder.WriteString(fmt.Sprintf("%v", u.DeletedUnix))
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(u.Os)
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(u.Arch)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(u.Version)
	builder.WriteString(", ")
	builder.WriteString("rid=")
	builder.WriteString(u.Rid)
	builder.WriteString(", ")
	builder.WriteString("crc32=")
	builder.WriteString(u.Crc32)
	builder.WriteString(", ")
	builder.WriteString("attr=")
	builder.WriteString(u.Attr)
	builder.WriteString(", ")
	builder.WriteString("forcibly=")
	builder.WriteString(fmt.Sprintf("%v", u.Forcibly))
	builder.WriteString(", ")
	builder.WriteString("truncate=")
	builder.WriteString(fmt.Sprintf("%v", u.Truncate))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(u.Title)
	builder.WriteString(", ")
	builder.WriteString("detail=")
	builder.WriteString(u.Detail)
	builder.WriteString(", ")
	builder.WriteString("sign=")
	builder.WriteString(u.Sign)
	builder.WriteByte(')')
	return builder.String()
}

// Updates is a parsable slice of Update.
type Updates []*Update

func (u Updates) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
