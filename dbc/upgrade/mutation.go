// Code generated by ent, DO NOT EDIT.

package upgrade

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/upgrade/predicate"
	"github.com/tikafog/of/dbc/upgrade/update"
	"github.com/tikafog/of/dbc/upgrade/version"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUpdate  = "Update"
	TypeVersion = "Version"
)

// UpdateMutation represents an operation that mutates the Update nodes in the graph.
type UpdateMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_unix    *int64
	addcreated_unix *int64
	updated_unix    *int64
	addupdated_unix *int64
	deleted_unix    *int64
	adddeleted_unix *int64
	os              *string
	arch            *string
	version         *string
	rid             *string
	crc32           *string
	attr            *string
	forcibly        *bool
	truncate        *bool
	title           *string
	detail          *string
	sign            *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Update, error)
	predicates      []predicate.Update
}

var _ ent.Mutation = (*UpdateMutation)(nil)

// updateOption allows management of the mutation configuration using functional options.
type updateOption func(*UpdateMutation)

// newUpdateMutation creates new mutation for the Update entity.
func newUpdateMutation(c config, op Op, opts ...updateOption) *UpdateMutation {
	m := &UpdateMutation{
		config:        c,
		op:            op,
		typ:           TypeUpdate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUpdateID sets the ID field of the mutation.
func withUpdateID(id uuid.UUID) updateOption {
	return func(m *UpdateMutation) {
		var (
			err   error
			once  sync.Once
			value *Update
		)
		m.oldValue = func(ctx context.Context) (*Update, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Update.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUpdate sets the old Update of the mutation.
func withUpdate(node *Update) updateOption {
	return func(m *UpdateMutation) {
		m.oldValue = func(context.Context) (*Update, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UpdateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UpdateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("upgrade: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Update entities.
func (m *UpdateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UpdateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UpdateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Update.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedUnix sets the "created_unix" field.
func (m *UpdateMutation) SetCreatedUnix(i int64) {
	m.created_unix = &i
	m.addcreated_unix = nil
}

// CreatedUnix returns the value of the "created_unix" field in the mutation.
func (m *UpdateMutation) CreatedUnix() (r int64, exists bool) {
	v := m.created_unix
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedUnix returns the old "created_unix" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldCreatedUnix(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedUnix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedUnix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedUnix: %w", err)
	}
	return oldValue.CreatedUnix, nil
}

// AddCreatedUnix adds i to the "created_unix" field.
func (m *UpdateMutation) AddCreatedUnix(i int64) {
	if m.addcreated_unix != nil {
		*m.addcreated_unix += i
	} else {
		m.addcreated_unix = &i
	}
}

// AddedCreatedUnix returns the value that was added to the "created_unix" field in this mutation.
func (m *UpdateMutation) AddedCreatedUnix() (r int64, exists bool) {
	v := m.addcreated_unix
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedUnix resets all changes to the "created_unix" field.
func (m *UpdateMutation) ResetCreatedUnix() {
	m.created_unix = nil
	m.addcreated_unix = nil
}

// SetUpdatedUnix sets the "updated_unix" field.
func (m *UpdateMutation) SetUpdatedUnix(i int64) {
	m.updated_unix = &i
	m.addupdated_unix = nil
}

// UpdatedUnix returns the value of the "updated_unix" field in the mutation.
func (m *UpdateMutation) UpdatedUnix() (r int64, exists bool) {
	v := m.updated_unix
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedUnix returns the old "updated_unix" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldUpdatedUnix(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedUnix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedUnix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedUnix: %w", err)
	}
	return oldValue.UpdatedUnix, nil
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (m *UpdateMutation) AddUpdatedUnix(i int64) {
	if m.addupdated_unix != nil {
		*m.addupdated_unix += i
	} else {
		m.addupdated_unix = &i
	}
}

// AddedUpdatedUnix returns the value that was added to the "updated_unix" field in this mutation.
func (m *UpdateMutation) AddedUpdatedUnix() (r int64, exists bool) {
	v := m.addupdated_unix
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedUnix resets all changes to the "updated_unix" field.
func (m *UpdateMutation) ResetUpdatedUnix() {
	m.updated_unix = nil
	m.addupdated_unix = nil
}

// SetDeletedUnix sets the "deleted_unix" field.
func (m *UpdateMutation) SetDeletedUnix(i int64) {
	m.deleted_unix = &i
	m.adddeleted_unix = nil
}

// DeletedUnix returns the value of the "deleted_unix" field in the mutation.
func (m *UpdateMutation) DeletedUnix() (r int64, exists bool) {
	v := m.deleted_unix
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedUnix returns the old "deleted_unix" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldDeletedUnix(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedUnix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedUnix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedUnix: %w", err)
	}
	return oldValue.DeletedUnix, nil
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (m *UpdateMutation) AddDeletedUnix(i int64) {
	if m.adddeleted_unix != nil {
		*m.adddeleted_unix += i
	} else {
		m.adddeleted_unix = &i
	}
}

// AddedDeletedUnix returns the value that was added to the "deleted_unix" field in this mutation.
func (m *UpdateMutation) AddedDeletedUnix() (r int64, exists bool) {
	v := m.adddeleted_unix
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (m *UpdateMutation) ClearDeletedUnix() {
	m.deleted_unix = nil
	m.adddeleted_unix = nil
	m.clearedFields[update.FieldDeletedUnix] = struct{}{}
}

// DeletedUnixCleared returns if the "deleted_unix" field was cleared in this mutation.
func (m *UpdateMutation) DeletedUnixCleared() bool {
	_, ok := m.clearedFields[update.FieldDeletedUnix]
	return ok
}

// ResetDeletedUnix resets all changes to the "deleted_unix" field.
func (m *UpdateMutation) ResetDeletedUnix() {
	m.deleted_unix = nil
	m.adddeleted_unix = nil
	delete(m.clearedFields, update.FieldDeletedUnix)
}

// SetOs sets the "os" field.
func (m *UpdateMutation) SetOs(s string) {
	m.os = &s
}

// Os returns the value of the "os" field in the mutation.
func (m *UpdateMutation) Os() (r string, exists bool) {
	v := m.os
	if v == nil {
		return
	}
	return *v, true
}

// OldOs returns the old "os" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOs: %w", err)
	}
	return oldValue.Os, nil
}

// ResetOs resets all changes to the "os" field.
func (m *UpdateMutation) ResetOs() {
	m.os = nil
}

// SetArch sets the "arch" field.
func (m *UpdateMutation) SetArch(s string) {
	m.arch = &s
}

// Arch returns the value of the "arch" field in the mutation.
func (m *UpdateMutation) Arch() (r string, exists bool) {
	v := m.arch
	if v == nil {
		return
	}
	return *v, true
}

// OldArch returns the old "arch" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldArch(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArch: %w", err)
	}
	return oldValue.Arch, nil
}

// ResetArch resets all changes to the "arch" field.
func (m *UpdateMutation) ResetArch() {
	m.arch = nil
}

// SetVersion sets the "version" field.
func (m *UpdateMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *UpdateMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *UpdateMutation) ResetVersion() {
	m.version = nil
}

// SetRid sets the "rid" field.
func (m *UpdateMutation) SetRid(s string) {
	m.rid = &s
}

// Rid returns the value of the "rid" field in the mutation.
func (m *UpdateMutation) Rid() (r string, exists bool) {
	v := m.rid
	if v == nil {
		return
	}
	return *v, true
}

// OldRid returns the old "rid" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldRid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRid: %w", err)
	}
	return oldValue.Rid, nil
}

// ResetRid resets all changes to the "rid" field.
func (m *UpdateMutation) ResetRid() {
	m.rid = nil
}

// SetCrc32 sets the "crc32" field.
func (m *UpdateMutation) SetCrc32(s string) {
	m.crc32 = &s
}

// Crc32 returns the value of the "crc32" field in the mutation.
func (m *UpdateMutation) Crc32() (r string, exists bool) {
	v := m.crc32
	if v == nil {
		return
	}
	return *v, true
}

// OldCrc32 returns the old "crc32" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldCrc32(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrc32 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrc32 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrc32: %w", err)
	}
	return oldValue.Crc32, nil
}

// ResetCrc32 resets all changes to the "crc32" field.
func (m *UpdateMutation) ResetCrc32() {
	m.crc32 = nil
}

// SetAttr sets the "attr" field.
func (m *UpdateMutation) SetAttr(s string) {
	m.attr = &s
}

// Attr returns the value of the "attr" field in the mutation.
func (m *UpdateMutation) Attr() (r string, exists bool) {
	v := m.attr
	if v == nil {
		return
	}
	return *v, true
}

// OldAttr returns the old "attr" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldAttr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttr: %w", err)
	}
	return oldValue.Attr, nil
}

// ResetAttr resets all changes to the "attr" field.
func (m *UpdateMutation) ResetAttr() {
	m.attr = nil
}

// SetForcibly sets the "forcibly" field.
func (m *UpdateMutation) SetForcibly(b bool) {
	m.forcibly = &b
}

// Forcibly returns the value of the "forcibly" field in the mutation.
func (m *UpdateMutation) Forcibly() (r bool, exists bool) {
	v := m.forcibly
	if v == nil {
		return
	}
	return *v, true
}

// OldForcibly returns the old "forcibly" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldForcibly(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForcibly is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForcibly requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForcibly: %w", err)
	}
	return oldValue.Forcibly, nil
}

// ResetForcibly resets all changes to the "forcibly" field.
func (m *UpdateMutation) ResetForcibly() {
	m.forcibly = nil
}

// SetTruncate sets the "truncate" field.
func (m *UpdateMutation) SetTruncate(b bool) {
	m.truncate = &b
}

// Truncate returns the value of the "truncate" field in the mutation.
func (m *UpdateMutation) Truncate() (r bool, exists bool) {
	v := m.truncate
	if v == nil {
		return
	}
	return *v, true
}

// OldTruncate returns the old "truncate" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldTruncate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTruncate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTruncate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTruncate: %w", err)
	}
	return oldValue.Truncate, nil
}

// ResetTruncate resets all changes to the "truncate" field.
func (m *UpdateMutation) ResetTruncate() {
	m.truncate = nil
}

// SetTitle sets the "title" field.
func (m *UpdateMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *UpdateMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *UpdateMutation) ResetTitle() {
	m.title = nil
}

// SetDetail sets the "detail" field.
func (m *UpdateMutation) SetDetail(s string) {
	m.detail = &s
}

// Detail returns the value of the "detail" field in the mutation.
func (m *UpdateMutation) Detail() (r string, exists bool) {
	v := m.detail
	if v == nil {
		return
	}
	return *v, true
}

// OldDetail returns the old "detail" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldDetail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetail: %w", err)
	}
	return oldValue.Detail, nil
}

// ResetDetail resets all changes to the "detail" field.
func (m *UpdateMutation) ResetDetail() {
	m.detail = nil
}

// SetSign sets the "sign" field.
func (m *UpdateMutation) SetSign(s string) {
	m.sign = &s
}

// Sign returns the value of the "sign" field in the mutation.
func (m *UpdateMutation) Sign() (r string, exists bool) {
	v := m.sign
	if v == nil {
		return
	}
	return *v, true
}

// OldSign returns the old "sign" field's value of the Update entity.
// If the Update object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UpdateMutation) OldSign(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSign is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSign requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSign: %w", err)
	}
	return oldValue.Sign, nil
}

// ClearSign clears the value of the "sign" field.
func (m *UpdateMutation) ClearSign() {
	m.sign = nil
	m.clearedFields[update.FieldSign] = struct{}{}
}

// SignCleared returns if the "sign" field was cleared in this mutation.
func (m *UpdateMutation) SignCleared() bool {
	_, ok := m.clearedFields[update.FieldSign]
	return ok
}

// ResetSign resets all changes to the "sign" field.
func (m *UpdateMutation) ResetSign() {
	m.sign = nil
	delete(m.clearedFields, update.FieldSign)
}

// Where appends a list predicates to the UpdateMutation builder.
func (m *UpdateMutation) Where(ps ...predicate.Update) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UpdateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Update).
func (m *UpdateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UpdateMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_unix != nil {
		fields = append(fields, update.FieldCreatedUnix)
	}
	if m.updated_unix != nil {
		fields = append(fields, update.FieldUpdatedUnix)
	}
	if m.deleted_unix != nil {
		fields = append(fields, update.FieldDeletedUnix)
	}
	if m.os != nil {
		fields = append(fields, update.FieldOs)
	}
	if m.arch != nil {
		fields = append(fields, update.FieldArch)
	}
	if m.version != nil {
		fields = append(fields, update.FieldVersion)
	}
	if m.rid != nil {
		fields = append(fields, update.FieldRid)
	}
	if m.crc32 != nil {
		fields = append(fields, update.FieldCrc32)
	}
	if m.attr != nil {
		fields = append(fields, update.FieldAttr)
	}
	if m.forcibly != nil {
		fields = append(fields, update.FieldForcibly)
	}
	if m.truncate != nil {
		fields = append(fields, update.FieldTruncate)
	}
	if m.title != nil {
		fields = append(fields, update.FieldTitle)
	}
	if m.detail != nil {
		fields = append(fields, update.FieldDetail)
	}
	if m.sign != nil {
		fields = append(fields, update.FieldSign)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UpdateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case update.FieldCreatedUnix:
		return m.CreatedUnix()
	case update.FieldUpdatedUnix:
		return m.UpdatedUnix()
	case update.FieldDeletedUnix:
		return m.DeletedUnix()
	case update.FieldOs:
		return m.Os()
	case update.FieldArch:
		return m.Arch()
	case update.FieldVersion:
		return m.Version()
	case update.FieldRid:
		return m.Rid()
	case update.FieldCrc32:
		return m.Crc32()
	case update.FieldAttr:
		return m.Attr()
	case update.FieldForcibly:
		return m.Forcibly()
	case update.FieldTruncate:
		return m.Truncate()
	case update.FieldTitle:
		return m.Title()
	case update.FieldDetail:
		return m.Detail()
	case update.FieldSign:
		return m.Sign()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UpdateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case update.FieldCreatedUnix:
		return m.OldCreatedUnix(ctx)
	case update.FieldUpdatedUnix:
		return m.OldUpdatedUnix(ctx)
	case update.FieldDeletedUnix:
		return m.OldDeletedUnix(ctx)
	case update.FieldOs:
		return m.OldOs(ctx)
	case update.FieldArch:
		return m.OldArch(ctx)
	case update.FieldVersion:
		return m.OldVersion(ctx)
	case update.FieldRid:
		return m.OldRid(ctx)
	case update.FieldCrc32:
		return m.OldCrc32(ctx)
	case update.FieldAttr:
		return m.OldAttr(ctx)
	case update.FieldForcibly:
		return m.OldForcibly(ctx)
	case update.FieldTruncate:
		return m.OldTruncate(ctx)
	case update.FieldTitle:
		return m.OldTitle(ctx)
	case update.FieldDetail:
		return m.OldDetail(ctx)
	case update.FieldSign:
		return m.OldSign(ctx)
	}
	return nil, fmt.Errorf("unknown Update field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UpdateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case update.FieldCreatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedUnix(v)
		return nil
	case update.FieldUpdatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedUnix(v)
		return nil
	case update.FieldDeletedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedUnix(v)
		return nil
	case update.FieldOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOs(v)
		return nil
	case update.FieldArch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArch(v)
		return nil
	case update.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case update.FieldRid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRid(v)
		return nil
	case update.FieldCrc32:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrc32(v)
		return nil
	case update.FieldAttr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttr(v)
		return nil
	case update.FieldForcibly:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForcibly(v)
		return nil
	case update.FieldTruncate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTruncate(v)
		return nil
	case update.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case update.FieldDetail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetail(v)
		return nil
	case update.FieldSign:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSign(v)
		return nil
	}
	return fmt.Errorf("unknown Update field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UpdateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_unix != nil {
		fields = append(fields, update.FieldCreatedUnix)
	}
	if m.addupdated_unix != nil {
		fields = append(fields, update.FieldUpdatedUnix)
	}
	if m.adddeleted_unix != nil {
		fields = append(fields, update.FieldDeletedUnix)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UpdateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case update.FieldCreatedUnix:
		return m.AddedCreatedUnix()
	case update.FieldUpdatedUnix:
		return m.AddedUpdatedUnix()
	case update.FieldDeletedUnix:
		return m.AddedDeletedUnix()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UpdateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case update.FieldCreatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedUnix(v)
		return nil
	case update.FieldUpdatedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedUnix(v)
		return nil
	case update.FieldDeletedUnix:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedUnix(v)
		return nil
	}
	return fmt.Errorf("unknown Update numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UpdateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(update.FieldDeletedUnix) {
		fields = append(fields, update.FieldDeletedUnix)
	}
	if m.FieldCleared(update.FieldSign) {
		fields = append(fields, update.FieldSign)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UpdateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UpdateMutation) ClearField(name string) error {
	switch name {
	case update.FieldDeletedUnix:
		m.ClearDeletedUnix()
		return nil
	case update.FieldSign:
		m.ClearSign()
		return nil
	}
	return fmt.Errorf("unknown Update nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UpdateMutation) ResetField(name string) error {
	switch name {
	case update.FieldCreatedUnix:
		m.ResetCreatedUnix()
		return nil
	case update.FieldUpdatedUnix:
		m.ResetUpdatedUnix()
		return nil
	case update.FieldDeletedUnix:
		m.ResetDeletedUnix()
		return nil
	case update.FieldOs:
		m.ResetOs()
		return nil
	case update.FieldArch:
		m.ResetArch()
		return nil
	case update.FieldVersion:
		m.ResetVersion()
		return nil
	case update.FieldRid:
		m.ResetRid()
		return nil
	case update.FieldCrc32:
		m.ResetCrc32()
		return nil
	case update.FieldAttr:
		m.ResetAttr()
		return nil
	case update.FieldForcibly:
		m.ResetForcibly()
		return nil
	case update.FieldTruncate:
		m.ResetTruncate()
		return nil
	case update.FieldTitle:
		m.ResetTitle()
		return nil
	case update.FieldDetail:
		m.ResetDetail()
		return nil
	case update.FieldSign:
		m.ResetSign()
		return nil
	}
	return fmt.Errorf("unknown Update field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UpdateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UpdateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UpdateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UpdateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UpdateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UpdateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UpdateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Update unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UpdateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Update edge %s", name)
}

// VersionMutation represents an operation that mutates the Version nodes in the graph.
type VersionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Current      *int
	add_Current   *int
	_Last         *int
	add_Last      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Version, error)
	predicates    []predicate.Version
}

var _ ent.Mutation = (*VersionMutation)(nil)

// versionOption allows management of the mutation configuration using functional options.
type versionOption func(*VersionMutation)

// newVersionMutation creates new mutation for the Version entity.
func newVersionMutation(c config, op Op, opts ...versionOption) *VersionMutation {
	m := &VersionMutation{
		config:        c,
		op:            op,
		typ:           TypeVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVersionID sets the ID field of the mutation.
func withVersionID(id int) versionOption {
	return func(m *VersionMutation) {
		var (
			err   error
			once  sync.Once
			value *Version
		)
		m.oldValue = func(ctx context.Context) (*Version, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Version.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVersion sets the old Version of the mutation.
func withVersion(node *Version) versionOption {
	return func(m *VersionMutation) {
		m.oldValue = func(context.Context) (*Version, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("upgrade: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VersionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VersionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Version.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCurrent sets the "Current" field.
func (m *VersionMutation) SetCurrent(i int) {
	m._Current = &i
	m.add_Current = nil
}

// Current returns the value of the "Current" field in the mutation.
func (m *VersionMutation) Current() (r int, exists bool) {
	v := m._Current
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrent returns the old "Current" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldCurrent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrent: %w", err)
	}
	return oldValue.Current, nil
}

// AddCurrent adds i to the "Current" field.
func (m *VersionMutation) AddCurrent(i int) {
	if m.add_Current != nil {
		*m.add_Current += i
	} else {
		m.add_Current = &i
	}
}

// AddedCurrent returns the value that was added to the "Current" field in this mutation.
func (m *VersionMutation) AddedCurrent() (r int, exists bool) {
	v := m.add_Current
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrent resets all changes to the "Current" field.
func (m *VersionMutation) ResetCurrent() {
	m._Current = nil
	m.add_Current = nil
}

// SetLast sets the "Last" field.
func (m *VersionMutation) SetLast(i int) {
	m._Last = &i
	m.add_Last = nil
}

// Last returns the value of the "Last" field in the mutation.
func (m *VersionMutation) Last() (r int, exists bool) {
	v := m._Last
	if v == nil {
		return
	}
	return *v, true
}

// OldLast returns the old "Last" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldLast(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLast is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLast requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLast: %w", err)
	}
	return oldValue.Last, nil
}

// AddLast adds i to the "Last" field.
func (m *VersionMutation) AddLast(i int) {
	if m.add_Last != nil {
		*m.add_Last += i
	} else {
		m.add_Last = &i
	}
}

// AddedLast returns the value that was added to the "Last" field in this mutation.
func (m *VersionMutation) AddedLast() (r int, exists bool) {
	v := m.add_Last
	if v == nil {
		return
	}
	return *v, true
}

// ResetLast resets all changes to the "Last" field.
func (m *VersionMutation) ResetLast() {
	m._Last = nil
	m.add_Last = nil
}

// Where appends a list predicates to the VersionMutation builder.
func (m *VersionMutation) Where(ps ...predicate.Version) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VersionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Version).
func (m *VersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VersionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Current != nil {
		fields = append(fields, version.FieldCurrent)
	}
	if m._Last != nil {
		fields = append(fields, version.FieldLast)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case version.FieldCurrent:
		return m.Current()
	case version.FieldLast:
		return m.Last()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case version.FieldCurrent:
		return m.OldCurrent(ctx)
	case version.FieldLast:
		return m.OldLast(ctx)
	}
	return nil, fmt.Errorf("unknown Version field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case version.FieldCurrent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrent(v)
		return nil
	case version.FieldLast:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLast(v)
		return nil
	}
	return fmt.Errorf("unknown Version field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VersionMutation) AddedFields() []string {
	var fields []string
	if m.add_Current != nil {
		fields = append(fields, version.FieldCurrent)
	}
	if m.add_Last != nil {
		fields = append(fields, version.FieldLast)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case version.FieldCurrent:
		return m.AddedCurrent()
	case version.FieldLast:
		return m.AddedLast()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case version.FieldCurrent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrent(v)
		return nil
	case version.FieldLast:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLast(v)
		return nil
	}
	return fmt.Errorf("unknown Version numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Version nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VersionMutation) ResetField(name string) error {
	switch name {
	case version.FieldCurrent:
		m.ResetCurrent()
		return nil
	case version.FieldLast:
		m.ResetLast()
		return nil
	}
	return fmt.Errorf("unknown Version field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VersionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VersionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VersionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VersionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Version unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VersionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Version edge %s", name)
}
