// Code generated by entc, DO NOT EDIT.

package update

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the update type in the database.
	Label = "update"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedUnix holds the string denoting the created_unix field in the database.
	FieldCreatedUnix = "created_unix"
	// FieldUpdatedUnix holds the string denoting the updated_unix field in the database.
	FieldUpdatedUnix = "updated_unix"
	// FieldDeletedUnix holds the string denoting the deleted_unix field in the database.
	FieldDeletedUnix = "deleted_unix"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldArch holds the string denoting the arch field in the database.
	FieldArch = "arch"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldRid holds the string denoting the rid field in the database.
	FieldRid = "rid"
	// FieldCrc32 holds the string denoting the crc32 field in the database.
	FieldCrc32 = "crc32"
	// FieldAttr holds the string denoting the attr field in the database.
	FieldAttr = "attr"
	// FieldForcibly holds the string denoting the forcibly field in the database.
	FieldForcibly = "forcibly"
	// FieldTruncate holds the string denoting the truncate field in the database.
	FieldTruncate = "truncate"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDetail holds the string denoting the detail field in the database.
	FieldDetail = "detail"
	// FieldSign holds the string denoting the sign field in the database.
	FieldSign = "sign"
	// Table holds the table name of the update in the database.
	Table = "updates"
)

// Columns holds all SQL columns for update fields.
var Columns = []string{
	FieldID,
	FieldCreatedUnix,
	FieldUpdatedUnix,
	FieldDeletedUnix,
	FieldOs,
	FieldArch,
	FieldVersion,
	FieldRid,
	FieldCrc32,
	FieldAttr,
	FieldForcibly,
	FieldTruncate,
	FieldTitle,
	FieldDetail,
	FieldSign,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedUnix holds the default value on creation for the "created_unix" field.
	DefaultCreatedUnix int64
	// DefaultUpdatedUnix holds the default value on creation for the "updated_unix" field.
	DefaultUpdatedUnix int64
	// DefaultOs holds the default value on creation for the "os" field.
	DefaultOs string
	// DefaultArch holds the default value on creation for the "arch" field.
	DefaultArch string
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion string
	// DefaultRid holds the default value on creation for the "rid" field.
	DefaultRid string
	// DefaultCrc32 holds the default value on creation for the "crc32" field.
	DefaultCrc32 string
	// DefaultAttr holds the default value on creation for the "attr" field.
	DefaultAttr string
	// DefaultForcibly holds the default value on creation for the "forcibly" field.
	DefaultForcibly bool
	// DefaultTruncate holds the default value on creation for the "truncate" field.
	DefaultTruncate bool
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultDetail holds the default value on creation for the "detail" field.
	DefaultDetail string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
