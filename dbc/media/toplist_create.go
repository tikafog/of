// Code generated by entc, DO NOT EDIT.

package media

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/informationv1"
	"github.com/tikafog/of/dbc/media/page"
	"github.com/tikafog/of/dbc/media/toplist"
)

// TopListCreate is the builder for creating a TopList entity.
type TopListCreate struct {
	config
	mutation *TopListMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedUnix sets the "created_unix" field.
func (tlc *TopListCreate) SetCreatedUnix(i int64) *TopListCreate {
	tlc.mutation.SetCreatedUnix(i)
	return tlc
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableCreatedUnix(i *int64) *TopListCreate {
	if i != nil {
		tlc.SetCreatedUnix(*i)
	}
	return tlc
}

// SetUpdatedUnix sets the "updated_unix" field.
func (tlc *TopListCreate) SetUpdatedUnix(i int64) *TopListCreate {
	tlc.mutation.SetUpdatedUnix(i)
	return tlc
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableUpdatedUnix(i *int64) *TopListCreate {
	if i != nil {
		tlc.SetUpdatedUnix(*i)
	}
	return tlc
}

// SetDeletedUnix sets the "deleted_unix" field.
func (tlc *TopListCreate) SetDeletedUnix(i int64) *TopListCreate {
	tlc.mutation.SetDeletedUnix(i)
	return tlc
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableDeletedUnix(i *int64) *TopListCreate {
	if i != nil {
		tlc.SetDeletedUnix(*i)
	}
	return tlc
}

// SetInformationID sets the "information_id" field.
func (tlc *TopListCreate) SetInformationID(u uuid.UUID) *TopListCreate {
	tlc.mutation.SetInformationID(u)
	return tlc
}

// SetNillableInformationID sets the "information_id" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableInformationID(u *uuid.UUID) *TopListCreate {
	if u != nil {
		tlc.SetInformationID(*u)
	}
	return tlc
}

// SetPageID sets the "page_id" field.
func (tlc *TopListCreate) SetPageID(u uuid.UUID) *TopListCreate {
	tlc.mutation.SetPageID(u)
	return tlc
}

// SetNillablePageID sets the "page_id" field if the given value is not nil.
func (tlc *TopListCreate) SetNillablePageID(u *uuid.UUID) *TopListCreate {
	if u != nil {
		tlc.SetPageID(*u)
	}
	return tlc
}

// SetTitle sets the "title" field.
func (tlc *TopListCreate) SetTitle(s string) *TopListCreate {
	tlc.mutation.SetTitle(s)
	return tlc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableTitle(s *string) *TopListCreate {
	if s != nil {
		tlc.SetTitle(*s)
	}
	return tlc
}

// SetIntro sets the "intro" field.
func (tlc *TopListCreate) SetIntro(s string) *TopListCreate {
	tlc.mutation.SetIntro(s)
	return tlc
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableIntro(s *string) *TopListCreate {
	if s != nil {
		tlc.SetIntro(*s)
	}
	return tlc
}

// SetCategory sets the "category" field.
func (tlc *TopListCreate) SetCategory(t toplist.Category) *TopListCreate {
	tlc.mutation.SetCategory(t)
	return tlc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableCategory(t *toplist.Category) *TopListCreate {
	if t != nil {
		tlc.SetCategory(*t)
	}
	return tlc
}

// SetLowerBanner sets the "lower_banner" field.
func (tlc *TopListCreate) SetLowerBanner(tb toplist.LowerBanner) *TopListCreate {
	tlc.mutation.SetLowerBanner(tb)
	return tlc
}

// SetNillableLowerBanner sets the "lower_banner" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableLowerBanner(tb *toplist.LowerBanner) *TopListCreate {
	if tb != nil {
		tlc.SetLowerBanner(*tb)
	}
	return tlc
}

// SetTopRight sets the "top_right" field.
func (tlc *TopListCreate) SetTopRight(tr toplist.TopRight) *TopListCreate {
	tlc.mutation.SetTopRight(tr)
	return tlc
}

// SetNillableTopRight sets the "top_right" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableTopRight(tr *toplist.TopRight) *TopListCreate {
	if tr != nil {
		tlc.SetTopRight(*tr)
	}
	return tlc
}

// SetID sets the "id" field.
func (tlc *TopListCreate) SetID(u uuid.UUID) *TopListCreate {
	tlc.mutation.SetID(u)
	return tlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlc *TopListCreate) SetNillableID(u *uuid.UUID) *TopListCreate {
	if u != nil {
		tlc.SetID(*u)
	}
	return tlc
}

// SetInformation sets the "information" edge to the InformationV1 entity.
func (tlc *TopListCreate) SetInformation(i *InformationV1) *TopListCreate {
	return tlc.SetInformationID(i.ID)
}

// SetPage sets the "page" edge to the Page entity.
func (tlc *TopListCreate) SetPage(p *Page) *TopListCreate {
	return tlc.SetPageID(p.ID)
}

// Mutation returns the TopListMutation object of the builder.
func (tlc *TopListCreate) Mutation() *TopListMutation {
	return tlc.mutation
}

// Save creates the TopList in the database.
func (tlc *TopListCreate) Save(ctx context.Context) (*TopList, error) {
	var (
		err  error
		node *TopList
	)
	tlc.defaults()
	if len(tlc.hooks) == 0 {
		if err = tlc.check(); err != nil {
			return nil, err
		}
		node, err = tlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlc.check(); err != nil {
				return nil, err
			}
			tlc.mutation = mutation
			if node, err = tlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tlc.hooks) - 1; i >= 0; i-- {
			if tlc.hooks[i] == nil {
				return nil, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = tlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TopListCreate) SaveX(ctx context.Context) *TopList {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TopListCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TopListCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TopListCreate) defaults() {
	if _, ok := tlc.mutation.CreatedUnix(); !ok {
		v := toplist.DefaultCreatedUnix
		tlc.mutation.SetCreatedUnix(v)
	}
	if _, ok := tlc.mutation.UpdatedUnix(); !ok {
		v := toplist.DefaultUpdatedUnix
		tlc.mutation.SetUpdatedUnix(v)
	}
	if _, ok := tlc.mutation.Title(); !ok {
		v := toplist.DefaultTitle
		tlc.mutation.SetTitle(v)
	}
	if _, ok := tlc.mutation.Intro(); !ok {
		v := toplist.DefaultIntro
		tlc.mutation.SetIntro(v)
	}
	if _, ok := tlc.mutation.Category(); !ok {
		v := toplist.DefaultCategory
		tlc.mutation.SetCategory(v)
	}
	if _, ok := tlc.mutation.LowerBanner(); !ok {
		v := toplist.DefaultLowerBanner
		tlc.mutation.SetLowerBanner(v)
	}
	if _, ok := tlc.mutation.TopRight(); !ok {
		v := toplist.DefaultTopRight
		tlc.mutation.SetTopRight(v)
	}
	if _, ok := tlc.mutation.ID(); !ok {
		v := toplist.DefaultID()
		tlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TopListCreate) check() error {
	if _, ok := tlc.mutation.CreatedUnix(); !ok {
		return &ValidationError{Name: "created_unix", err: errors.New(`media: missing required field "TopList.created_unix"`)}
	}
	if _, ok := tlc.mutation.UpdatedUnix(); !ok {
		return &ValidationError{Name: "updated_unix", err: errors.New(`media: missing required field "TopList.updated_unix"`)}
	}
	if _, ok := tlc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`media: missing required field "TopList.title"`)}
	}
	if _, ok := tlc.mutation.Intro(); !ok {
		return &ValidationError{Name: "intro", err: errors.New(`media: missing required field "TopList.intro"`)}
	}
	if _, ok := tlc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`media: missing required field "TopList.category"`)}
	}
	if v, ok := tlc.mutation.Category(); ok {
		if err := toplist.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`media: validator failed for field "TopList.category": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.LowerBanner(); !ok {
		return &ValidationError{Name: "lower_banner", err: errors.New(`media: missing required field "TopList.lower_banner"`)}
	}
	if v, ok := tlc.mutation.LowerBanner(); ok {
		if err := toplist.LowerBannerValidator(v); err != nil {
			return &ValidationError{Name: "lower_banner", err: fmt.Errorf(`media: validator failed for field "TopList.lower_banner": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.TopRight(); !ok {
		return &ValidationError{Name: "top_right", err: errors.New(`media: missing required field "TopList.top_right"`)}
	}
	if v, ok := tlc.mutation.TopRight(); ok {
		if err := toplist.TopRightValidator(v); err != nil {
			return &ValidationError{Name: "top_right", err: fmt.Errorf(`media: validator failed for field "TopList.top_right": %w`, err)}
		}
	}
	return nil
}

func (tlc *TopListCreate) sqlSave(ctx context.Context) (*TopList, error) {
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tlc *TopListCreate) createSpec() (*TopList, *sqlgraph.CreateSpec) {
	var (
		_node = &TopList{config: tlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: toplist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: toplist.FieldID,
			},
		}
	)
	_spec.OnConflict = tlc.conflict
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tlc.mutation.CreatedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldCreatedUnix,
		})
		_node.CreatedUnix = value
	}
	if value, ok := tlc.mutation.UpdatedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldUpdatedUnix,
		})
		_node.UpdatedUnix = value
	}
	if value, ok := tlc.mutation.DeletedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldDeletedUnix,
		})
		_node.DeletedUnix = value
	}
	if value, ok := tlc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: toplist.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := tlc.mutation.Intro(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: toplist.FieldIntro,
		})
		_node.Intro = value
	}
	if value, ok := tlc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldCategory,
		})
		_node.Category = value
	}
	if value, ok := tlc.mutation.LowerBanner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldLowerBanner,
		})
		_node.LowerBanner = value
	}
	if value, ok := tlc.mutation.TopRight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldTopRight,
		})
		_node.TopRight = value
	}
	if nodes := tlc.mutation.InformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.InformationTable,
			Columns: []string{toplist.InformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: informationv1.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InformationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.PageTable,
			Columns: []string{toplist.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopList.Create().
//		SetCreatedUnix(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopListUpsert) {
//			SetCreatedUnix(v+v).
//		}).
//		Exec(ctx)
//
func (tlc *TopListCreate) OnConflict(opts ...sql.ConflictOption) *TopListUpsertOne {
	tlc.conflict = opts
	return &TopListUpsertOne{
		create: tlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tlc *TopListCreate) OnConflictColumns(columns ...string) *TopListUpsertOne {
	tlc.conflict = append(tlc.conflict, sql.ConflictColumns(columns...))
	return &TopListUpsertOne{
		create: tlc,
	}
}

type (
	// TopListUpsertOne is the builder for "upsert"-ing
	//  one TopList node.
	TopListUpsertOne struct {
		create *TopListCreate
	}

	// TopListUpsert is the "OnConflict" setter.
	TopListUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedUnix sets the "created_unix" field.
func (u *TopListUpsert) SetCreatedUnix(v int64) *TopListUpsert {
	u.Set(toplist.FieldCreatedUnix, v)
	return u
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *TopListUpsert) UpdateCreatedUnix() *TopListUpsert {
	u.SetExcluded(toplist.FieldCreatedUnix)
	return u
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *TopListUpsert) AddCreatedUnix(v int64) *TopListUpsert {
	u.Add(toplist.FieldCreatedUnix, v)
	return u
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *TopListUpsert) SetUpdatedUnix(v int64) *TopListUpsert {
	u.Set(toplist.FieldUpdatedUnix, v)
	return u
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *TopListUpsert) UpdateUpdatedUnix() *TopListUpsert {
	u.SetExcluded(toplist.FieldUpdatedUnix)
	return u
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *TopListUpsert) AddUpdatedUnix(v int64) *TopListUpsert {
	u.Add(toplist.FieldUpdatedUnix, v)
	return u
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *TopListUpsert) SetDeletedUnix(v int64) *TopListUpsert {
	u.Set(toplist.FieldDeletedUnix, v)
	return u
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *TopListUpsert) UpdateDeletedUnix() *TopListUpsert {
	u.SetExcluded(toplist.FieldDeletedUnix)
	return u
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *TopListUpsert) AddDeletedUnix(v int64) *TopListUpsert {
	u.Add(toplist.FieldDeletedUnix, v)
	return u
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *TopListUpsert) ClearDeletedUnix() *TopListUpsert {
	u.SetNull(toplist.FieldDeletedUnix)
	return u
}

// SetInformationID sets the "information_id" field.
func (u *TopListUpsert) SetInformationID(v uuid.UUID) *TopListUpsert {
	u.Set(toplist.FieldInformationID, v)
	return u
}

// UpdateInformationID sets the "information_id" field to the value that was provided on create.
func (u *TopListUpsert) UpdateInformationID() *TopListUpsert {
	u.SetExcluded(toplist.FieldInformationID)
	return u
}

// ClearInformationID clears the value of the "information_id" field.
func (u *TopListUpsert) ClearInformationID() *TopListUpsert {
	u.SetNull(toplist.FieldInformationID)
	return u
}

// SetPageID sets the "page_id" field.
func (u *TopListUpsert) SetPageID(v uuid.UUID) *TopListUpsert {
	u.Set(toplist.FieldPageID, v)
	return u
}

// UpdatePageID sets the "page_id" field to the value that was provided on create.
func (u *TopListUpsert) UpdatePageID() *TopListUpsert {
	u.SetExcluded(toplist.FieldPageID)
	return u
}

// ClearPageID clears the value of the "page_id" field.
func (u *TopListUpsert) ClearPageID() *TopListUpsert {
	u.SetNull(toplist.FieldPageID)
	return u
}

// SetTitle sets the "title" field.
func (u *TopListUpsert) SetTitle(v string) *TopListUpsert {
	u.Set(toplist.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TopListUpsert) UpdateTitle() *TopListUpsert {
	u.SetExcluded(toplist.FieldTitle)
	return u
}

// SetIntro sets the "intro" field.
func (u *TopListUpsert) SetIntro(v string) *TopListUpsert {
	u.Set(toplist.FieldIntro, v)
	return u
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *TopListUpsert) UpdateIntro() *TopListUpsert {
	u.SetExcluded(toplist.FieldIntro)
	return u
}

// SetCategory sets the "category" field.
func (u *TopListUpsert) SetCategory(v toplist.Category) *TopListUpsert {
	u.Set(toplist.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *TopListUpsert) UpdateCategory() *TopListUpsert {
	u.SetExcluded(toplist.FieldCategory)
	return u
}

// SetLowerBanner sets the "lower_banner" field.
func (u *TopListUpsert) SetLowerBanner(v toplist.LowerBanner) *TopListUpsert {
	u.Set(toplist.FieldLowerBanner, v)
	return u
}

// UpdateLowerBanner sets the "lower_banner" field to the value that was provided on create.
func (u *TopListUpsert) UpdateLowerBanner() *TopListUpsert {
	u.SetExcluded(toplist.FieldLowerBanner)
	return u
}

// SetTopRight sets the "top_right" field.
func (u *TopListUpsert) SetTopRight(v toplist.TopRight) *TopListUpsert {
	u.Set(toplist.FieldTopRight, v)
	return u
}

// UpdateTopRight sets the "top_right" field to the value that was provided on create.
func (u *TopListUpsert) UpdateTopRight() *TopListUpsert {
	u.SetExcluded(toplist.FieldTopRight)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TopList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(toplist.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TopListUpsertOne) UpdateNewValues() *TopListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(toplist.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TopList.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TopListUpsertOne) Ignore() *TopListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopListUpsertOne) DoNothing() *TopListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopListCreate.OnConflict
// documentation for more info.
func (u *TopListUpsertOne) Update(set func(*TopListUpsert)) *TopListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopListUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedUnix sets the "created_unix" field.
func (u *TopListUpsertOne) SetCreatedUnix(v int64) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetCreatedUnix(v)
	})
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *TopListUpsertOne) AddCreatedUnix(v int64) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.AddCreatedUnix(v)
	})
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateCreatedUnix() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateCreatedUnix()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *TopListUpsertOne) SetUpdatedUnix(v int64) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *TopListUpsertOne) AddUpdatedUnix(v int64) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateUpdatedUnix() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateUpdatedUnix()
	})
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *TopListUpsertOne) SetDeletedUnix(v int64) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetDeletedUnix(v)
	})
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *TopListUpsertOne) AddDeletedUnix(v int64) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.AddDeletedUnix(v)
	})
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateDeletedUnix() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateDeletedUnix()
	})
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *TopListUpsertOne) ClearDeletedUnix() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.ClearDeletedUnix()
	})
}

// SetInformationID sets the "information_id" field.
func (u *TopListUpsertOne) SetInformationID(v uuid.UUID) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetInformationID(v)
	})
}

// UpdateInformationID sets the "information_id" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateInformationID() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateInformationID()
	})
}

// ClearInformationID clears the value of the "information_id" field.
func (u *TopListUpsertOne) ClearInformationID() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.ClearInformationID()
	})
}

// SetPageID sets the "page_id" field.
func (u *TopListUpsertOne) SetPageID(v uuid.UUID) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetPageID(v)
	})
}

// UpdatePageID sets the "page_id" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdatePageID() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdatePageID()
	})
}

// ClearPageID clears the value of the "page_id" field.
func (u *TopListUpsertOne) ClearPageID() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.ClearPageID()
	})
}

// SetTitle sets the "title" field.
func (u *TopListUpsertOne) SetTitle(v string) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateTitle() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateTitle()
	})
}

// SetIntro sets the "intro" field.
func (u *TopListUpsertOne) SetIntro(v string) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetIntro(v)
	})
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateIntro() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateIntro()
	})
}

// SetCategory sets the "category" field.
func (u *TopListUpsertOne) SetCategory(v toplist.Category) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateCategory() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateCategory()
	})
}

// SetLowerBanner sets the "lower_banner" field.
func (u *TopListUpsertOne) SetLowerBanner(v toplist.LowerBanner) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetLowerBanner(v)
	})
}

// UpdateLowerBanner sets the "lower_banner" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateLowerBanner() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateLowerBanner()
	})
}

// SetTopRight sets the "top_right" field.
func (u *TopListUpsertOne) SetTopRight(v toplist.TopRight) *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.SetTopRight(v)
	})
}

// UpdateTopRight sets the "top_right" field to the value that was provided on create.
func (u *TopListUpsertOne) UpdateTopRight() *TopListUpsertOne {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateTopRight()
	})
}

// Exec executes the query.
func (u *TopListUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("media: missing options for TopListCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopListUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopListUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("media: TopListUpsertOne.ID is not supported by MySQL driver. Use TopListUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopListUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopListCreateBulk is the builder for creating many TopList entities in bulk.
type TopListCreateBulk struct {
	config
	builders []*TopListCreate
	conflict []sql.ConflictOption
}

// Save creates the TopList entities in the database.
func (tlcb *TopListCreateBulk) Save(ctx context.Context) ([]*TopList, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TopList, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TopListCreateBulk) SaveX(ctx context.Context) []*TopList {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TopListCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TopListCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopList.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopListUpsert) {
//			SetCreatedUnix(v+v).
//		}).
//		Exec(ctx)
//
func (tlcb *TopListCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopListUpsertBulk {
	tlcb.conflict = opts
	return &TopListUpsertBulk{
		create: tlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tlcb *TopListCreateBulk) OnConflictColumns(columns ...string) *TopListUpsertBulk {
	tlcb.conflict = append(tlcb.conflict, sql.ConflictColumns(columns...))
	return &TopListUpsertBulk{
		create: tlcb,
	}
}

// TopListUpsertBulk is the builder for "upsert"-ing
// a bulk of TopList nodes.
type TopListUpsertBulk struct {
	create *TopListCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TopList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(toplist.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TopListUpsertBulk) UpdateNewValues() *TopListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(toplist.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopList.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TopListUpsertBulk) Ignore() *TopListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopListUpsertBulk) DoNothing() *TopListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopListCreateBulk.OnConflict
// documentation for more info.
func (u *TopListUpsertBulk) Update(set func(*TopListUpsert)) *TopListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopListUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedUnix sets the "created_unix" field.
func (u *TopListUpsertBulk) SetCreatedUnix(v int64) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetCreatedUnix(v)
	})
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *TopListUpsertBulk) AddCreatedUnix(v int64) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.AddCreatedUnix(v)
	})
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateCreatedUnix() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateCreatedUnix()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *TopListUpsertBulk) SetUpdatedUnix(v int64) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *TopListUpsertBulk) AddUpdatedUnix(v int64) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateUpdatedUnix() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateUpdatedUnix()
	})
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *TopListUpsertBulk) SetDeletedUnix(v int64) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetDeletedUnix(v)
	})
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *TopListUpsertBulk) AddDeletedUnix(v int64) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.AddDeletedUnix(v)
	})
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateDeletedUnix() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateDeletedUnix()
	})
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *TopListUpsertBulk) ClearDeletedUnix() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.ClearDeletedUnix()
	})
}

// SetInformationID sets the "information_id" field.
func (u *TopListUpsertBulk) SetInformationID(v uuid.UUID) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetInformationID(v)
	})
}

// UpdateInformationID sets the "information_id" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateInformationID() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateInformationID()
	})
}

// ClearInformationID clears the value of the "information_id" field.
func (u *TopListUpsertBulk) ClearInformationID() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.ClearInformationID()
	})
}

// SetPageID sets the "page_id" field.
func (u *TopListUpsertBulk) SetPageID(v uuid.UUID) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetPageID(v)
	})
}

// UpdatePageID sets the "page_id" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdatePageID() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdatePageID()
	})
}

// ClearPageID clears the value of the "page_id" field.
func (u *TopListUpsertBulk) ClearPageID() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.ClearPageID()
	})
}

// SetTitle sets the "title" field.
func (u *TopListUpsertBulk) SetTitle(v string) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateTitle() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateTitle()
	})
}

// SetIntro sets the "intro" field.
func (u *TopListUpsertBulk) SetIntro(v string) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetIntro(v)
	})
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateIntro() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateIntro()
	})
}

// SetCategory sets the "category" field.
func (u *TopListUpsertBulk) SetCategory(v toplist.Category) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateCategory() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateCategory()
	})
}

// SetLowerBanner sets the "lower_banner" field.
func (u *TopListUpsertBulk) SetLowerBanner(v toplist.LowerBanner) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetLowerBanner(v)
	})
}

// UpdateLowerBanner sets the "lower_banner" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateLowerBanner() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateLowerBanner()
	})
}

// SetTopRight sets the "top_right" field.
func (u *TopListUpsertBulk) SetTopRight(v toplist.TopRight) *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.SetTopRight(v)
	})
}

// UpdateTopRight sets the "top_right" field to the value that was provided on create.
func (u *TopListUpsertBulk) UpdateTopRight() *TopListUpsertBulk {
	return u.Update(func(s *TopListUpsert) {
		s.UpdateTopRight()
	})
}

// Exec executes the query.
func (u *TopListUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("media: OnConflict was set for builder %d. Set it on the TopListCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("media: missing options for TopListCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopListUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
