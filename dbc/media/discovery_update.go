// Code generated by ent, DO NOT EDIT.

package media

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tikafog/of/dbc/media/discovery"
	"github.com/tikafog/of/dbc/media/predicate"
)

// DiscoveryUpdate is the builder for updating Discovery entities.
type DiscoveryUpdate struct {
	config
	hooks    []Hook
	mutation *DiscoveryMutation
}

// Where appends a list predicates to the DiscoveryUpdate builder.
func (du *DiscoveryUpdate) Where(ps ...predicate.Discovery) *DiscoveryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCreatedUnix sets the "created_unix" field.
func (du *DiscoveryUpdate) SetCreatedUnix(i int64) *DiscoveryUpdate {
	du.mutation.ResetCreatedUnix()
	du.mutation.SetCreatedUnix(i)
	return du
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (du *DiscoveryUpdate) SetNillableCreatedUnix(i *int64) *DiscoveryUpdate {
	if i != nil {
		du.SetCreatedUnix(*i)
	}
	return du
}

// AddCreatedUnix adds i to the "created_unix" field.
func (du *DiscoveryUpdate) AddCreatedUnix(i int64) *DiscoveryUpdate {
	du.mutation.AddCreatedUnix(i)
	return du
}

// SetUpdatedUnix sets the "updated_unix" field.
func (du *DiscoveryUpdate) SetUpdatedUnix(i int64) *DiscoveryUpdate {
	du.mutation.ResetUpdatedUnix()
	du.mutation.SetUpdatedUnix(i)
	return du
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (du *DiscoveryUpdate) SetNillableUpdatedUnix(i *int64) *DiscoveryUpdate {
	if i != nil {
		du.SetUpdatedUnix(*i)
	}
	return du
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (du *DiscoveryUpdate) AddUpdatedUnix(i int64) *DiscoveryUpdate {
	du.mutation.AddUpdatedUnix(i)
	return du
}

// SetDeletedUnix sets the "deleted_unix" field.
func (du *DiscoveryUpdate) SetDeletedUnix(i int64) *DiscoveryUpdate {
	du.mutation.ResetDeletedUnix()
	du.mutation.SetDeletedUnix(i)
	return du
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (du *DiscoveryUpdate) SetNillableDeletedUnix(i *int64) *DiscoveryUpdate {
	if i != nil {
		du.SetDeletedUnix(*i)
	}
	return du
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (du *DiscoveryUpdate) AddDeletedUnix(i int64) *DiscoveryUpdate {
	du.mutation.AddDeletedUnix(i)
	return du
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (du *DiscoveryUpdate) ClearDeletedUnix() *DiscoveryUpdate {
	du.mutation.ClearDeletedUnix()
	return du
}

// SetDate sets the "date" field.
func (du *DiscoveryUpdate) SetDate(s string) *DiscoveryUpdate {
	du.mutation.SetDate(s)
	return du
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (du *DiscoveryUpdate) SetNillableDate(s *string) *DiscoveryUpdate {
	if s != nil {
		du.SetDate(*s)
	}
	return du
}

// SetRid sets the "rid" field.
func (du *DiscoveryUpdate) SetRid(s string) *DiscoveryUpdate {
	du.mutation.SetRid(s)
	return du
}

// SetNillableRid sets the "rid" field if the given value is not nil.
func (du *DiscoveryUpdate) SetNillableRid(s *string) *DiscoveryUpdate {
	if s != nil {
		du.SetRid(*s)
	}
	return du
}

// SetTitle sets the "title" field.
func (du *DiscoveryUpdate) SetTitle(s string) *DiscoveryUpdate {
	du.mutation.SetTitle(s)
	return du
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (du *DiscoveryUpdate) SetNillableTitle(s *string) *DiscoveryUpdate {
	if s != nil {
		du.SetTitle(*s)
	}
	return du
}

// SetDetail sets the "detail" field.
func (du *DiscoveryUpdate) SetDetail(s string) *DiscoveryUpdate {
	du.mutation.SetDetail(s)
	return du
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (du *DiscoveryUpdate) SetNillableDetail(s *string) *DiscoveryUpdate {
	if s != nil {
		du.SetDetail(*s)
	}
	return du
}

// SetMtype sets the "mtype" field.
func (du *DiscoveryUpdate) SetMtype(d discovery.Mtype) *DiscoveryUpdate {
	du.mutation.SetMtype(d)
	return du
}

// SetNillableMtype sets the "mtype" field if the given value is not nil.
func (du *DiscoveryUpdate) SetNillableMtype(d *discovery.Mtype) *DiscoveryUpdate {
	if d != nil {
		du.SetMtype(*d)
	}
	return du
}

// SetLinks sets the "links" field.
func (du *DiscoveryUpdate) SetLinks(s []string) *DiscoveryUpdate {
	du.mutation.SetLinks(s)
	return du
}

// Mutation returns the DiscoveryMutation object of the builder.
func (du *DiscoveryUpdate) Mutation() *DiscoveryMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiscoveryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscoveryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiscoveryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiscoveryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiscoveryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DiscoveryUpdate) check() error {
	if v, ok := du.mutation.Mtype(); ok {
		if err := discovery.MtypeValidator(v); err != nil {
			return &ValidationError{Name: "mtype", err: fmt.Errorf(`media: validator failed for field "Discovery.mtype": %w`, err)}
		}
	}
	return nil
}

func (du *DiscoveryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discovery.Table,
			Columns: discovery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discovery.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldCreatedUnix,
		})
	}
	if value, ok := du.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldCreatedUnix,
		})
	}
	if value, ok := du.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldUpdatedUnix,
		})
	}
	if value, ok := du.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldUpdatedUnix,
		})
	}
	if value, ok := du.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldDeletedUnix,
		})
	}
	if value, ok := du.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldDeletedUnix,
		})
	}
	if du.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: discovery.FieldDeletedUnix,
		})
	}
	if value, ok := du.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discovery.FieldDate,
		})
	}
	if value, ok := du.mutation.Rid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discovery.FieldRid,
		})
	}
	if value, ok := du.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discovery.FieldTitle,
		})
	}
	if value, ok := du.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discovery.FieldDetail,
		})
	}
	if value, ok := du.mutation.Mtype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: discovery.FieldMtype,
		})
	}
	if value, ok := du.mutation.Links(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: discovery.FieldLinks,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discovery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DiscoveryUpdateOne is the builder for updating a single Discovery entity.
type DiscoveryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscoveryMutation
}

// SetCreatedUnix sets the "created_unix" field.
func (duo *DiscoveryUpdateOne) SetCreatedUnix(i int64) *DiscoveryUpdateOne {
	duo.mutation.ResetCreatedUnix()
	duo.mutation.SetCreatedUnix(i)
	return duo
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (duo *DiscoveryUpdateOne) SetNillableCreatedUnix(i *int64) *DiscoveryUpdateOne {
	if i != nil {
		duo.SetCreatedUnix(*i)
	}
	return duo
}

// AddCreatedUnix adds i to the "created_unix" field.
func (duo *DiscoveryUpdateOne) AddCreatedUnix(i int64) *DiscoveryUpdateOne {
	duo.mutation.AddCreatedUnix(i)
	return duo
}

// SetUpdatedUnix sets the "updated_unix" field.
func (duo *DiscoveryUpdateOne) SetUpdatedUnix(i int64) *DiscoveryUpdateOne {
	duo.mutation.ResetUpdatedUnix()
	duo.mutation.SetUpdatedUnix(i)
	return duo
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (duo *DiscoveryUpdateOne) SetNillableUpdatedUnix(i *int64) *DiscoveryUpdateOne {
	if i != nil {
		duo.SetUpdatedUnix(*i)
	}
	return duo
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (duo *DiscoveryUpdateOne) AddUpdatedUnix(i int64) *DiscoveryUpdateOne {
	duo.mutation.AddUpdatedUnix(i)
	return duo
}

// SetDeletedUnix sets the "deleted_unix" field.
func (duo *DiscoveryUpdateOne) SetDeletedUnix(i int64) *DiscoveryUpdateOne {
	duo.mutation.ResetDeletedUnix()
	duo.mutation.SetDeletedUnix(i)
	return duo
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (duo *DiscoveryUpdateOne) SetNillableDeletedUnix(i *int64) *DiscoveryUpdateOne {
	if i != nil {
		duo.SetDeletedUnix(*i)
	}
	return duo
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (duo *DiscoveryUpdateOne) AddDeletedUnix(i int64) *DiscoveryUpdateOne {
	duo.mutation.AddDeletedUnix(i)
	return duo
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (duo *DiscoveryUpdateOne) ClearDeletedUnix() *DiscoveryUpdateOne {
	duo.mutation.ClearDeletedUnix()
	return duo
}

// SetDate sets the "date" field.
func (duo *DiscoveryUpdateOne) SetDate(s string) *DiscoveryUpdateOne {
	duo.mutation.SetDate(s)
	return duo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (duo *DiscoveryUpdateOne) SetNillableDate(s *string) *DiscoveryUpdateOne {
	if s != nil {
		duo.SetDate(*s)
	}
	return duo
}

// SetRid sets the "rid" field.
func (duo *DiscoveryUpdateOne) SetRid(s string) *DiscoveryUpdateOne {
	duo.mutation.SetRid(s)
	return duo
}

// SetNillableRid sets the "rid" field if the given value is not nil.
func (duo *DiscoveryUpdateOne) SetNillableRid(s *string) *DiscoveryUpdateOne {
	if s != nil {
		duo.SetRid(*s)
	}
	return duo
}

// SetTitle sets the "title" field.
func (duo *DiscoveryUpdateOne) SetTitle(s string) *DiscoveryUpdateOne {
	duo.mutation.SetTitle(s)
	return duo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (duo *DiscoveryUpdateOne) SetNillableTitle(s *string) *DiscoveryUpdateOne {
	if s != nil {
		duo.SetTitle(*s)
	}
	return duo
}

// SetDetail sets the "detail" field.
func (duo *DiscoveryUpdateOne) SetDetail(s string) *DiscoveryUpdateOne {
	duo.mutation.SetDetail(s)
	return duo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (duo *DiscoveryUpdateOne) SetNillableDetail(s *string) *DiscoveryUpdateOne {
	if s != nil {
		duo.SetDetail(*s)
	}
	return duo
}

// SetMtype sets the "mtype" field.
func (duo *DiscoveryUpdateOne) SetMtype(d discovery.Mtype) *DiscoveryUpdateOne {
	duo.mutation.SetMtype(d)
	return duo
}

// SetNillableMtype sets the "mtype" field if the given value is not nil.
func (duo *DiscoveryUpdateOne) SetNillableMtype(d *discovery.Mtype) *DiscoveryUpdateOne {
	if d != nil {
		duo.SetMtype(*d)
	}
	return duo
}

// SetLinks sets the "links" field.
func (duo *DiscoveryUpdateOne) SetLinks(s []string) *DiscoveryUpdateOne {
	duo.mutation.SetLinks(s)
	return duo
}

// Mutation returns the DiscoveryMutation object of the builder.
func (duo *DiscoveryUpdateOne) Mutation() *DiscoveryMutation {
	return duo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiscoveryUpdateOne) Select(field string, fields ...string) *DiscoveryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Discovery entity.
func (duo *DiscoveryUpdateOne) Save(ctx context.Context) (*Discovery, error) {
	var (
		err  error
		node *Discovery
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscoveryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Discovery)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DiscoveryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiscoveryUpdateOne) SaveX(ctx context.Context) *Discovery {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiscoveryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiscoveryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DiscoveryUpdateOne) check() error {
	if v, ok := duo.mutation.Mtype(); ok {
		if err := discovery.MtypeValidator(v); err != nil {
			return &ValidationError{Name: "mtype", err: fmt.Errorf(`media: validator failed for field "Discovery.mtype": %w`, err)}
		}
	}
	return nil
}

func (duo *DiscoveryUpdateOne) sqlSave(ctx context.Context) (_node *Discovery, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discovery.Table,
			Columns: discovery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discovery.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`media: missing "Discovery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discovery.FieldID)
		for _, f := range fields {
			if !discovery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("media: invalid field %q for query", f)}
			}
			if f != discovery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldCreatedUnix,
		})
	}
	if value, ok := duo.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldCreatedUnix,
		})
	}
	if value, ok := duo.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldUpdatedUnix,
		})
	}
	if value, ok := duo.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldUpdatedUnix,
		})
	}
	if value, ok := duo.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldDeletedUnix,
		})
	}
	if value, ok := duo.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: discovery.FieldDeletedUnix,
		})
	}
	if duo.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: discovery.FieldDeletedUnix,
		})
	}
	if value, ok := duo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discovery.FieldDate,
		})
	}
	if value, ok := duo.mutation.Rid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discovery.FieldRid,
		})
	}
	if value, ok := duo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discovery.FieldTitle,
		})
	}
	if value, ok := duo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discovery.FieldDetail,
		})
	}
	if value, ok := duo.mutation.Mtype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: discovery.FieldMtype,
		})
	}
	if value, ok := duo.mutation.Links(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: discovery.FieldLinks,
		})
	}
	_node = &Discovery{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discovery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
