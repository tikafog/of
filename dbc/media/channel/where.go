// Code generated by ent, DO NOT EDIT.

package channel

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedUnix applies equality check predicate on the "created_unix" field. It's identical to CreatedUnixEQ.
func CreatedUnix(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedUnix), v))
	})
}

// UpdatedUnix applies equality check predicate on the "updated_unix" field. It's identical to UpdatedUnixEQ.
func UpdatedUnix(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// DeletedUnix applies equality check predicate on the "deleted_unix" field. It's identical to DeletedUnixEQ.
func DeletedUnix(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedUnix), v))
	})
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CreatedUnixEQ applies the EQ predicate on the "created_unix" field.
func CreatedUnixEQ(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixNEQ applies the NEQ predicate on the "created_unix" field.
func CreatedUnixNEQ(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixIn applies the In predicate on the "created_unix" field.
func CreatedUnixIn(vs ...int64) predicate.Channel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedUnix), v...))
	})
}

// CreatedUnixNotIn applies the NotIn predicate on the "created_unix" field.
func CreatedUnixNotIn(vs ...int64) predicate.Channel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedUnix), v...))
	})
}

// CreatedUnixGT applies the GT predicate on the "created_unix" field.
func CreatedUnixGT(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixGTE applies the GTE predicate on the "created_unix" field.
func CreatedUnixGTE(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixLT applies the LT predicate on the "created_unix" field.
func CreatedUnixLT(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixLTE applies the LTE predicate on the "created_unix" field.
func CreatedUnixLTE(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedUnix), v))
	})
}

// UpdatedUnixEQ applies the EQ predicate on the "updated_unix" field.
func UpdatedUnixEQ(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixNEQ applies the NEQ predicate on the "updated_unix" field.
func UpdatedUnixNEQ(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixIn applies the In predicate on the "updated_unix" field.
func UpdatedUnixIn(vs ...int64) predicate.Channel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixNotIn applies the NotIn predicate on the "updated_unix" field.
func UpdatedUnixNotIn(vs ...int64) predicate.Channel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixGT applies the GT predicate on the "updated_unix" field.
func UpdatedUnixGT(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixGTE applies the GTE predicate on the "updated_unix" field.
func UpdatedUnixGTE(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLT applies the LT predicate on the "updated_unix" field.
func UpdatedUnixLT(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLTE applies the LTE predicate on the "updated_unix" field.
func UpdatedUnixLTE(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedUnix), v))
	})
}

// DeletedUnixEQ applies the EQ predicate on the "deleted_unix" field.
func DeletedUnixEQ(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixNEQ applies the NEQ predicate on the "deleted_unix" field.
func DeletedUnixNEQ(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixIn applies the In predicate on the "deleted_unix" field.
func DeletedUnixIn(vs ...int64) predicate.Channel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedUnix), v...))
	})
}

// DeletedUnixNotIn applies the NotIn predicate on the "deleted_unix" field.
func DeletedUnixNotIn(vs ...int64) predicate.Channel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedUnix), v...))
	})
}

// DeletedUnixGT applies the GT predicate on the "deleted_unix" field.
func DeletedUnixGT(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixGTE applies the GTE predicate on the "deleted_unix" field.
func DeletedUnixGTE(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixLT applies the LT predicate on the "deleted_unix" field.
func DeletedUnixLT(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixLTE applies the LTE predicate on the "deleted_unix" field.
func DeletedUnixLTE(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixIsNil applies the IsNil predicate on the "deleted_unix" field.
func DeletedUnixIsNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedUnix)))
	})
}

// DeletedUnixNotNil applies the NotNil predicate on the "deleted_unix" field.
func DeletedUnixNotNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedUnix)))
	})
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComment), v))
	})
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Channel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComment), v...))
	})
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Channel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComment), v...))
	})
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComment), v))
	})
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComment), v))
	})
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComment), v))
	})
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComment), v))
	})
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComment), v))
	})
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComment), v))
	})
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComment), v))
	})
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComment)))
	})
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComment)))
	})
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComment), v))
	})
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComment), v))
	})
}

// HasInformations applies the HasEdge predicate on the "informations" edge.
func HasInformations() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InformationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InformationsTable, InformationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInformationsWith applies the HasEdge predicate on the "informations" edge with a given conditions (other predicates).
func HasInformationsWith(preds ...predicate.InformationV1) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InformationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InformationsTable, InformationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Channel) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		p(s.Not())
	})
}
