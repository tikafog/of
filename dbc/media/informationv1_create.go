// Code generated by ent, DO NOT EDIT.

package media

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/channel"
	"github.com/tikafog/of/dbc/media/informationv1"
	"github.com/tikafog/of/dbc/media/schema"
	"github.com/tikafog/of/dbc/media/toplist"
)

// InformationV1Create is the builder for creating a InformationV1 entity.
type InformationV1Create struct {
	config
	mutation *InformationV1Mutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedUnix sets the "created_unix" field.
func (iv *InformationV1Create) SetCreatedUnix(i int64) *InformationV1Create {
	iv.mutation.SetCreatedUnix(i)
	return iv
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableCreatedUnix(i *int64) *InformationV1Create {
	if i != nil {
		iv.SetCreatedUnix(*i)
	}
	return iv
}

// SetUpdatedUnix sets the "updated_unix" field.
func (iv *InformationV1Create) SetUpdatedUnix(i int64) *InformationV1Create {
	iv.mutation.SetUpdatedUnix(i)
	return iv
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableUpdatedUnix(i *int64) *InformationV1Create {
	if i != nil {
		iv.SetUpdatedUnix(*i)
	}
	return iv
}

// SetDeletedUnix sets the "deleted_unix" field.
func (iv *InformationV1Create) SetDeletedUnix(i int64) *InformationV1Create {
	iv.mutation.SetDeletedUnix(i)
	return iv
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableDeletedUnix(i *int64) *InformationV1Create {
	if i != nil {
		iv.SetDeletedUnix(*i)
	}
	return iv
}

// SetChannelID sets the "channel_id" field.
func (iv *InformationV1Create) SetChannelID(u uuid.UUID) *InformationV1Create {
	iv.mutation.SetChannelID(u)
	return iv
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableChannelID(u *uuid.UUID) *InformationV1Create {
	if u != nil {
		iv.SetChannelID(*u)
	}
	return iv
}

// SetRoot sets the "root" field.
func (iv *InformationV1Create) SetRoot(s string) *InformationV1Create {
	iv.mutation.SetRoot(s)
	return iv
}

// SetNillableRoot sets the "root" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableRoot(s *string) *InformationV1Create {
	if s != nil {
		iv.SetRoot(*s)
	}
	return iv
}

// SetThumb sets the "thumb" field.
func (iv *InformationV1Create) SetThumb(s string) *InformationV1Create {
	iv.mutation.SetThumb(s)
	return iv
}

// SetNillableThumb sets the "thumb" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableThumb(s *string) *InformationV1Create {
	if s != nil {
		iv.SetThumb(*s)
	}
	return iv
}

// SetThumbPath sets the "thumb_path" field.
func (iv *InformationV1Create) SetThumbPath(s string) *InformationV1Create {
	iv.mutation.SetThumbPath(s)
	return iv
}

// SetNillableThumbPath sets the "thumb_path" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableThumbPath(s *string) *InformationV1Create {
	if s != nil {
		iv.SetThumbPath(*s)
	}
	return iv
}

// SetPoster sets the "poster" field.
func (iv *InformationV1Create) SetPoster(s string) *InformationV1Create {
	iv.mutation.SetPoster(s)
	return iv
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (iv *InformationV1Create) SetNillablePoster(s *string) *InformationV1Create {
	if s != nil {
		iv.SetPoster(*s)
	}
	return iv
}

// SetPosterPath sets the "poster_path" field.
func (iv *InformationV1Create) SetPosterPath(s string) *InformationV1Create {
	iv.mutation.SetPosterPath(s)
	return iv
}

// SetNillablePosterPath sets the "poster_path" field if the given value is not nil.
func (iv *InformationV1Create) SetNillablePosterPath(s *string) *InformationV1Create {
	if s != nil {
		iv.SetPosterPath(*s)
	}
	return iv
}

// SetMedia sets the "media" field.
func (iv *InformationV1Create) SetMedia(s string) *InformationV1Create {
	iv.mutation.SetMedia(s)
	return iv
}

// SetNillableMedia sets the "media" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableMedia(s *string) *InformationV1Create {
	if s != nil {
		iv.SetMedia(*s)
	}
	return iv
}

// SetMediaPath sets the "media_path" field.
func (iv *InformationV1Create) SetMediaPath(s string) *InformationV1Create {
	iv.mutation.SetMediaPath(s)
	return iv
}

// SetNillableMediaPath sets the "media_path" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableMediaPath(s *string) *InformationV1Create {
	if s != nil {
		iv.SetMediaPath(*s)
	}
	return iv
}

// SetMediaIndex sets the "media_index" field.
func (iv *InformationV1Create) SetMediaIndex(s string) *InformationV1Create {
	iv.mutation.SetMediaIndex(s)
	return iv
}

// SetNillableMediaIndex sets the "media_index" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableMediaIndex(s *string) *InformationV1Create {
	if s != nil {
		iv.SetMediaIndex(*s)
	}
	return iv
}

// SetFrames sets the "frames" field.
func (iv *InformationV1Create) SetFrames(s string) *InformationV1Create {
	iv.mutation.SetFrames(s)
	return iv
}

// SetNillableFrames sets the "frames" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableFrames(s *string) *InformationV1Create {
	if s != nil {
		iv.SetFrames(*s)
	}
	return iv
}

// SetFramesPath sets the "frames_path" field.
func (iv *InformationV1Create) SetFramesPath(s string) *InformationV1Create {
	iv.mutation.SetFramesPath(s)
	return iv
}

// SetNillableFramesPath sets the "frames_path" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableFramesPath(s *string) *InformationV1Create {
	if s != nil {
		iv.SetFramesPath(*s)
	}
	return iv
}

// SetFramesParticulars sets the "frames_particulars" field.
func (iv *InformationV1Create) SetFramesParticulars(sf []schema.SkipFrame) *InformationV1Create {
	iv.mutation.SetFramesParticulars(sf)
	return iv
}

// SetTitle sets the "title" field.
func (iv *InformationV1Create) SetTitle(s string) *InformationV1Create {
	iv.mutation.SetTitle(s)
	return iv
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableTitle(s *string) *InformationV1Create {
	if s != nil {
		iv.SetTitle(*s)
	}
	return iv
}

// SetVideoNo sets the "video_no" field.
func (iv *InformationV1Create) SetVideoNo(s string) *InformationV1Create {
	iv.mutation.SetVideoNo(s)
	return iv
}

// SetNillableVideoNo sets the "video_no" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableVideoNo(s *string) *InformationV1Create {
	if s != nil {
		iv.SetVideoNo(*s)
	}
	return iv
}

// SetIntro sets the "intro" field.
func (iv *InformationV1Create) SetIntro(s string) *InformationV1Create {
	iv.mutation.SetIntro(s)
	return iv
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableIntro(s *string) *InformationV1Create {
	if s != nil {
		iv.SetIntro(*s)
	}
	return iv
}

// SetAlias sets the "alias" field.
func (iv *InformationV1Create) SetAlias(s []string) *InformationV1Create {
	iv.mutation.SetAlias(s)
	return iv
}

// SetRole sets the "role" field.
func (iv *InformationV1Create) SetRole(s []string) *InformationV1Create {
	iv.mutation.SetRole(s)
	return iv
}

// SetDirector sets the "director" field.
func (iv *InformationV1Create) SetDirector(s string) *InformationV1Create {
	iv.mutation.SetDirector(s)
	return iv
}

// SetNillableDirector sets the "director" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableDirector(s *string) *InformationV1Create {
	if s != nil {
		iv.SetDirector(*s)
	}
	return iv
}

// SetSystematics sets the "systematics" field.
func (iv *InformationV1Create) SetSystematics(s string) *InformationV1Create {
	iv.mutation.SetSystematics(s)
	return iv
}

// SetNillableSystematics sets the "systematics" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableSystematics(s *string) *InformationV1Create {
	if s != nil {
		iv.SetSystematics(*s)
	}
	return iv
}

// SetProducer sets the "producer" field.
func (iv *InformationV1Create) SetProducer(s string) *InformationV1Create {
	iv.mutation.SetProducer(s)
	return iv
}

// SetNillableProducer sets the "producer" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableProducer(s *string) *InformationV1Create {
	if s != nil {
		iv.SetProducer(*s)
	}
	return iv
}

// SetPublisher sets the "publisher" field.
func (iv *InformationV1Create) SetPublisher(s string) *InformationV1Create {
	iv.mutation.SetPublisher(s)
	return iv
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (iv *InformationV1Create) SetNillablePublisher(s *string) *InformationV1Create {
	if s != nil {
		iv.SetPublisher(*s)
	}
	return iv
}

// SetSortType sets the "sort_type" field.
func (iv *InformationV1Create) SetSortType(s string) *InformationV1Create {
	iv.mutation.SetSortType(s)
	return iv
}

// SetNillableSortType sets the "sort_type" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableSortType(s *string) *InformationV1Create {
	if s != nil {
		iv.SetSortType(*s)
	}
	return iv
}

// SetCaption sets the "caption" field.
func (iv *InformationV1Create) SetCaption(s string) *InformationV1Create {
	iv.mutation.SetCaption(s)
	return iv
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableCaption(s *string) *InformationV1Create {
	if s != nil {
		iv.SetCaption(*s)
	}
	return iv
}

// SetGroup sets the "group" field.
func (iv *InformationV1Create) SetGroup(s string) *InformationV1Create {
	iv.mutation.SetGroup(s)
	return iv
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableGroup(s *string) *InformationV1Create {
	if s != nil {
		iv.SetGroup(*s)
	}
	return iv
}

// SetIndex sets the "index" field.
func (iv *InformationV1Create) SetIndex(s string) *InformationV1Create {
	iv.mutation.SetIndex(s)
	return iv
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableIndex(s *string) *InformationV1Create {
	if s != nil {
		iv.SetIndex(*s)
	}
	return iv
}

// SetReleaseDate sets the "release_date" field.
func (iv *InformationV1Create) SetReleaseDate(s string) *InformationV1Create {
	iv.mutation.SetReleaseDate(s)
	return iv
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableReleaseDate(s *string) *InformationV1Create {
	if s != nil {
		iv.SetReleaseDate(*s)
	}
	return iv
}

// SetFormat sets the "format" field.
func (iv *InformationV1Create) SetFormat(s string) *InformationV1Create {
	iv.mutation.SetFormat(s)
	return iv
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableFormat(s *string) *InformationV1Create {
	if s != nil {
		iv.SetFormat(*s)
	}
	return iv
}

// SetSeries sets the "series" field.
func (iv *InformationV1Create) SetSeries(s string) *InformationV1Create {
	iv.mutation.SetSeries(s)
	return iv
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableSeries(s *string) *InformationV1Create {
	if s != nil {
		iv.SetSeries(*s)
	}
	return iv
}

// SetTags sets the "tags" field.
func (iv *InformationV1Create) SetTags(s []string) *InformationV1Create {
	iv.mutation.SetTags(s)
	return iv
}

// SetLength sets the "length" field.
func (iv *InformationV1Create) SetLength(s string) *InformationV1Create {
	iv.mutation.SetLength(s)
	return iv
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableLength(s *string) *InformationV1Create {
	if s != nil {
		iv.SetLength(*s)
	}
	return iv
}

// SetSample sets the "sample" field.
func (iv *InformationV1Create) SetSample(s []string) *InformationV1Create {
	iv.mutation.SetSample(s)
	return iv
}

// SetUncensored sets the "uncensored" field.
func (iv *InformationV1Create) SetUncensored(s string) *InformationV1Create {
	iv.mutation.SetUncensored(s)
	return iv
}

// SetNillableUncensored sets the "uncensored" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableUncensored(s *string) *InformationV1Create {
	if s != nil {
		iv.SetUncensored(*s)
	}
	return iv
}

// SetSeason sets the "season" field.
func (iv *InformationV1Create) SetSeason(s string) *InformationV1Create {
	iv.mutation.SetSeason(s)
	return iv
}

// SetNillableSeason sets the "season" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableSeason(s *string) *InformationV1Create {
	if s != nil {
		iv.SetSeason(*s)
	}
	return iv
}

// SetTotalEpisode sets the "total_episode" field.
func (iv *InformationV1Create) SetTotalEpisode(s string) *InformationV1Create {
	iv.mutation.SetTotalEpisode(s)
	return iv
}

// SetNillableTotalEpisode sets the "total_episode" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableTotalEpisode(s *string) *InformationV1Create {
	if s != nil {
		iv.SetTotalEpisode(*s)
	}
	return iv
}

// SetEpisode sets the "episode" field.
func (iv *InformationV1Create) SetEpisode(s string) *InformationV1Create {
	iv.mutation.SetEpisode(s)
	return iv
}

// SetNillableEpisode sets the "episode" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableEpisode(s *string) *InformationV1Create {
	if s != nil {
		iv.SetEpisode(*s)
	}
	return iv
}

// SetLanguage sets the "language" field.
func (iv *InformationV1Create) SetLanguage(s string) *InformationV1Create {
	iv.mutation.SetLanguage(s)
	return iv
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableLanguage(s *string) *InformationV1Create {
	if s != nil {
		iv.SetLanguage(*s)
	}
	return iv
}

// SetSharpness sets the "sharpness" field.
func (iv *InformationV1Create) SetSharpness(s string) *InformationV1Create {
	iv.mutation.SetSharpness(s)
	return iv
}

// SetNillableSharpness sets the "sharpness" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableSharpness(s *string) *InformationV1Create {
	if s != nil {
		iv.SetSharpness(*s)
	}
	return iv
}

// SetWatermark sets the "watermark" field.
func (iv *InformationV1Create) SetWatermark(b bool) *InformationV1Create {
	iv.mutation.SetWatermark(b)
	return iv
}

// SetNillableWatermark sets the "watermark" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableWatermark(b *bool) *InformationV1Create {
	if b != nil {
		iv.SetWatermark(*b)
	}
	return iv
}

// SetPermission sets the "permission" field.
func (iv *InformationV1Create) SetPermission(i informationv1.Permission) *InformationV1Create {
	iv.mutation.SetPermission(i)
	return iv
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (iv *InformationV1Create) SetNillablePermission(i *informationv1.Permission) *InformationV1Create {
	if i != nil {
		iv.SetPermission(*i)
	}
	return iv
}

// SetSign sets the "sign" field.
func (iv *InformationV1Create) SetSign(s string) *InformationV1Create {
	iv.mutation.SetSign(s)
	return iv
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableSign(s *string) *InformationV1Create {
	if s != nil {
		iv.SetSign(*s)
	}
	return iv
}

// SetTotalBlocks sets the "total_blocks" field.
func (iv *InformationV1Create) SetTotalBlocks(i int) *InformationV1Create {
	iv.mutation.SetTotalBlocks(i)
	return iv
}

// SetNillableTotalBlocks sets the "total_blocks" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableTotalBlocks(i *int) *InformationV1Create {
	if i != nil {
		iv.SetTotalBlocks(*i)
	}
	return iv
}

// SetID sets the "id" field.
func (iv *InformationV1Create) SetID(u uuid.UUID) *InformationV1Create {
	iv.mutation.SetID(u)
	return iv
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iv *InformationV1Create) SetNillableID(u *uuid.UUID) *InformationV1Create {
	if u != nil {
		iv.SetID(*u)
	}
	return iv
}

// AddTopListIDs adds the "top_lists" edge to the TopList entity by IDs.
func (iv *InformationV1Create) AddTopListIDs(ids ...uuid.UUID) *InformationV1Create {
	iv.mutation.AddTopListIDs(ids...)
	return iv
}

// AddTopLists adds the "top_lists" edges to the TopList entity.
func (iv *InformationV1Create) AddTopLists(t ...*TopList) *InformationV1Create {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iv.AddTopListIDs(ids...)
}

// SetChannel sets the "channel" edge to the Channel entity.
func (iv *InformationV1Create) SetChannel(c *Channel) *InformationV1Create {
	return iv.SetChannelID(c.ID)
}

// Mutation returns the InformationV1Mutation object of the builder.
func (iv *InformationV1Create) Mutation() *InformationV1Mutation {
	return iv.mutation
}

// Save creates the InformationV1 in the database.
func (iv *InformationV1Create) Save(ctx context.Context) (*InformationV1, error) {
	var (
		err  error
		node *InformationV1
	)
	iv.defaults()
	if len(iv.hooks) == 0 {
		if err = iv.check(); err != nil {
			return nil, err
		}
		node, err = iv.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InformationV1Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iv.check(); err != nil {
				return nil, err
			}
			iv.mutation = mutation
			if node, err = iv.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iv.hooks) - 1; i >= 0; i-- {
			if iv.hooks[i] == nil {
				return nil, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = iv.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iv.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*InformationV1)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InformationV1Mutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iv *InformationV1Create) SaveX(ctx context.Context) *InformationV1 {
	v, err := iv.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iv *InformationV1Create) Exec(ctx context.Context) error {
	_, err := iv.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iv *InformationV1Create) ExecX(ctx context.Context) {
	if err := iv.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iv *InformationV1Create) defaults() {
	if _, ok := iv.mutation.CreatedUnix(); !ok {
		v := informationv1.DefaultCreatedUnix
		iv.mutation.SetCreatedUnix(v)
	}
	if _, ok := iv.mutation.UpdatedUnix(); !ok {
		v := informationv1.DefaultUpdatedUnix
		iv.mutation.SetUpdatedUnix(v)
	}
	if _, ok := iv.mutation.Root(); !ok {
		v := informationv1.DefaultRoot
		iv.mutation.SetRoot(v)
	}
	if _, ok := iv.mutation.Thumb(); !ok {
		v := informationv1.DefaultThumb
		iv.mutation.SetThumb(v)
	}
	if _, ok := iv.mutation.ThumbPath(); !ok {
		v := informationv1.DefaultThumbPath
		iv.mutation.SetThumbPath(v)
	}
	if _, ok := iv.mutation.Poster(); !ok {
		v := informationv1.DefaultPoster
		iv.mutation.SetPoster(v)
	}
	if _, ok := iv.mutation.PosterPath(); !ok {
		v := informationv1.DefaultPosterPath
		iv.mutation.SetPosterPath(v)
	}
	if _, ok := iv.mutation.Media(); !ok {
		v := informationv1.DefaultMedia
		iv.mutation.SetMedia(v)
	}
	if _, ok := iv.mutation.MediaPath(); !ok {
		v := informationv1.DefaultMediaPath
		iv.mutation.SetMediaPath(v)
	}
	if _, ok := iv.mutation.MediaIndex(); !ok {
		v := informationv1.DefaultMediaIndex
		iv.mutation.SetMediaIndex(v)
	}
	if _, ok := iv.mutation.Frames(); !ok {
		v := informationv1.DefaultFrames
		iv.mutation.SetFrames(v)
	}
	if _, ok := iv.mutation.FramesPath(); !ok {
		v := informationv1.DefaultFramesPath
		iv.mutation.SetFramesPath(v)
	}
	if _, ok := iv.mutation.Title(); !ok {
		v := informationv1.DefaultTitle
		iv.mutation.SetTitle(v)
	}
	if _, ok := iv.mutation.VideoNo(); !ok {
		v := informationv1.DefaultVideoNo
		iv.mutation.SetVideoNo(v)
	}
	if _, ok := iv.mutation.Intro(); !ok {
		v := informationv1.DefaultIntro
		iv.mutation.SetIntro(v)
	}
	if _, ok := iv.mutation.Director(); !ok {
		v := informationv1.DefaultDirector
		iv.mutation.SetDirector(v)
	}
	if _, ok := iv.mutation.Systematics(); !ok {
		v := informationv1.DefaultSystematics
		iv.mutation.SetSystematics(v)
	}
	if _, ok := iv.mutation.Producer(); !ok {
		v := informationv1.DefaultProducer
		iv.mutation.SetProducer(v)
	}
	if _, ok := iv.mutation.Publisher(); !ok {
		v := informationv1.DefaultPublisher
		iv.mutation.SetPublisher(v)
	}
	if _, ok := iv.mutation.SortType(); !ok {
		v := informationv1.DefaultSortType
		iv.mutation.SetSortType(v)
	}
	if _, ok := iv.mutation.Caption(); !ok {
		v := informationv1.DefaultCaption
		iv.mutation.SetCaption(v)
	}
	if _, ok := iv.mutation.Group(); !ok {
		v := informationv1.DefaultGroup
		iv.mutation.SetGroup(v)
	}
	if _, ok := iv.mutation.Index(); !ok {
		v := informationv1.DefaultIndex
		iv.mutation.SetIndex(v)
	}
	if _, ok := iv.mutation.ReleaseDate(); !ok {
		v := informationv1.DefaultReleaseDate
		iv.mutation.SetReleaseDate(v)
	}
	if _, ok := iv.mutation.Format(); !ok {
		v := informationv1.DefaultFormat
		iv.mutation.SetFormat(v)
	}
	if _, ok := iv.mutation.Series(); !ok {
		v := informationv1.DefaultSeries
		iv.mutation.SetSeries(v)
	}
	if _, ok := iv.mutation.Length(); !ok {
		v := informationv1.DefaultLength
		iv.mutation.SetLength(v)
	}
	if _, ok := iv.mutation.Uncensored(); !ok {
		v := informationv1.DefaultUncensored
		iv.mutation.SetUncensored(v)
	}
	if _, ok := iv.mutation.Season(); !ok {
		v := informationv1.DefaultSeason
		iv.mutation.SetSeason(v)
	}
	if _, ok := iv.mutation.TotalEpisode(); !ok {
		v := informationv1.DefaultTotalEpisode
		iv.mutation.SetTotalEpisode(v)
	}
	if _, ok := iv.mutation.Episode(); !ok {
		v := informationv1.DefaultEpisode
		iv.mutation.SetEpisode(v)
	}
	if _, ok := iv.mutation.Language(); !ok {
		v := informationv1.DefaultLanguage
		iv.mutation.SetLanguage(v)
	}
	if _, ok := iv.mutation.Sharpness(); !ok {
		v := informationv1.DefaultSharpness
		iv.mutation.SetSharpness(v)
	}
	if _, ok := iv.mutation.Watermark(); !ok {
		v := informationv1.DefaultWatermark
		iv.mutation.SetWatermark(v)
	}
	if _, ok := iv.mutation.Permission(); !ok {
		v := informationv1.DefaultPermission
		iv.mutation.SetPermission(v)
	}
	if _, ok := iv.mutation.TotalBlocks(); !ok {
		v := informationv1.DefaultTotalBlocks
		iv.mutation.SetTotalBlocks(v)
	}
	if _, ok := iv.mutation.ID(); !ok {
		v := informationv1.DefaultID()
		iv.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iv *InformationV1Create) check() error {
	if _, ok := iv.mutation.CreatedUnix(); !ok {
		return &ValidationError{Name: "created_unix", err: errors.New(`media: missing required field "InformationV1.created_unix"`)}
	}
	if _, ok := iv.mutation.UpdatedUnix(); !ok {
		return &ValidationError{Name: "updated_unix", err: errors.New(`media: missing required field "InformationV1.updated_unix"`)}
	}
	if _, ok := iv.mutation.Root(); !ok {
		return &ValidationError{Name: "root", err: errors.New(`media: missing required field "InformationV1.root"`)}
	}
	if _, ok := iv.mutation.Thumb(); !ok {
		return &ValidationError{Name: "thumb", err: errors.New(`media: missing required field "InformationV1.thumb"`)}
	}
	if _, ok := iv.mutation.ThumbPath(); !ok {
		return &ValidationError{Name: "thumb_path", err: errors.New(`media: missing required field "InformationV1.thumb_path"`)}
	}
	if _, ok := iv.mutation.Poster(); !ok {
		return &ValidationError{Name: "poster", err: errors.New(`media: missing required field "InformationV1.poster"`)}
	}
	if _, ok := iv.mutation.PosterPath(); !ok {
		return &ValidationError{Name: "poster_path", err: errors.New(`media: missing required field "InformationV1.poster_path"`)}
	}
	if _, ok := iv.mutation.Media(); !ok {
		return &ValidationError{Name: "media", err: errors.New(`media: missing required field "InformationV1.media"`)}
	}
	if _, ok := iv.mutation.MediaPath(); !ok {
		return &ValidationError{Name: "media_path", err: errors.New(`media: missing required field "InformationV1.media_path"`)}
	}
	if _, ok := iv.mutation.MediaIndex(); !ok {
		return &ValidationError{Name: "media_index", err: errors.New(`media: missing required field "InformationV1.media_index"`)}
	}
	if _, ok := iv.mutation.Frames(); !ok {
		return &ValidationError{Name: "frames", err: errors.New(`media: missing required field "InformationV1.frames"`)}
	}
	if _, ok := iv.mutation.FramesPath(); !ok {
		return &ValidationError{Name: "frames_path", err: errors.New(`media: missing required field "InformationV1.frames_path"`)}
	}
	if _, ok := iv.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`media: missing required field "InformationV1.title"`)}
	}
	if _, ok := iv.mutation.VideoNo(); !ok {
		return &ValidationError{Name: "video_no", err: errors.New(`media: missing required field "InformationV1.video_no"`)}
	}
	if _, ok := iv.mutation.Intro(); !ok {
		return &ValidationError{Name: "intro", err: errors.New(`media: missing required field "InformationV1.intro"`)}
	}
	if _, ok := iv.mutation.Alias(); !ok {
		return &ValidationError{Name: "alias", err: errors.New(`media: missing required field "InformationV1.alias"`)}
	}
	if _, ok := iv.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`media: missing required field "InformationV1.role"`)}
	}
	if _, ok := iv.mutation.Director(); !ok {
		return &ValidationError{Name: "director", err: errors.New(`media: missing required field "InformationV1.director"`)}
	}
	if _, ok := iv.mutation.Systematics(); !ok {
		return &ValidationError{Name: "systematics", err: errors.New(`media: missing required field "InformationV1.systematics"`)}
	}
	if _, ok := iv.mutation.Producer(); !ok {
		return &ValidationError{Name: "producer", err: errors.New(`media: missing required field "InformationV1.producer"`)}
	}
	if _, ok := iv.mutation.Publisher(); !ok {
		return &ValidationError{Name: "publisher", err: errors.New(`media: missing required field "InformationV1.publisher"`)}
	}
	if _, ok := iv.mutation.SortType(); !ok {
		return &ValidationError{Name: "sort_type", err: errors.New(`media: missing required field "InformationV1.sort_type"`)}
	}
	if _, ok := iv.mutation.Caption(); !ok {
		return &ValidationError{Name: "caption", err: errors.New(`media: missing required field "InformationV1.caption"`)}
	}
	if _, ok := iv.mutation.Group(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`media: missing required field "InformationV1.group"`)}
	}
	if _, ok := iv.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`media: missing required field "InformationV1.index"`)}
	}
	if _, ok := iv.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "release_date", err: errors.New(`media: missing required field "InformationV1.release_date"`)}
	}
	if _, ok := iv.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`media: missing required field "InformationV1.format"`)}
	}
	if _, ok := iv.mutation.Series(); !ok {
		return &ValidationError{Name: "series", err: errors.New(`media: missing required field "InformationV1.series"`)}
	}
	if _, ok := iv.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`media: missing required field "InformationV1.tags"`)}
	}
	if _, ok := iv.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`media: missing required field "InformationV1.length"`)}
	}
	if _, ok := iv.mutation.Sample(); !ok {
		return &ValidationError{Name: "sample", err: errors.New(`media: missing required field "InformationV1.sample"`)}
	}
	if _, ok := iv.mutation.Uncensored(); !ok {
		return &ValidationError{Name: "uncensored", err: errors.New(`media: missing required field "InformationV1.uncensored"`)}
	}
	if _, ok := iv.mutation.Season(); !ok {
		return &ValidationError{Name: "season", err: errors.New(`media: missing required field "InformationV1.season"`)}
	}
	if _, ok := iv.mutation.TotalEpisode(); !ok {
		return &ValidationError{Name: "total_episode", err: errors.New(`media: missing required field "InformationV1.total_episode"`)}
	}
	if _, ok := iv.mutation.Episode(); !ok {
		return &ValidationError{Name: "episode", err: errors.New(`media: missing required field "InformationV1.episode"`)}
	}
	if _, ok := iv.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`media: missing required field "InformationV1.language"`)}
	}
	if _, ok := iv.mutation.Sharpness(); !ok {
		return &ValidationError{Name: "sharpness", err: errors.New(`media: missing required field "InformationV1.sharpness"`)}
	}
	if _, ok := iv.mutation.Watermark(); !ok {
		return &ValidationError{Name: "watermark", err: errors.New(`media: missing required field "InformationV1.watermark"`)}
	}
	if _, ok := iv.mutation.Permission(); !ok {
		return &ValidationError{Name: "permission", err: errors.New(`media: missing required field "InformationV1.permission"`)}
	}
	if v, ok := iv.mutation.Permission(); ok {
		if err := informationv1.PermissionValidator(v); err != nil {
			return &ValidationError{Name: "permission", err: fmt.Errorf(`media: validator failed for field "InformationV1.permission": %w`, err)}
		}
	}
	if _, ok := iv.mutation.TotalBlocks(); !ok {
		return &ValidationError{Name: "total_blocks", err: errors.New(`media: missing required field "InformationV1.total_blocks"`)}
	}
	return nil
}

func (iv *InformationV1Create) sqlSave(ctx context.Context) (*InformationV1, error) {
	_node, _spec := iv.createSpec()
	if err := sqlgraph.CreateNode(ctx, iv.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (iv *InformationV1Create) createSpec() (*InformationV1, *sqlgraph.CreateSpec) {
	var (
		_node = &InformationV1{config: iv.config}
		_spec = &sqlgraph.CreateSpec{
			Table: informationv1.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: informationv1.FieldID,
			},
		}
	)
	_spec.OnConflict = iv.conflict
	if id, ok := iv.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iv.mutation.CreatedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldCreatedUnix,
		})
		_node.CreatedUnix = value
	}
	if value, ok := iv.mutation.UpdatedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldUpdatedUnix,
		})
		_node.UpdatedUnix = value
	}
	if value, ok := iv.mutation.DeletedUnix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldDeletedUnix,
		})
		_node.DeletedUnix = value
	}
	if value, ok := iv.mutation.Root(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldRoot,
		})
		_node.Root = value
	}
	if value, ok := iv.mutation.Thumb(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldThumb,
		})
		_node.Thumb = value
	}
	if value, ok := iv.mutation.ThumbPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldThumbPath,
		})
		_node.ThumbPath = value
	}
	if value, ok := iv.mutation.Poster(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPoster,
		})
		_node.Poster = value
	}
	if value, ok := iv.mutation.PosterPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPosterPath,
		})
		_node.PosterPath = value
	}
	if value, ok := iv.mutation.Media(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMedia,
		})
		_node.Media = value
	}
	if value, ok := iv.mutation.MediaPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMediaPath,
		})
		_node.MediaPath = value
	}
	if value, ok := iv.mutation.MediaIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMediaIndex,
		})
		_node.MediaIndex = value
	}
	if value, ok := iv.mutation.Frames(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFrames,
		})
		_node.Frames = value
	}
	if value, ok := iv.mutation.FramesPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFramesPath,
		})
		_node.FramesPath = value
	}
	if value, ok := iv.mutation.FramesParticulars(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldFramesParticulars,
		})
		_node.FramesParticulars = value
	}
	if value, ok := iv.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := iv.mutation.VideoNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldVideoNo,
		})
		_node.VideoNo = value
	}
	if value, ok := iv.mutation.Intro(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldIntro,
		})
		_node.Intro = value
	}
	if value, ok := iv.mutation.Alias(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldAlias,
		})
		_node.Alias = value
	}
	if value, ok := iv.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := iv.mutation.Director(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldDirector,
		})
		_node.Director = value
	}
	if value, ok := iv.mutation.Systematics(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSystematics,
		})
		_node.Systematics = value
	}
	if value, ok := iv.mutation.Producer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldProducer,
		})
		_node.Producer = value
	}
	if value, ok := iv.mutation.Publisher(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPublisher,
		})
		_node.Publisher = value
	}
	if value, ok := iv.mutation.SortType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSortType,
		})
		_node.SortType = value
	}
	if value, ok := iv.mutation.Caption(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldCaption,
		})
		_node.Caption = value
	}
	if value, ok := iv.mutation.Group(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldGroup,
		})
		_node.Group = value
	}
	if value, ok := iv.mutation.Index(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldIndex,
		})
		_node.Index = value
	}
	if value, ok := iv.mutation.ReleaseDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldReleaseDate,
		})
		_node.ReleaseDate = value
	}
	if value, ok := iv.mutation.Format(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFormat,
		})
		_node.Format = value
	}
	if value, ok := iv.mutation.Series(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSeries,
		})
		_node.Series = value
	}
	if value, ok := iv.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := iv.mutation.Length(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldLength,
		})
		_node.Length = value
	}
	if value, ok := iv.mutation.Sample(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldSample,
		})
		_node.Sample = value
	}
	if value, ok := iv.mutation.Uncensored(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldUncensored,
		})
		_node.Uncensored = value
	}
	if value, ok := iv.mutation.Season(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSeason,
		})
		_node.Season = value
	}
	if value, ok := iv.mutation.TotalEpisode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldTotalEpisode,
		})
		_node.TotalEpisode = value
	}
	if value, ok := iv.mutation.Episode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldEpisode,
		})
		_node.Episode = value
	}
	if value, ok := iv.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := iv.mutation.Sharpness(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSharpness,
		})
		_node.Sharpness = value
	}
	if value, ok := iv.mutation.Watermark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: informationv1.FieldWatermark,
		})
		_node.Watermark = value
	}
	if value, ok := iv.mutation.Permission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: informationv1.FieldPermission,
		})
		_node.Permission = value
	}
	if value, ok := iv.mutation.Sign(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSign,
		})
		_node.Sign = value
	}
	if value, ok := iv.mutation.TotalBlocks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: informationv1.FieldTotalBlocks,
		})
		_node.TotalBlocks = value
	}
	if nodes := iv.mutation.TopListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   informationv1.TopListsTable,
			Columns: []string{informationv1.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iv.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   informationv1.ChannelTable,
			Columns: []string{informationv1.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChannelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InformationV1.Create().
//		SetCreatedUnix(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InformationV1Upsert) {
//			SetCreatedUnix(v+v).
//		}).
//		Exec(ctx)
func (iv *InformationV1Create) OnConflict(opts ...sql.ConflictOption) *InformationV1UpsertOne {
	iv.conflict = opts
	return &InformationV1UpsertOne{
		create: iv,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InformationV1.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iv *InformationV1Create) OnConflictColumns(columns ...string) *InformationV1UpsertOne {
	iv.conflict = append(iv.conflict, sql.ConflictColumns(columns...))
	return &InformationV1UpsertOne{
		create: iv,
	}
}

type (
	// InformationV1UpsertOne is the builder for "upsert"-ing
	//  one InformationV1 node.
	InformationV1UpsertOne struct {
		create *InformationV1Create
	}

	// InformationV1Upsert is the "OnConflict" setter.
	InformationV1Upsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedUnix sets the "created_unix" field.
func (u *InformationV1Upsert) SetCreatedUnix(v int64) *InformationV1Upsert {
	u.Set(informationv1.FieldCreatedUnix, v)
	return u
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateCreatedUnix() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldCreatedUnix)
	return u
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *InformationV1Upsert) AddCreatedUnix(v int64) *InformationV1Upsert {
	u.Add(informationv1.FieldCreatedUnix, v)
	return u
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *InformationV1Upsert) SetUpdatedUnix(v int64) *InformationV1Upsert {
	u.Set(informationv1.FieldUpdatedUnix, v)
	return u
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateUpdatedUnix() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldUpdatedUnix)
	return u
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *InformationV1Upsert) AddUpdatedUnix(v int64) *InformationV1Upsert {
	u.Add(informationv1.FieldUpdatedUnix, v)
	return u
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *InformationV1Upsert) SetDeletedUnix(v int64) *InformationV1Upsert {
	u.Set(informationv1.FieldDeletedUnix, v)
	return u
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateDeletedUnix() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldDeletedUnix)
	return u
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *InformationV1Upsert) AddDeletedUnix(v int64) *InformationV1Upsert {
	u.Add(informationv1.FieldDeletedUnix, v)
	return u
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *InformationV1Upsert) ClearDeletedUnix() *InformationV1Upsert {
	u.SetNull(informationv1.FieldDeletedUnix)
	return u
}

// SetChannelID sets the "channel_id" field.
func (u *InformationV1Upsert) SetChannelID(v uuid.UUID) *InformationV1Upsert {
	u.Set(informationv1.FieldChannelID, v)
	return u
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateChannelID() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldChannelID)
	return u
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *InformationV1Upsert) ClearChannelID() *InformationV1Upsert {
	u.SetNull(informationv1.FieldChannelID)
	return u
}

// SetRoot sets the "root" field.
func (u *InformationV1Upsert) SetRoot(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldRoot, v)
	return u
}

// UpdateRoot sets the "root" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateRoot() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldRoot)
	return u
}

// SetThumb sets the "thumb" field.
func (u *InformationV1Upsert) SetThumb(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldThumb, v)
	return u
}

// UpdateThumb sets the "thumb" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateThumb() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldThumb)
	return u
}

// SetThumbPath sets the "thumb_path" field.
func (u *InformationV1Upsert) SetThumbPath(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldThumbPath, v)
	return u
}

// UpdateThumbPath sets the "thumb_path" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateThumbPath() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldThumbPath)
	return u
}

// SetPoster sets the "poster" field.
func (u *InformationV1Upsert) SetPoster(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldPoster, v)
	return u
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdatePoster() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldPoster)
	return u
}

// SetPosterPath sets the "poster_path" field.
func (u *InformationV1Upsert) SetPosterPath(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldPosterPath, v)
	return u
}

// UpdatePosterPath sets the "poster_path" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdatePosterPath() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldPosterPath)
	return u
}

// SetMedia sets the "media" field.
func (u *InformationV1Upsert) SetMedia(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldMedia, v)
	return u
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateMedia() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldMedia)
	return u
}

// SetMediaPath sets the "media_path" field.
func (u *InformationV1Upsert) SetMediaPath(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldMediaPath, v)
	return u
}

// UpdateMediaPath sets the "media_path" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateMediaPath() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldMediaPath)
	return u
}

// SetMediaIndex sets the "media_index" field.
func (u *InformationV1Upsert) SetMediaIndex(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldMediaIndex, v)
	return u
}

// UpdateMediaIndex sets the "media_index" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateMediaIndex() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldMediaIndex)
	return u
}

// SetFrames sets the "frames" field.
func (u *InformationV1Upsert) SetFrames(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldFrames, v)
	return u
}

// UpdateFrames sets the "frames" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateFrames() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldFrames)
	return u
}

// SetFramesPath sets the "frames_path" field.
func (u *InformationV1Upsert) SetFramesPath(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldFramesPath, v)
	return u
}

// UpdateFramesPath sets the "frames_path" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateFramesPath() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldFramesPath)
	return u
}

// SetFramesParticulars sets the "frames_particulars" field.
func (u *InformationV1Upsert) SetFramesParticulars(v []schema.SkipFrame) *InformationV1Upsert {
	u.Set(informationv1.FieldFramesParticulars, v)
	return u
}

// UpdateFramesParticulars sets the "frames_particulars" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateFramesParticulars() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldFramesParticulars)
	return u
}

// ClearFramesParticulars clears the value of the "frames_particulars" field.
func (u *InformationV1Upsert) ClearFramesParticulars() *InformationV1Upsert {
	u.SetNull(informationv1.FieldFramesParticulars)
	return u
}

// SetTitle sets the "title" field.
func (u *InformationV1Upsert) SetTitle(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateTitle() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldTitle)
	return u
}

// SetVideoNo sets the "video_no" field.
func (u *InformationV1Upsert) SetVideoNo(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldVideoNo, v)
	return u
}

// UpdateVideoNo sets the "video_no" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateVideoNo() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldVideoNo)
	return u
}

// SetIntro sets the "intro" field.
func (u *InformationV1Upsert) SetIntro(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldIntro, v)
	return u
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateIntro() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldIntro)
	return u
}

// SetAlias sets the "alias" field.
func (u *InformationV1Upsert) SetAlias(v []string) *InformationV1Upsert {
	u.Set(informationv1.FieldAlias, v)
	return u
}

// UpdateAlias sets the "alias" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateAlias() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldAlias)
	return u
}

// SetRole sets the "role" field.
func (u *InformationV1Upsert) SetRole(v []string) *InformationV1Upsert {
	u.Set(informationv1.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateRole() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldRole)
	return u
}

// SetDirector sets the "director" field.
func (u *InformationV1Upsert) SetDirector(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldDirector, v)
	return u
}

// UpdateDirector sets the "director" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateDirector() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldDirector)
	return u
}

// SetSystematics sets the "systematics" field.
func (u *InformationV1Upsert) SetSystematics(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldSystematics, v)
	return u
}

// UpdateSystematics sets the "systematics" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateSystematics() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldSystematics)
	return u
}

// SetProducer sets the "producer" field.
func (u *InformationV1Upsert) SetProducer(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldProducer, v)
	return u
}

// UpdateProducer sets the "producer" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateProducer() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldProducer)
	return u
}

// SetPublisher sets the "publisher" field.
func (u *InformationV1Upsert) SetPublisher(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldPublisher, v)
	return u
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdatePublisher() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldPublisher)
	return u
}

// SetSortType sets the "sort_type" field.
func (u *InformationV1Upsert) SetSortType(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldSortType, v)
	return u
}

// UpdateSortType sets the "sort_type" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateSortType() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldSortType)
	return u
}

// SetCaption sets the "caption" field.
func (u *InformationV1Upsert) SetCaption(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldCaption, v)
	return u
}

// UpdateCaption sets the "caption" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateCaption() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldCaption)
	return u
}

// SetGroup sets the "group" field.
func (u *InformationV1Upsert) SetGroup(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldGroup, v)
	return u
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateGroup() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldGroup)
	return u
}

// SetIndex sets the "index" field.
func (u *InformationV1Upsert) SetIndex(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateIndex() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldIndex)
	return u
}

// SetReleaseDate sets the "release_date" field.
func (u *InformationV1Upsert) SetReleaseDate(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldReleaseDate, v)
	return u
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateReleaseDate() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldReleaseDate)
	return u
}

// SetFormat sets the "format" field.
func (u *InformationV1Upsert) SetFormat(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateFormat() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldFormat)
	return u
}

// SetSeries sets the "series" field.
func (u *InformationV1Upsert) SetSeries(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldSeries, v)
	return u
}

// UpdateSeries sets the "series" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateSeries() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldSeries)
	return u
}

// SetTags sets the "tags" field.
func (u *InformationV1Upsert) SetTags(v []string) *InformationV1Upsert {
	u.Set(informationv1.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateTags() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldTags)
	return u
}

// SetLength sets the "length" field.
func (u *InformationV1Upsert) SetLength(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldLength, v)
	return u
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateLength() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldLength)
	return u
}

// SetSample sets the "sample" field.
func (u *InformationV1Upsert) SetSample(v []string) *InformationV1Upsert {
	u.Set(informationv1.FieldSample, v)
	return u
}

// UpdateSample sets the "sample" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateSample() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldSample)
	return u
}

// SetUncensored sets the "uncensored" field.
func (u *InformationV1Upsert) SetUncensored(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldUncensored, v)
	return u
}

// UpdateUncensored sets the "uncensored" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateUncensored() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldUncensored)
	return u
}

// SetSeason sets the "season" field.
func (u *InformationV1Upsert) SetSeason(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldSeason, v)
	return u
}

// UpdateSeason sets the "season" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateSeason() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldSeason)
	return u
}

// SetTotalEpisode sets the "total_episode" field.
func (u *InformationV1Upsert) SetTotalEpisode(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldTotalEpisode, v)
	return u
}

// UpdateTotalEpisode sets the "total_episode" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateTotalEpisode() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldTotalEpisode)
	return u
}

// SetEpisode sets the "episode" field.
func (u *InformationV1Upsert) SetEpisode(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldEpisode, v)
	return u
}

// UpdateEpisode sets the "episode" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateEpisode() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldEpisode)
	return u
}

// SetLanguage sets the "language" field.
func (u *InformationV1Upsert) SetLanguage(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateLanguage() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldLanguage)
	return u
}

// SetSharpness sets the "sharpness" field.
func (u *InformationV1Upsert) SetSharpness(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldSharpness, v)
	return u
}

// UpdateSharpness sets the "sharpness" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateSharpness() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldSharpness)
	return u
}

// SetWatermark sets the "watermark" field.
func (u *InformationV1Upsert) SetWatermark(v bool) *InformationV1Upsert {
	u.Set(informationv1.FieldWatermark, v)
	return u
}

// UpdateWatermark sets the "watermark" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateWatermark() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldWatermark)
	return u
}

// SetPermission sets the "permission" field.
func (u *InformationV1Upsert) SetPermission(v informationv1.Permission) *InformationV1Upsert {
	u.Set(informationv1.FieldPermission, v)
	return u
}

// UpdatePermission sets the "permission" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdatePermission() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldPermission)
	return u
}

// SetSign sets the "sign" field.
func (u *InformationV1Upsert) SetSign(v string) *InformationV1Upsert {
	u.Set(informationv1.FieldSign, v)
	return u
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateSign() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldSign)
	return u
}

// ClearSign clears the value of the "sign" field.
func (u *InformationV1Upsert) ClearSign() *InformationV1Upsert {
	u.SetNull(informationv1.FieldSign)
	return u
}

// SetTotalBlocks sets the "total_blocks" field.
func (u *InformationV1Upsert) SetTotalBlocks(v int) *InformationV1Upsert {
	u.Set(informationv1.FieldTotalBlocks, v)
	return u
}

// UpdateTotalBlocks sets the "total_blocks" field to the value that was provided on create.
func (u *InformationV1Upsert) UpdateTotalBlocks() *InformationV1Upsert {
	u.SetExcluded(informationv1.FieldTotalBlocks)
	return u
}

// AddTotalBlocks adds v to the "total_blocks" field.
func (u *InformationV1Upsert) AddTotalBlocks(v int) *InformationV1Upsert {
	u.Add(informationv1.FieldTotalBlocks, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InformationV1.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(informationv1.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InformationV1UpsertOne) UpdateNewValues() *InformationV1UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(informationv1.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InformationV1.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InformationV1UpsertOne) Ignore() *InformationV1UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InformationV1UpsertOne) DoNothing() *InformationV1UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InformationV1Create.OnConflict
// documentation for more info.
func (u *InformationV1UpsertOne) Update(set func(*InformationV1Upsert)) *InformationV1UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InformationV1Upsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedUnix sets the "created_unix" field.
func (u *InformationV1UpsertOne) SetCreatedUnix(v int64) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetCreatedUnix(v)
	})
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *InformationV1UpsertOne) AddCreatedUnix(v int64) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.AddCreatedUnix(v)
	})
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateCreatedUnix() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateCreatedUnix()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *InformationV1UpsertOne) SetUpdatedUnix(v int64) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *InformationV1UpsertOne) AddUpdatedUnix(v int64) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateUpdatedUnix() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateUpdatedUnix()
	})
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *InformationV1UpsertOne) SetDeletedUnix(v int64) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetDeletedUnix(v)
	})
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *InformationV1UpsertOne) AddDeletedUnix(v int64) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.AddDeletedUnix(v)
	})
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateDeletedUnix() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateDeletedUnix()
	})
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *InformationV1UpsertOne) ClearDeletedUnix() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.ClearDeletedUnix()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *InformationV1UpsertOne) SetChannelID(v uuid.UUID) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateChannelID() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateChannelID()
	})
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *InformationV1UpsertOne) ClearChannelID() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.ClearChannelID()
	})
}

// SetRoot sets the "root" field.
func (u *InformationV1UpsertOne) SetRoot(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetRoot(v)
	})
}

// UpdateRoot sets the "root" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateRoot() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateRoot()
	})
}

// SetThumb sets the "thumb" field.
func (u *InformationV1UpsertOne) SetThumb(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetThumb(v)
	})
}

// UpdateThumb sets the "thumb" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateThumb() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateThumb()
	})
}

// SetThumbPath sets the "thumb_path" field.
func (u *InformationV1UpsertOne) SetThumbPath(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetThumbPath(v)
	})
}

// UpdateThumbPath sets the "thumb_path" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateThumbPath() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateThumbPath()
	})
}

// SetPoster sets the "poster" field.
func (u *InformationV1UpsertOne) SetPoster(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetPoster(v)
	})
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdatePoster() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdatePoster()
	})
}

// SetPosterPath sets the "poster_path" field.
func (u *InformationV1UpsertOne) SetPosterPath(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetPosterPath(v)
	})
}

// UpdatePosterPath sets the "poster_path" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdatePosterPath() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdatePosterPath()
	})
}

// SetMedia sets the "media" field.
func (u *InformationV1UpsertOne) SetMedia(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetMedia(v)
	})
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateMedia() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateMedia()
	})
}

// SetMediaPath sets the "media_path" field.
func (u *InformationV1UpsertOne) SetMediaPath(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetMediaPath(v)
	})
}

// UpdateMediaPath sets the "media_path" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateMediaPath() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateMediaPath()
	})
}

// SetMediaIndex sets the "media_index" field.
func (u *InformationV1UpsertOne) SetMediaIndex(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetMediaIndex(v)
	})
}

// UpdateMediaIndex sets the "media_index" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateMediaIndex() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateMediaIndex()
	})
}

// SetFrames sets the "frames" field.
func (u *InformationV1UpsertOne) SetFrames(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetFrames(v)
	})
}

// UpdateFrames sets the "frames" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateFrames() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateFrames()
	})
}

// SetFramesPath sets the "frames_path" field.
func (u *InformationV1UpsertOne) SetFramesPath(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetFramesPath(v)
	})
}

// UpdateFramesPath sets the "frames_path" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateFramesPath() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateFramesPath()
	})
}

// SetFramesParticulars sets the "frames_particulars" field.
func (u *InformationV1UpsertOne) SetFramesParticulars(v []schema.SkipFrame) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetFramesParticulars(v)
	})
}

// UpdateFramesParticulars sets the "frames_particulars" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateFramesParticulars() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateFramesParticulars()
	})
}

// ClearFramesParticulars clears the value of the "frames_particulars" field.
func (u *InformationV1UpsertOne) ClearFramesParticulars() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.ClearFramesParticulars()
	})
}

// SetTitle sets the "title" field.
func (u *InformationV1UpsertOne) SetTitle(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateTitle() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateTitle()
	})
}

// SetVideoNo sets the "video_no" field.
func (u *InformationV1UpsertOne) SetVideoNo(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetVideoNo(v)
	})
}

// UpdateVideoNo sets the "video_no" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateVideoNo() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateVideoNo()
	})
}

// SetIntro sets the "intro" field.
func (u *InformationV1UpsertOne) SetIntro(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetIntro(v)
	})
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateIntro() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateIntro()
	})
}

// SetAlias sets the "alias" field.
func (u *InformationV1UpsertOne) SetAlias(v []string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetAlias(v)
	})
}

// UpdateAlias sets the "alias" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateAlias() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateAlias()
	})
}

// SetRole sets the "role" field.
func (u *InformationV1UpsertOne) SetRole(v []string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateRole() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateRole()
	})
}

// SetDirector sets the "director" field.
func (u *InformationV1UpsertOne) SetDirector(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetDirector(v)
	})
}

// UpdateDirector sets the "director" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateDirector() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateDirector()
	})
}

// SetSystematics sets the "systematics" field.
func (u *InformationV1UpsertOne) SetSystematics(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSystematics(v)
	})
}

// UpdateSystematics sets the "systematics" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateSystematics() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSystematics()
	})
}

// SetProducer sets the "producer" field.
func (u *InformationV1UpsertOne) SetProducer(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetProducer(v)
	})
}

// UpdateProducer sets the "producer" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateProducer() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateProducer()
	})
}

// SetPublisher sets the "publisher" field.
func (u *InformationV1UpsertOne) SetPublisher(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetPublisher(v)
	})
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdatePublisher() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdatePublisher()
	})
}

// SetSortType sets the "sort_type" field.
func (u *InformationV1UpsertOne) SetSortType(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSortType(v)
	})
}

// UpdateSortType sets the "sort_type" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateSortType() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSortType()
	})
}

// SetCaption sets the "caption" field.
func (u *InformationV1UpsertOne) SetCaption(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetCaption(v)
	})
}

// UpdateCaption sets the "caption" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateCaption() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateCaption()
	})
}

// SetGroup sets the "group" field.
func (u *InformationV1UpsertOne) SetGroup(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetGroup(v)
	})
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateGroup() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateGroup()
	})
}

// SetIndex sets the "index" field.
func (u *InformationV1UpsertOne) SetIndex(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateIndex() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateIndex()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *InformationV1UpsertOne) SetReleaseDate(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateReleaseDate() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateReleaseDate()
	})
}

// SetFormat sets the "format" field.
func (u *InformationV1UpsertOne) SetFormat(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateFormat() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateFormat()
	})
}

// SetSeries sets the "series" field.
func (u *InformationV1UpsertOne) SetSeries(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSeries(v)
	})
}

// UpdateSeries sets the "series" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateSeries() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSeries()
	})
}

// SetTags sets the "tags" field.
func (u *InformationV1UpsertOne) SetTags(v []string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateTags() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateTags()
	})
}

// SetLength sets the "length" field.
func (u *InformationV1UpsertOne) SetLength(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateLength() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateLength()
	})
}

// SetSample sets the "sample" field.
func (u *InformationV1UpsertOne) SetSample(v []string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSample(v)
	})
}

// UpdateSample sets the "sample" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateSample() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSample()
	})
}

// SetUncensored sets the "uncensored" field.
func (u *InformationV1UpsertOne) SetUncensored(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetUncensored(v)
	})
}

// UpdateUncensored sets the "uncensored" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateUncensored() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateUncensored()
	})
}

// SetSeason sets the "season" field.
func (u *InformationV1UpsertOne) SetSeason(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSeason(v)
	})
}

// UpdateSeason sets the "season" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateSeason() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSeason()
	})
}

// SetTotalEpisode sets the "total_episode" field.
func (u *InformationV1UpsertOne) SetTotalEpisode(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetTotalEpisode(v)
	})
}

// UpdateTotalEpisode sets the "total_episode" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateTotalEpisode() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateTotalEpisode()
	})
}

// SetEpisode sets the "episode" field.
func (u *InformationV1UpsertOne) SetEpisode(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetEpisode(v)
	})
}

// UpdateEpisode sets the "episode" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateEpisode() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateEpisode()
	})
}

// SetLanguage sets the "language" field.
func (u *InformationV1UpsertOne) SetLanguage(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateLanguage() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateLanguage()
	})
}

// SetSharpness sets the "sharpness" field.
func (u *InformationV1UpsertOne) SetSharpness(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSharpness(v)
	})
}

// UpdateSharpness sets the "sharpness" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateSharpness() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSharpness()
	})
}

// SetWatermark sets the "watermark" field.
func (u *InformationV1UpsertOne) SetWatermark(v bool) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetWatermark(v)
	})
}

// UpdateWatermark sets the "watermark" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateWatermark() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateWatermark()
	})
}

// SetPermission sets the "permission" field.
func (u *InformationV1UpsertOne) SetPermission(v informationv1.Permission) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetPermission(v)
	})
}

// UpdatePermission sets the "permission" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdatePermission() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdatePermission()
	})
}

// SetSign sets the "sign" field.
func (u *InformationV1UpsertOne) SetSign(v string) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSign(v)
	})
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateSign() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSign()
	})
}

// ClearSign clears the value of the "sign" field.
func (u *InformationV1UpsertOne) ClearSign() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.ClearSign()
	})
}

// SetTotalBlocks sets the "total_blocks" field.
func (u *InformationV1UpsertOne) SetTotalBlocks(v int) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetTotalBlocks(v)
	})
}

// AddTotalBlocks adds v to the "total_blocks" field.
func (u *InformationV1UpsertOne) AddTotalBlocks(v int) *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.AddTotalBlocks(v)
	})
}

// UpdateTotalBlocks sets the "total_blocks" field to the value that was provided on create.
func (u *InformationV1UpsertOne) UpdateTotalBlocks() *InformationV1UpsertOne {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateTotalBlocks()
	})
}

// Exec executes the query.
func (u *InformationV1UpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("media: missing options for InformationV1Create.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InformationV1UpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InformationV1UpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("media: InformationV1UpsertOne.ID is not supported by MySQL driver. Use InformationV1UpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InformationV1UpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InformationV1CreateBulk is the builder for creating many InformationV1 entities in bulk.
type InformationV1CreateBulk struct {
	config
	builders []*InformationV1Create
	conflict []sql.ConflictOption
}

// Save creates the InformationV1 entities in the database.
func (ivb *InformationV1CreateBulk) Save(ctx context.Context) ([]*InformationV1, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ivb.builders))
	nodes := make([]*InformationV1, len(ivb.builders))
	mutators := make([]Mutator, len(ivb.builders))
	for i := range ivb.builders {
		func(i int, root context.Context) {
			builder := ivb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InformationV1Mutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ivb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ivb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ivb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ivb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ivb *InformationV1CreateBulk) SaveX(ctx context.Context) []*InformationV1 {
	v, err := ivb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ivb *InformationV1CreateBulk) Exec(ctx context.Context) error {
	_, err := ivb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivb *InformationV1CreateBulk) ExecX(ctx context.Context) {
	if err := ivb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InformationV1.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InformationV1Upsert) {
//			SetCreatedUnix(v+v).
//		}).
//		Exec(ctx)
func (ivb *InformationV1CreateBulk) OnConflict(opts ...sql.ConflictOption) *InformationV1UpsertBulk {
	ivb.conflict = opts
	return &InformationV1UpsertBulk{
		create: ivb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InformationV1.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ivb *InformationV1CreateBulk) OnConflictColumns(columns ...string) *InformationV1UpsertBulk {
	ivb.conflict = append(ivb.conflict, sql.ConflictColumns(columns...))
	return &InformationV1UpsertBulk{
		create: ivb,
	}
}

// InformationV1UpsertBulk is the builder for "upsert"-ing
// a bulk of InformationV1 nodes.
type InformationV1UpsertBulk struct {
	create *InformationV1CreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InformationV1.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(informationv1.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InformationV1UpsertBulk) UpdateNewValues() *InformationV1UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(informationv1.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InformationV1.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InformationV1UpsertBulk) Ignore() *InformationV1UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InformationV1UpsertBulk) DoNothing() *InformationV1UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InformationV1CreateBulk.OnConflict
// documentation for more info.
func (u *InformationV1UpsertBulk) Update(set func(*InformationV1Upsert)) *InformationV1UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InformationV1Upsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedUnix sets the "created_unix" field.
func (u *InformationV1UpsertBulk) SetCreatedUnix(v int64) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetCreatedUnix(v)
	})
}

// AddCreatedUnix adds v to the "created_unix" field.
func (u *InformationV1UpsertBulk) AddCreatedUnix(v int64) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.AddCreatedUnix(v)
	})
}

// UpdateCreatedUnix sets the "created_unix" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateCreatedUnix() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateCreatedUnix()
	})
}

// SetUpdatedUnix sets the "updated_unix" field.
func (u *InformationV1UpsertBulk) SetUpdatedUnix(v int64) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetUpdatedUnix(v)
	})
}

// AddUpdatedUnix adds v to the "updated_unix" field.
func (u *InformationV1UpsertBulk) AddUpdatedUnix(v int64) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.AddUpdatedUnix(v)
	})
}

// UpdateUpdatedUnix sets the "updated_unix" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateUpdatedUnix() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateUpdatedUnix()
	})
}

// SetDeletedUnix sets the "deleted_unix" field.
func (u *InformationV1UpsertBulk) SetDeletedUnix(v int64) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetDeletedUnix(v)
	})
}

// AddDeletedUnix adds v to the "deleted_unix" field.
func (u *InformationV1UpsertBulk) AddDeletedUnix(v int64) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.AddDeletedUnix(v)
	})
}

// UpdateDeletedUnix sets the "deleted_unix" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateDeletedUnix() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateDeletedUnix()
	})
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (u *InformationV1UpsertBulk) ClearDeletedUnix() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.ClearDeletedUnix()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *InformationV1UpsertBulk) SetChannelID(v uuid.UUID) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateChannelID() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateChannelID()
	})
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *InformationV1UpsertBulk) ClearChannelID() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.ClearChannelID()
	})
}

// SetRoot sets the "root" field.
func (u *InformationV1UpsertBulk) SetRoot(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetRoot(v)
	})
}

// UpdateRoot sets the "root" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateRoot() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateRoot()
	})
}

// SetThumb sets the "thumb" field.
func (u *InformationV1UpsertBulk) SetThumb(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetThumb(v)
	})
}

// UpdateThumb sets the "thumb" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateThumb() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateThumb()
	})
}

// SetThumbPath sets the "thumb_path" field.
func (u *InformationV1UpsertBulk) SetThumbPath(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetThumbPath(v)
	})
}

// UpdateThumbPath sets the "thumb_path" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateThumbPath() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateThumbPath()
	})
}

// SetPoster sets the "poster" field.
func (u *InformationV1UpsertBulk) SetPoster(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetPoster(v)
	})
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdatePoster() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdatePoster()
	})
}

// SetPosterPath sets the "poster_path" field.
func (u *InformationV1UpsertBulk) SetPosterPath(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetPosterPath(v)
	})
}

// UpdatePosterPath sets the "poster_path" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdatePosterPath() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdatePosterPath()
	})
}

// SetMedia sets the "media" field.
func (u *InformationV1UpsertBulk) SetMedia(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetMedia(v)
	})
}

// UpdateMedia sets the "media" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateMedia() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateMedia()
	})
}

// SetMediaPath sets the "media_path" field.
func (u *InformationV1UpsertBulk) SetMediaPath(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetMediaPath(v)
	})
}

// UpdateMediaPath sets the "media_path" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateMediaPath() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateMediaPath()
	})
}

// SetMediaIndex sets the "media_index" field.
func (u *InformationV1UpsertBulk) SetMediaIndex(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetMediaIndex(v)
	})
}

// UpdateMediaIndex sets the "media_index" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateMediaIndex() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateMediaIndex()
	})
}

// SetFrames sets the "frames" field.
func (u *InformationV1UpsertBulk) SetFrames(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetFrames(v)
	})
}

// UpdateFrames sets the "frames" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateFrames() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateFrames()
	})
}

// SetFramesPath sets the "frames_path" field.
func (u *InformationV1UpsertBulk) SetFramesPath(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetFramesPath(v)
	})
}

// UpdateFramesPath sets the "frames_path" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateFramesPath() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateFramesPath()
	})
}

// SetFramesParticulars sets the "frames_particulars" field.
func (u *InformationV1UpsertBulk) SetFramesParticulars(v []schema.SkipFrame) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetFramesParticulars(v)
	})
}

// UpdateFramesParticulars sets the "frames_particulars" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateFramesParticulars() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateFramesParticulars()
	})
}

// ClearFramesParticulars clears the value of the "frames_particulars" field.
func (u *InformationV1UpsertBulk) ClearFramesParticulars() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.ClearFramesParticulars()
	})
}

// SetTitle sets the "title" field.
func (u *InformationV1UpsertBulk) SetTitle(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateTitle() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateTitle()
	})
}

// SetVideoNo sets the "video_no" field.
func (u *InformationV1UpsertBulk) SetVideoNo(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetVideoNo(v)
	})
}

// UpdateVideoNo sets the "video_no" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateVideoNo() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateVideoNo()
	})
}

// SetIntro sets the "intro" field.
func (u *InformationV1UpsertBulk) SetIntro(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetIntro(v)
	})
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateIntro() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateIntro()
	})
}

// SetAlias sets the "alias" field.
func (u *InformationV1UpsertBulk) SetAlias(v []string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetAlias(v)
	})
}

// UpdateAlias sets the "alias" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateAlias() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateAlias()
	})
}

// SetRole sets the "role" field.
func (u *InformationV1UpsertBulk) SetRole(v []string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateRole() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateRole()
	})
}

// SetDirector sets the "director" field.
func (u *InformationV1UpsertBulk) SetDirector(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetDirector(v)
	})
}

// UpdateDirector sets the "director" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateDirector() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateDirector()
	})
}

// SetSystematics sets the "systematics" field.
func (u *InformationV1UpsertBulk) SetSystematics(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSystematics(v)
	})
}

// UpdateSystematics sets the "systematics" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateSystematics() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSystematics()
	})
}

// SetProducer sets the "producer" field.
func (u *InformationV1UpsertBulk) SetProducer(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetProducer(v)
	})
}

// UpdateProducer sets the "producer" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateProducer() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateProducer()
	})
}

// SetPublisher sets the "publisher" field.
func (u *InformationV1UpsertBulk) SetPublisher(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetPublisher(v)
	})
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdatePublisher() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdatePublisher()
	})
}

// SetSortType sets the "sort_type" field.
func (u *InformationV1UpsertBulk) SetSortType(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSortType(v)
	})
}

// UpdateSortType sets the "sort_type" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateSortType() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSortType()
	})
}

// SetCaption sets the "caption" field.
func (u *InformationV1UpsertBulk) SetCaption(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetCaption(v)
	})
}

// UpdateCaption sets the "caption" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateCaption() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateCaption()
	})
}

// SetGroup sets the "group" field.
func (u *InformationV1UpsertBulk) SetGroup(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetGroup(v)
	})
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateGroup() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateGroup()
	})
}

// SetIndex sets the "index" field.
func (u *InformationV1UpsertBulk) SetIndex(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateIndex() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateIndex()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *InformationV1UpsertBulk) SetReleaseDate(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateReleaseDate() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateReleaseDate()
	})
}

// SetFormat sets the "format" field.
func (u *InformationV1UpsertBulk) SetFormat(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateFormat() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateFormat()
	})
}

// SetSeries sets the "series" field.
func (u *InformationV1UpsertBulk) SetSeries(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSeries(v)
	})
}

// UpdateSeries sets the "series" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateSeries() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSeries()
	})
}

// SetTags sets the "tags" field.
func (u *InformationV1UpsertBulk) SetTags(v []string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateTags() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateTags()
	})
}

// SetLength sets the "length" field.
func (u *InformationV1UpsertBulk) SetLength(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateLength() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateLength()
	})
}

// SetSample sets the "sample" field.
func (u *InformationV1UpsertBulk) SetSample(v []string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSample(v)
	})
}

// UpdateSample sets the "sample" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateSample() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSample()
	})
}

// SetUncensored sets the "uncensored" field.
func (u *InformationV1UpsertBulk) SetUncensored(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetUncensored(v)
	})
}

// UpdateUncensored sets the "uncensored" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateUncensored() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateUncensored()
	})
}

// SetSeason sets the "season" field.
func (u *InformationV1UpsertBulk) SetSeason(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSeason(v)
	})
}

// UpdateSeason sets the "season" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateSeason() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSeason()
	})
}

// SetTotalEpisode sets the "total_episode" field.
func (u *InformationV1UpsertBulk) SetTotalEpisode(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetTotalEpisode(v)
	})
}

// UpdateTotalEpisode sets the "total_episode" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateTotalEpisode() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateTotalEpisode()
	})
}

// SetEpisode sets the "episode" field.
func (u *InformationV1UpsertBulk) SetEpisode(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetEpisode(v)
	})
}

// UpdateEpisode sets the "episode" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateEpisode() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateEpisode()
	})
}

// SetLanguage sets the "language" field.
func (u *InformationV1UpsertBulk) SetLanguage(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateLanguage() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateLanguage()
	})
}

// SetSharpness sets the "sharpness" field.
func (u *InformationV1UpsertBulk) SetSharpness(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSharpness(v)
	})
}

// UpdateSharpness sets the "sharpness" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateSharpness() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSharpness()
	})
}

// SetWatermark sets the "watermark" field.
func (u *InformationV1UpsertBulk) SetWatermark(v bool) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetWatermark(v)
	})
}

// UpdateWatermark sets the "watermark" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateWatermark() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateWatermark()
	})
}

// SetPermission sets the "permission" field.
func (u *InformationV1UpsertBulk) SetPermission(v informationv1.Permission) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetPermission(v)
	})
}

// UpdatePermission sets the "permission" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdatePermission() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdatePermission()
	})
}

// SetSign sets the "sign" field.
func (u *InformationV1UpsertBulk) SetSign(v string) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetSign(v)
	})
}

// UpdateSign sets the "sign" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateSign() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateSign()
	})
}

// ClearSign clears the value of the "sign" field.
func (u *InformationV1UpsertBulk) ClearSign() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.ClearSign()
	})
}

// SetTotalBlocks sets the "total_blocks" field.
func (u *InformationV1UpsertBulk) SetTotalBlocks(v int) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.SetTotalBlocks(v)
	})
}

// AddTotalBlocks adds v to the "total_blocks" field.
func (u *InformationV1UpsertBulk) AddTotalBlocks(v int) *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.AddTotalBlocks(v)
	})
}

// UpdateTotalBlocks sets the "total_blocks" field to the value that was provided on create.
func (u *InformationV1UpsertBulk) UpdateTotalBlocks() *InformationV1UpsertBulk {
	return u.Update(func(s *InformationV1Upsert) {
		s.UpdateTotalBlocks()
	})
}

// Exec executes the query.
func (u *InformationV1UpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("media: OnConflict was set for builder %d. Set it on the InformationV1CreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("media: missing options for InformationV1CreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InformationV1UpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
