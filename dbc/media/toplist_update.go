// Code generated by ent, DO NOT EDIT.

package media

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/informationv1"
	"github.com/tikafog/of/dbc/media/page"
	"github.com/tikafog/of/dbc/media/predicate"
	"github.com/tikafog/of/dbc/media/toplist"
)

// TopListUpdate is the builder for updating TopList entities.
type TopListUpdate struct {
	config
	hooks    []Hook
	mutation *TopListMutation
}

// Where appends a list predicates to the TopListUpdate builder.
func (tlu *TopListUpdate) Where(ps ...predicate.TopList) *TopListUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetCreatedUnix sets the "created_unix" field.
func (tlu *TopListUpdate) SetCreatedUnix(i int64) *TopListUpdate {
	tlu.mutation.ResetCreatedUnix()
	tlu.mutation.SetCreatedUnix(i)
	return tlu
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableCreatedUnix(i *int64) *TopListUpdate {
	if i != nil {
		tlu.SetCreatedUnix(*i)
	}
	return tlu
}

// AddCreatedUnix adds i to the "created_unix" field.
func (tlu *TopListUpdate) AddCreatedUnix(i int64) *TopListUpdate {
	tlu.mutation.AddCreatedUnix(i)
	return tlu
}

// SetUpdatedUnix sets the "updated_unix" field.
func (tlu *TopListUpdate) SetUpdatedUnix(i int64) *TopListUpdate {
	tlu.mutation.ResetUpdatedUnix()
	tlu.mutation.SetUpdatedUnix(i)
	return tlu
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableUpdatedUnix(i *int64) *TopListUpdate {
	if i != nil {
		tlu.SetUpdatedUnix(*i)
	}
	return tlu
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (tlu *TopListUpdate) AddUpdatedUnix(i int64) *TopListUpdate {
	tlu.mutation.AddUpdatedUnix(i)
	return tlu
}

// SetDeletedUnix sets the "deleted_unix" field.
func (tlu *TopListUpdate) SetDeletedUnix(i int64) *TopListUpdate {
	tlu.mutation.ResetDeletedUnix()
	tlu.mutation.SetDeletedUnix(i)
	return tlu
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableDeletedUnix(i *int64) *TopListUpdate {
	if i != nil {
		tlu.SetDeletedUnix(*i)
	}
	return tlu
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (tlu *TopListUpdate) AddDeletedUnix(i int64) *TopListUpdate {
	tlu.mutation.AddDeletedUnix(i)
	return tlu
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (tlu *TopListUpdate) ClearDeletedUnix() *TopListUpdate {
	tlu.mutation.ClearDeletedUnix()
	return tlu
}

// SetInformationID sets the "information_id" field.
func (tlu *TopListUpdate) SetInformationID(u uuid.UUID) *TopListUpdate {
	tlu.mutation.SetInformationID(u)
	return tlu
}

// SetNillableInformationID sets the "information_id" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableInformationID(u *uuid.UUID) *TopListUpdate {
	if u != nil {
		tlu.SetInformationID(*u)
	}
	return tlu
}

// ClearInformationID clears the value of the "information_id" field.
func (tlu *TopListUpdate) ClearInformationID() *TopListUpdate {
	tlu.mutation.ClearInformationID()
	return tlu
}

// SetPageID sets the "page_id" field.
func (tlu *TopListUpdate) SetPageID(u uuid.UUID) *TopListUpdate {
	tlu.mutation.SetPageID(u)
	return tlu
}

// SetNillablePageID sets the "page_id" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillablePageID(u *uuid.UUID) *TopListUpdate {
	if u != nil {
		tlu.SetPageID(*u)
	}
	return tlu
}

// ClearPageID clears the value of the "page_id" field.
func (tlu *TopListUpdate) ClearPageID() *TopListUpdate {
	tlu.mutation.ClearPageID()
	return tlu
}

// SetTitle sets the "title" field.
func (tlu *TopListUpdate) SetTitle(s string) *TopListUpdate {
	tlu.mutation.SetTitle(s)
	return tlu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableTitle(s *string) *TopListUpdate {
	if s != nil {
		tlu.SetTitle(*s)
	}
	return tlu
}

// SetIntro sets the "intro" field.
func (tlu *TopListUpdate) SetIntro(s string) *TopListUpdate {
	tlu.mutation.SetIntro(s)
	return tlu
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableIntro(s *string) *TopListUpdate {
	if s != nil {
		tlu.SetIntro(*s)
	}
	return tlu
}

// SetCategory sets the "category" field.
func (tlu *TopListUpdate) SetCategory(t toplist.Category) *TopListUpdate {
	tlu.mutation.SetCategory(t)
	return tlu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableCategory(t *toplist.Category) *TopListUpdate {
	if t != nil {
		tlu.SetCategory(*t)
	}
	return tlu
}

// SetLowerBanner sets the "lower_banner" field.
func (tlu *TopListUpdate) SetLowerBanner(tb toplist.LowerBanner) *TopListUpdate {
	tlu.mutation.SetLowerBanner(tb)
	return tlu
}

// SetNillableLowerBanner sets the "lower_banner" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableLowerBanner(tb *toplist.LowerBanner) *TopListUpdate {
	if tb != nil {
		tlu.SetLowerBanner(*tb)
	}
	return tlu
}

// SetTopRight sets the "top_right" field.
func (tlu *TopListUpdate) SetTopRight(tr toplist.TopRight) *TopListUpdate {
	tlu.mutation.SetTopRight(tr)
	return tlu
}

// SetNillableTopRight sets the "top_right" field if the given value is not nil.
func (tlu *TopListUpdate) SetNillableTopRight(tr *toplist.TopRight) *TopListUpdate {
	if tr != nil {
		tlu.SetTopRight(*tr)
	}
	return tlu
}

// SetInformation sets the "information" edge to the InformationV1 entity.
func (tlu *TopListUpdate) SetInformation(i *InformationV1) *TopListUpdate {
	return tlu.SetInformationID(i.ID)
}

// SetPage sets the "page" edge to the Page entity.
func (tlu *TopListUpdate) SetPage(p *Page) *TopListUpdate {
	return tlu.SetPageID(p.ID)
}

// Mutation returns the TopListMutation object of the builder.
func (tlu *TopListUpdate) Mutation() *TopListMutation {
	return tlu.mutation
}

// ClearInformation clears the "information" edge to the InformationV1 entity.
func (tlu *TopListUpdate) ClearInformation() *TopListUpdate {
	tlu.mutation.ClearInformation()
	return tlu
}

// ClearPage clears the "page" edge to the Page entity.
func (tlu *TopListUpdate) ClearPage() *TopListUpdate {
	tlu.mutation.ClearPage()
	return tlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TopListUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tlu.hooks) == 0 {
		if err = tlu.check(); err != nil {
			return 0, err
		}
		affected, err = tlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlu.check(); err != nil {
				return 0, err
			}
			tlu.mutation = mutation
			affected, err = tlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tlu.hooks) - 1; i >= 0; i-- {
			if tlu.hooks[i] == nil {
				return 0, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = tlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TopListUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TopListUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TopListUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TopListUpdate) check() error {
	if v, ok := tlu.mutation.Category(); ok {
		if err := toplist.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`media: validator failed for field "TopList.category": %w`, err)}
		}
	}
	if v, ok := tlu.mutation.LowerBanner(); ok {
		if err := toplist.LowerBannerValidator(v); err != nil {
			return &ValidationError{Name: "lower_banner", err: fmt.Errorf(`media: validator failed for field "TopList.lower_banner": %w`, err)}
		}
	}
	if v, ok := tlu.mutation.TopRight(); ok {
		if err := toplist.TopRightValidator(v); err != nil {
			return &ValidationError{Name: "top_right", err: fmt.Errorf(`media: validator failed for field "TopList.top_right": %w`, err)}
		}
	}
	return nil
}

func (tlu *TopListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   toplist.Table,
			Columns: toplist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: toplist.FieldID,
			},
		},
	}
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldCreatedUnix,
		})
	}
	if value, ok := tlu.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldCreatedUnix,
		})
	}
	if value, ok := tlu.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldUpdatedUnix,
		})
	}
	if value, ok := tlu.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldUpdatedUnix,
		})
	}
	if value, ok := tlu.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldDeletedUnix,
		})
	}
	if value, ok := tlu.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldDeletedUnix,
		})
	}
	if tlu.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: toplist.FieldDeletedUnix,
		})
	}
	if value, ok := tlu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: toplist.FieldTitle,
		})
	}
	if value, ok := tlu.mutation.Intro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: toplist.FieldIntro,
		})
	}
	if value, ok := tlu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldCategory,
		})
	}
	if value, ok := tlu.mutation.LowerBanner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldLowerBanner,
		})
	}
	if value, ok := tlu.mutation.TopRight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldTopRight,
		})
	}
	if tlu.mutation.InformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.InformationTable,
			Columns: []string{toplist.InformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: informationv1.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.InformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.InformationTable,
			Columns: []string{toplist.InformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: informationv1.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tlu.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.PageTable,
			Columns: []string{toplist.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.PageTable,
			Columns: []string{toplist.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toplist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TopListUpdateOne is the builder for updating a single TopList entity.
type TopListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopListMutation
}

// SetCreatedUnix sets the "created_unix" field.
func (tluo *TopListUpdateOne) SetCreatedUnix(i int64) *TopListUpdateOne {
	tluo.mutation.ResetCreatedUnix()
	tluo.mutation.SetCreatedUnix(i)
	return tluo
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableCreatedUnix(i *int64) *TopListUpdateOne {
	if i != nil {
		tluo.SetCreatedUnix(*i)
	}
	return tluo
}

// AddCreatedUnix adds i to the "created_unix" field.
func (tluo *TopListUpdateOne) AddCreatedUnix(i int64) *TopListUpdateOne {
	tluo.mutation.AddCreatedUnix(i)
	return tluo
}

// SetUpdatedUnix sets the "updated_unix" field.
func (tluo *TopListUpdateOne) SetUpdatedUnix(i int64) *TopListUpdateOne {
	tluo.mutation.ResetUpdatedUnix()
	tluo.mutation.SetUpdatedUnix(i)
	return tluo
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableUpdatedUnix(i *int64) *TopListUpdateOne {
	if i != nil {
		tluo.SetUpdatedUnix(*i)
	}
	return tluo
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (tluo *TopListUpdateOne) AddUpdatedUnix(i int64) *TopListUpdateOne {
	tluo.mutation.AddUpdatedUnix(i)
	return tluo
}

// SetDeletedUnix sets the "deleted_unix" field.
func (tluo *TopListUpdateOne) SetDeletedUnix(i int64) *TopListUpdateOne {
	tluo.mutation.ResetDeletedUnix()
	tluo.mutation.SetDeletedUnix(i)
	return tluo
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableDeletedUnix(i *int64) *TopListUpdateOne {
	if i != nil {
		tluo.SetDeletedUnix(*i)
	}
	return tluo
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (tluo *TopListUpdateOne) AddDeletedUnix(i int64) *TopListUpdateOne {
	tluo.mutation.AddDeletedUnix(i)
	return tluo
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (tluo *TopListUpdateOne) ClearDeletedUnix() *TopListUpdateOne {
	tluo.mutation.ClearDeletedUnix()
	return tluo
}

// SetInformationID sets the "information_id" field.
func (tluo *TopListUpdateOne) SetInformationID(u uuid.UUID) *TopListUpdateOne {
	tluo.mutation.SetInformationID(u)
	return tluo
}

// SetNillableInformationID sets the "information_id" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableInformationID(u *uuid.UUID) *TopListUpdateOne {
	if u != nil {
		tluo.SetInformationID(*u)
	}
	return tluo
}

// ClearInformationID clears the value of the "information_id" field.
func (tluo *TopListUpdateOne) ClearInformationID() *TopListUpdateOne {
	tluo.mutation.ClearInformationID()
	return tluo
}

// SetPageID sets the "page_id" field.
func (tluo *TopListUpdateOne) SetPageID(u uuid.UUID) *TopListUpdateOne {
	tluo.mutation.SetPageID(u)
	return tluo
}

// SetNillablePageID sets the "page_id" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillablePageID(u *uuid.UUID) *TopListUpdateOne {
	if u != nil {
		tluo.SetPageID(*u)
	}
	return tluo
}

// ClearPageID clears the value of the "page_id" field.
func (tluo *TopListUpdateOne) ClearPageID() *TopListUpdateOne {
	tluo.mutation.ClearPageID()
	return tluo
}

// SetTitle sets the "title" field.
func (tluo *TopListUpdateOne) SetTitle(s string) *TopListUpdateOne {
	tluo.mutation.SetTitle(s)
	return tluo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableTitle(s *string) *TopListUpdateOne {
	if s != nil {
		tluo.SetTitle(*s)
	}
	return tluo
}

// SetIntro sets the "intro" field.
func (tluo *TopListUpdateOne) SetIntro(s string) *TopListUpdateOne {
	tluo.mutation.SetIntro(s)
	return tluo
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableIntro(s *string) *TopListUpdateOne {
	if s != nil {
		tluo.SetIntro(*s)
	}
	return tluo
}

// SetCategory sets the "category" field.
func (tluo *TopListUpdateOne) SetCategory(t toplist.Category) *TopListUpdateOne {
	tluo.mutation.SetCategory(t)
	return tluo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableCategory(t *toplist.Category) *TopListUpdateOne {
	if t != nil {
		tluo.SetCategory(*t)
	}
	return tluo
}

// SetLowerBanner sets the "lower_banner" field.
func (tluo *TopListUpdateOne) SetLowerBanner(tb toplist.LowerBanner) *TopListUpdateOne {
	tluo.mutation.SetLowerBanner(tb)
	return tluo
}

// SetNillableLowerBanner sets the "lower_banner" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableLowerBanner(tb *toplist.LowerBanner) *TopListUpdateOne {
	if tb != nil {
		tluo.SetLowerBanner(*tb)
	}
	return tluo
}

// SetTopRight sets the "top_right" field.
func (tluo *TopListUpdateOne) SetTopRight(tr toplist.TopRight) *TopListUpdateOne {
	tluo.mutation.SetTopRight(tr)
	return tluo
}

// SetNillableTopRight sets the "top_right" field if the given value is not nil.
func (tluo *TopListUpdateOne) SetNillableTopRight(tr *toplist.TopRight) *TopListUpdateOne {
	if tr != nil {
		tluo.SetTopRight(*tr)
	}
	return tluo
}

// SetInformation sets the "information" edge to the InformationV1 entity.
func (tluo *TopListUpdateOne) SetInformation(i *InformationV1) *TopListUpdateOne {
	return tluo.SetInformationID(i.ID)
}

// SetPage sets the "page" edge to the Page entity.
func (tluo *TopListUpdateOne) SetPage(p *Page) *TopListUpdateOne {
	return tluo.SetPageID(p.ID)
}

// Mutation returns the TopListMutation object of the builder.
func (tluo *TopListUpdateOne) Mutation() *TopListMutation {
	return tluo.mutation
}

// ClearInformation clears the "information" edge to the InformationV1 entity.
func (tluo *TopListUpdateOne) ClearInformation() *TopListUpdateOne {
	tluo.mutation.ClearInformation()
	return tluo
}

// ClearPage clears the "page" edge to the Page entity.
func (tluo *TopListUpdateOne) ClearPage() *TopListUpdateOne {
	tluo.mutation.ClearPage()
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TopListUpdateOne) Select(field string, fields ...string) *TopListUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TopList entity.
func (tluo *TopListUpdateOne) Save(ctx context.Context) (*TopList, error) {
	var (
		err  error
		node *TopList
	)
	if len(tluo.hooks) == 0 {
		if err = tluo.check(); err != nil {
			return nil, err
		}
		node, err = tluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tluo.check(); err != nil {
				return nil, err
			}
			tluo.mutation = mutation
			node, err = tluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tluo.hooks) - 1; i >= 0; i-- {
			if tluo.hooks[i] == nil {
				return nil, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = tluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TopList)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TopListMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TopListUpdateOne) SaveX(ctx context.Context) *TopList {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TopListUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TopListUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TopListUpdateOne) check() error {
	if v, ok := tluo.mutation.Category(); ok {
		if err := toplist.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`media: validator failed for field "TopList.category": %w`, err)}
		}
	}
	if v, ok := tluo.mutation.LowerBanner(); ok {
		if err := toplist.LowerBannerValidator(v); err != nil {
			return &ValidationError{Name: "lower_banner", err: fmt.Errorf(`media: validator failed for field "TopList.lower_banner": %w`, err)}
		}
	}
	if v, ok := tluo.mutation.TopRight(); ok {
		if err := toplist.TopRightValidator(v); err != nil {
			return &ValidationError{Name: "top_right", err: fmt.Errorf(`media: validator failed for field "TopList.top_right": %w`, err)}
		}
	}
	return nil
}

func (tluo *TopListUpdateOne) sqlSave(ctx context.Context) (_node *TopList, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   toplist.Table,
			Columns: toplist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: toplist.FieldID,
			},
		},
	}
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`media: missing "TopList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, toplist.FieldID)
		for _, f := range fields {
			if !toplist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("media: invalid field %q for query", f)}
			}
			if f != toplist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldCreatedUnix,
		})
	}
	if value, ok := tluo.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldCreatedUnix,
		})
	}
	if value, ok := tluo.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldUpdatedUnix,
		})
	}
	if value, ok := tluo.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldUpdatedUnix,
		})
	}
	if value, ok := tluo.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldDeletedUnix,
		})
	}
	if value, ok := tluo.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: toplist.FieldDeletedUnix,
		})
	}
	if tluo.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: toplist.FieldDeletedUnix,
		})
	}
	if value, ok := tluo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: toplist.FieldTitle,
		})
	}
	if value, ok := tluo.mutation.Intro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: toplist.FieldIntro,
		})
	}
	if value, ok := tluo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldCategory,
		})
	}
	if value, ok := tluo.mutation.LowerBanner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldLowerBanner,
		})
	}
	if value, ok := tluo.mutation.TopRight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: toplist.FieldTopRight,
		})
	}
	if tluo.mutation.InformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.InformationTable,
			Columns: []string{toplist.InformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: informationv1.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.InformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.InformationTable,
			Columns: []string{toplist.InformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: informationv1.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tluo.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.PageTable,
			Columns: []string{toplist.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toplist.PageTable,
			Columns: []string{toplist.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TopList{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toplist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
