// Code generated by entc, DO NOT EDIT.

package media

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/channel"
	"github.com/tikafog/of/dbc/media/informationv1"
	"github.com/tikafog/of/dbc/media/predicate"
	"github.com/tikafog/of/dbc/media/schema"
	"github.com/tikafog/of/dbc/media/toplist"
)

// InformationV1Update is the builder for updating InformationV1 entities.
type InformationV1Update struct {
	config
	hooks    []Hook
	mutation *InformationV1Mutation
}

// Where appends a list predicates to the InformationV1Update builder.
func (iv *InformationV1Update) Where(ps ...predicate.InformationV1) *InformationV1Update {
	iv.mutation.Where(ps...)
	return iv
}

// SetCreatedUnix sets the "created_unix" field.
func (iv *InformationV1Update) SetCreatedUnix(i int64) *InformationV1Update {
	iv.mutation.ResetCreatedUnix()
	iv.mutation.SetCreatedUnix(i)
	return iv
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableCreatedUnix(i *int64) *InformationV1Update {
	if i != nil {
		iv.SetCreatedUnix(*i)
	}
	return iv
}

// AddCreatedUnix adds i to the "created_unix" field.
func (iv *InformationV1Update) AddCreatedUnix(i int64) *InformationV1Update {
	iv.mutation.AddCreatedUnix(i)
	return iv
}

// SetUpdatedUnix sets the "updated_unix" field.
func (iv *InformationV1Update) SetUpdatedUnix(i int64) *InformationV1Update {
	iv.mutation.ResetUpdatedUnix()
	iv.mutation.SetUpdatedUnix(i)
	return iv
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableUpdatedUnix(i *int64) *InformationV1Update {
	if i != nil {
		iv.SetUpdatedUnix(*i)
	}
	return iv
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (iv *InformationV1Update) AddUpdatedUnix(i int64) *InformationV1Update {
	iv.mutation.AddUpdatedUnix(i)
	return iv
}

// SetDeletedUnix sets the "deleted_unix" field.
func (iv *InformationV1Update) SetDeletedUnix(i int64) *InformationV1Update {
	iv.mutation.ResetDeletedUnix()
	iv.mutation.SetDeletedUnix(i)
	return iv
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableDeletedUnix(i *int64) *InformationV1Update {
	if i != nil {
		iv.SetDeletedUnix(*i)
	}
	return iv
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (iv *InformationV1Update) AddDeletedUnix(i int64) *InformationV1Update {
	iv.mutation.AddDeletedUnix(i)
	return iv
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (iv *InformationV1Update) ClearDeletedUnix() *InformationV1Update {
	iv.mutation.ClearDeletedUnix()
	return iv
}

// SetChannelID sets the "channel_id" field.
func (iv *InformationV1Update) SetChannelID(u uuid.UUID) *InformationV1Update {
	iv.mutation.SetChannelID(u)
	return iv
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableChannelID(u *uuid.UUID) *InformationV1Update {
	if u != nil {
		iv.SetChannelID(*u)
	}
	return iv
}

// ClearChannelID clears the value of the "channel_id" field.
func (iv *InformationV1Update) ClearChannelID() *InformationV1Update {
	iv.mutation.ClearChannelID()
	return iv
}

// SetRoot sets the "root" field.
func (iv *InformationV1Update) SetRoot(s string) *InformationV1Update {
	iv.mutation.SetRoot(s)
	return iv
}

// SetNillableRoot sets the "root" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableRoot(s *string) *InformationV1Update {
	if s != nil {
		iv.SetRoot(*s)
	}
	return iv
}

// SetThumb sets the "thumb" field.
func (iv *InformationV1Update) SetThumb(s string) *InformationV1Update {
	iv.mutation.SetThumb(s)
	return iv
}

// SetNillableThumb sets the "thumb" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableThumb(s *string) *InformationV1Update {
	if s != nil {
		iv.SetThumb(*s)
	}
	return iv
}

// SetThumbPath sets the "thumb_path" field.
func (iv *InformationV1Update) SetThumbPath(s string) *InformationV1Update {
	iv.mutation.SetThumbPath(s)
	return iv
}

// SetNillableThumbPath sets the "thumb_path" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableThumbPath(s *string) *InformationV1Update {
	if s != nil {
		iv.SetThumbPath(*s)
	}
	return iv
}

// SetPoster sets the "poster" field.
func (iv *InformationV1Update) SetPoster(s string) *InformationV1Update {
	iv.mutation.SetPoster(s)
	return iv
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (iv *InformationV1Update) SetNillablePoster(s *string) *InformationV1Update {
	if s != nil {
		iv.SetPoster(*s)
	}
	return iv
}

// SetPosterPath sets the "poster_path" field.
func (iv *InformationV1Update) SetPosterPath(s string) *InformationV1Update {
	iv.mutation.SetPosterPath(s)
	return iv
}

// SetNillablePosterPath sets the "poster_path" field if the given value is not nil.
func (iv *InformationV1Update) SetNillablePosterPath(s *string) *InformationV1Update {
	if s != nil {
		iv.SetPosterPath(*s)
	}
	return iv
}

// SetMedia sets the "media" field.
func (iv *InformationV1Update) SetMedia(s string) *InformationV1Update {
	iv.mutation.SetMedia(s)
	return iv
}

// SetNillableMedia sets the "media" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableMedia(s *string) *InformationV1Update {
	if s != nil {
		iv.SetMedia(*s)
	}
	return iv
}

// SetMediaPath sets the "media_path" field.
func (iv *InformationV1Update) SetMediaPath(s string) *InformationV1Update {
	iv.mutation.SetMediaPath(s)
	return iv
}

// SetNillableMediaPath sets the "media_path" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableMediaPath(s *string) *InformationV1Update {
	if s != nil {
		iv.SetMediaPath(*s)
	}
	return iv
}

// SetMediaIndex sets the "media_index" field.
func (iv *InformationV1Update) SetMediaIndex(s string) *InformationV1Update {
	iv.mutation.SetMediaIndex(s)
	return iv
}

// SetNillableMediaIndex sets the "media_index" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableMediaIndex(s *string) *InformationV1Update {
	if s != nil {
		iv.SetMediaIndex(*s)
	}
	return iv
}

// SetFrames sets the "frames" field.
func (iv *InformationV1Update) SetFrames(s string) *InformationV1Update {
	iv.mutation.SetFrames(s)
	return iv
}

// SetNillableFrames sets the "frames" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableFrames(s *string) *InformationV1Update {
	if s != nil {
		iv.SetFrames(*s)
	}
	return iv
}

// SetFramesPath sets the "frames_path" field.
func (iv *InformationV1Update) SetFramesPath(s string) *InformationV1Update {
	iv.mutation.SetFramesPath(s)
	return iv
}

// SetNillableFramesPath sets the "frames_path" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableFramesPath(s *string) *InformationV1Update {
	if s != nil {
		iv.SetFramesPath(*s)
	}
	return iv
}

// SetFramesParticulars sets the "frames_particulars" field.
func (iv *InformationV1Update) SetFramesParticulars(sf []schema.SkipFrame) *InformationV1Update {
	iv.mutation.SetFramesParticulars(sf)
	return iv
}

// ClearFramesParticulars clears the value of the "frames_particulars" field.
func (iv *InformationV1Update) ClearFramesParticulars() *InformationV1Update {
	iv.mutation.ClearFramesParticulars()
	return iv
}

// SetTitle sets the "title" field.
func (iv *InformationV1Update) SetTitle(s string) *InformationV1Update {
	iv.mutation.SetTitle(s)
	return iv
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableTitle(s *string) *InformationV1Update {
	if s != nil {
		iv.SetTitle(*s)
	}
	return iv
}

// SetVideoNo sets the "video_no" field.
func (iv *InformationV1Update) SetVideoNo(s string) *InformationV1Update {
	iv.mutation.SetVideoNo(s)
	return iv
}

// SetNillableVideoNo sets the "video_no" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableVideoNo(s *string) *InformationV1Update {
	if s != nil {
		iv.SetVideoNo(*s)
	}
	return iv
}

// SetIntro sets the "intro" field.
func (iv *InformationV1Update) SetIntro(s string) *InformationV1Update {
	iv.mutation.SetIntro(s)
	return iv
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableIntro(s *string) *InformationV1Update {
	if s != nil {
		iv.SetIntro(*s)
	}
	return iv
}

// SetAlias sets the "alias" field.
func (iv *InformationV1Update) SetAlias(s []string) *InformationV1Update {
	iv.mutation.SetAlias(s)
	return iv
}

// SetRole sets the "role" field.
func (iv *InformationV1Update) SetRole(s []string) *InformationV1Update {
	iv.mutation.SetRole(s)
	return iv
}

// SetDirector sets the "director" field.
func (iv *InformationV1Update) SetDirector(s string) *InformationV1Update {
	iv.mutation.SetDirector(s)
	return iv
}

// SetNillableDirector sets the "director" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableDirector(s *string) *InformationV1Update {
	if s != nil {
		iv.SetDirector(*s)
	}
	return iv
}

// SetSystematics sets the "systematics" field.
func (iv *InformationV1Update) SetSystematics(s string) *InformationV1Update {
	iv.mutation.SetSystematics(s)
	return iv
}

// SetNillableSystematics sets the "systematics" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableSystematics(s *string) *InformationV1Update {
	if s != nil {
		iv.SetSystematics(*s)
	}
	return iv
}

// SetProducer sets the "producer" field.
func (iv *InformationV1Update) SetProducer(s string) *InformationV1Update {
	iv.mutation.SetProducer(s)
	return iv
}

// SetNillableProducer sets the "producer" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableProducer(s *string) *InformationV1Update {
	if s != nil {
		iv.SetProducer(*s)
	}
	return iv
}

// SetPublisher sets the "publisher" field.
func (iv *InformationV1Update) SetPublisher(s string) *InformationV1Update {
	iv.mutation.SetPublisher(s)
	return iv
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (iv *InformationV1Update) SetNillablePublisher(s *string) *InformationV1Update {
	if s != nil {
		iv.SetPublisher(*s)
	}
	return iv
}

// SetSortType sets the "sort_type" field.
func (iv *InformationV1Update) SetSortType(s string) *InformationV1Update {
	iv.mutation.SetSortType(s)
	return iv
}

// SetNillableSortType sets the "sort_type" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableSortType(s *string) *InformationV1Update {
	if s != nil {
		iv.SetSortType(*s)
	}
	return iv
}

// SetCaption sets the "caption" field.
func (iv *InformationV1Update) SetCaption(s string) *InformationV1Update {
	iv.mutation.SetCaption(s)
	return iv
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableCaption(s *string) *InformationV1Update {
	if s != nil {
		iv.SetCaption(*s)
	}
	return iv
}

// SetGroup sets the "group" field.
func (iv *InformationV1Update) SetGroup(s string) *InformationV1Update {
	iv.mutation.SetGroup(s)
	return iv
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableGroup(s *string) *InformationV1Update {
	if s != nil {
		iv.SetGroup(*s)
	}
	return iv
}

// SetIndex sets the "index" field.
func (iv *InformationV1Update) SetIndex(s string) *InformationV1Update {
	iv.mutation.SetIndex(s)
	return iv
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableIndex(s *string) *InformationV1Update {
	if s != nil {
		iv.SetIndex(*s)
	}
	return iv
}

// SetReleaseDate sets the "release_date" field.
func (iv *InformationV1Update) SetReleaseDate(s string) *InformationV1Update {
	iv.mutation.SetReleaseDate(s)
	return iv
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableReleaseDate(s *string) *InformationV1Update {
	if s != nil {
		iv.SetReleaseDate(*s)
	}
	return iv
}

// SetFormat sets the "format" field.
func (iv *InformationV1Update) SetFormat(s string) *InformationV1Update {
	iv.mutation.SetFormat(s)
	return iv
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableFormat(s *string) *InformationV1Update {
	if s != nil {
		iv.SetFormat(*s)
	}
	return iv
}

// SetSeries sets the "series" field.
func (iv *InformationV1Update) SetSeries(s string) *InformationV1Update {
	iv.mutation.SetSeries(s)
	return iv
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableSeries(s *string) *InformationV1Update {
	if s != nil {
		iv.SetSeries(*s)
	}
	return iv
}

// SetTags sets the "tags" field.
func (iv *InformationV1Update) SetTags(s []string) *InformationV1Update {
	iv.mutation.SetTags(s)
	return iv
}

// SetLength sets the "length" field.
func (iv *InformationV1Update) SetLength(s string) *InformationV1Update {
	iv.mutation.SetLength(s)
	return iv
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableLength(s *string) *InformationV1Update {
	if s != nil {
		iv.SetLength(*s)
	}
	return iv
}

// SetSample sets the "sample" field.
func (iv *InformationV1Update) SetSample(s []string) *InformationV1Update {
	iv.mutation.SetSample(s)
	return iv
}

// SetUncensored sets the "uncensored" field.
func (iv *InformationV1Update) SetUncensored(s string) *InformationV1Update {
	iv.mutation.SetUncensored(s)
	return iv
}

// SetNillableUncensored sets the "uncensored" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableUncensored(s *string) *InformationV1Update {
	if s != nil {
		iv.SetUncensored(*s)
	}
	return iv
}

// SetSeason sets the "season" field.
func (iv *InformationV1Update) SetSeason(s string) *InformationV1Update {
	iv.mutation.SetSeason(s)
	return iv
}

// SetNillableSeason sets the "season" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableSeason(s *string) *InformationV1Update {
	if s != nil {
		iv.SetSeason(*s)
	}
	return iv
}

// SetTotalEpisode sets the "total_episode" field.
func (iv *InformationV1Update) SetTotalEpisode(s string) *InformationV1Update {
	iv.mutation.SetTotalEpisode(s)
	return iv
}

// SetNillableTotalEpisode sets the "total_episode" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableTotalEpisode(s *string) *InformationV1Update {
	if s != nil {
		iv.SetTotalEpisode(*s)
	}
	return iv
}

// SetEpisode sets the "episode" field.
func (iv *InformationV1Update) SetEpisode(s string) *InformationV1Update {
	iv.mutation.SetEpisode(s)
	return iv
}

// SetNillableEpisode sets the "episode" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableEpisode(s *string) *InformationV1Update {
	if s != nil {
		iv.SetEpisode(*s)
	}
	return iv
}

// SetLanguage sets the "language" field.
func (iv *InformationV1Update) SetLanguage(s string) *InformationV1Update {
	iv.mutation.SetLanguage(s)
	return iv
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableLanguage(s *string) *InformationV1Update {
	if s != nil {
		iv.SetLanguage(*s)
	}
	return iv
}

// SetSharpness sets the "sharpness" field.
func (iv *InformationV1Update) SetSharpness(s string) *InformationV1Update {
	iv.mutation.SetSharpness(s)
	return iv
}

// SetNillableSharpness sets the "sharpness" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableSharpness(s *string) *InformationV1Update {
	if s != nil {
		iv.SetSharpness(*s)
	}
	return iv
}

// SetWatermark sets the "watermark" field.
func (iv *InformationV1Update) SetWatermark(b bool) *InformationV1Update {
	iv.mutation.SetWatermark(b)
	return iv
}

// SetNillableWatermark sets the "watermark" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableWatermark(b *bool) *InformationV1Update {
	if b != nil {
		iv.SetWatermark(*b)
	}
	return iv
}

// SetPermission sets the "permission" field.
func (iv *InformationV1Update) SetPermission(i informationv1.Permission) *InformationV1Update {
	iv.mutation.SetPermission(i)
	return iv
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (iv *InformationV1Update) SetNillablePermission(i *informationv1.Permission) *InformationV1Update {
	if i != nil {
		iv.SetPermission(*i)
	}
	return iv
}

// SetSign sets the "sign" field.
func (iv *InformationV1Update) SetSign(s string) *InformationV1Update {
	iv.mutation.SetSign(s)
	return iv
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableSign(s *string) *InformationV1Update {
	if s != nil {
		iv.SetSign(*s)
	}
	return iv
}

// ClearSign clears the value of the "sign" field.
func (iv *InformationV1Update) ClearSign() *InformationV1Update {
	iv.mutation.ClearSign()
	return iv
}

// SetTotalBlocks sets the "total_blocks" field.
func (iv *InformationV1Update) SetTotalBlocks(i int) *InformationV1Update {
	iv.mutation.ResetTotalBlocks()
	iv.mutation.SetTotalBlocks(i)
	return iv
}

// SetNillableTotalBlocks sets the "total_blocks" field if the given value is not nil.
func (iv *InformationV1Update) SetNillableTotalBlocks(i *int) *InformationV1Update {
	if i != nil {
		iv.SetTotalBlocks(*i)
	}
	return iv
}

// AddTotalBlocks adds i to the "total_blocks" field.
func (iv *InformationV1Update) AddTotalBlocks(i int) *InformationV1Update {
	iv.mutation.AddTotalBlocks(i)
	return iv
}

// AddTopListIDs adds the "top_lists" edge to the TopList entity by IDs.
func (iv *InformationV1Update) AddTopListIDs(ids ...uuid.UUID) *InformationV1Update {
	iv.mutation.AddTopListIDs(ids...)
	return iv
}

// AddTopLists adds the "top_lists" edges to the TopList entity.
func (iv *InformationV1Update) AddTopLists(t ...*TopList) *InformationV1Update {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iv.AddTopListIDs(ids...)
}

// SetChannel sets the "channel" edge to the Channel entity.
func (iv *InformationV1Update) SetChannel(c *Channel) *InformationV1Update {
	return iv.SetChannelID(c.ID)
}

// Mutation returns the InformationV1Mutation object of the builder.
func (iv *InformationV1Update) Mutation() *InformationV1Mutation {
	return iv.mutation
}

// ClearTopLists clears all "top_lists" edges to the TopList entity.
func (iv *InformationV1Update) ClearTopLists() *InformationV1Update {
	iv.mutation.ClearTopLists()
	return iv
}

// RemoveTopListIDs removes the "top_lists" edge to TopList entities by IDs.
func (iv *InformationV1Update) RemoveTopListIDs(ids ...uuid.UUID) *InformationV1Update {
	iv.mutation.RemoveTopListIDs(ids...)
	return iv
}

// RemoveTopLists removes "top_lists" edges to TopList entities.
func (iv *InformationV1Update) RemoveTopLists(t ...*TopList) *InformationV1Update {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iv.RemoveTopListIDs(ids...)
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (iv *InformationV1Update) ClearChannel() *InformationV1Update {
	iv.mutation.ClearChannel()
	return iv
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iv *InformationV1Update) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iv.hooks) == 0 {
		if err = iv.check(); err != nil {
			return 0, err
		}
		affected, err = iv.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InformationV1Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iv.check(); err != nil {
				return 0, err
			}
			iv.mutation = mutation
			affected, err = iv.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iv.hooks) - 1; i >= 0; i-- {
			if iv.hooks[i] == nil {
				return 0, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = iv.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iv.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iv *InformationV1Update) SaveX(ctx context.Context) int {
	affected, err := iv.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iv *InformationV1Update) Exec(ctx context.Context) error {
	_, err := iv.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iv *InformationV1Update) ExecX(ctx context.Context) {
	if err := iv.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iv *InformationV1Update) check() error {
	if v, ok := iv.mutation.Permission(); ok {
		if err := informationv1.PermissionValidator(v); err != nil {
			return &ValidationError{Name: "permission", err: fmt.Errorf(`media: validator failed for field "InformationV1.permission": %w`, err)}
		}
	}
	return nil
}

func (iv *InformationV1Update) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   informationv1.Table,
			Columns: informationv1.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: informationv1.FieldID,
			},
		},
	}
	if ps := iv.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iv.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldCreatedUnix,
		})
	}
	if value, ok := iv.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldCreatedUnix,
		})
	}
	if value, ok := iv.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldUpdatedUnix,
		})
	}
	if value, ok := iv.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldUpdatedUnix,
		})
	}
	if value, ok := iv.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldDeletedUnix,
		})
	}
	if value, ok := iv.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldDeletedUnix,
		})
	}
	if iv.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: informationv1.FieldDeletedUnix,
		})
	}
	if value, ok := iv.mutation.Root(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldRoot,
		})
	}
	if value, ok := iv.mutation.Thumb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldThumb,
		})
	}
	if value, ok := iv.mutation.ThumbPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldThumbPath,
		})
	}
	if value, ok := iv.mutation.Poster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPoster,
		})
	}
	if value, ok := iv.mutation.PosterPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPosterPath,
		})
	}
	if value, ok := iv.mutation.Media(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMedia,
		})
	}
	if value, ok := iv.mutation.MediaPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMediaPath,
		})
	}
	if value, ok := iv.mutation.MediaIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMediaIndex,
		})
	}
	if value, ok := iv.mutation.Frames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFrames,
		})
	}
	if value, ok := iv.mutation.FramesPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFramesPath,
		})
	}
	if value, ok := iv.mutation.FramesParticulars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldFramesParticulars,
		})
	}
	if iv.mutation.FramesParticularsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: informationv1.FieldFramesParticulars,
		})
	}
	if value, ok := iv.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldTitle,
		})
	}
	if value, ok := iv.mutation.VideoNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldVideoNo,
		})
	}
	if value, ok := iv.mutation.Intro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldIntro,
		})
	}
	if value, ok := iv.mutation.Alias(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldAlias,
		})
	}
	if value, ok := iv.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldRole,
		})
	}
	if value, ok := iv.mutation.Director(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldDirector,
		})
	}
	if value, ok := iv.mutation.Systematics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSystematics,
		})
	}
	if value, ok := iv.mutation.Producer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldProducer,
		})
	}
	if value, ok := iv.mutation.Publisher(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPublisher,
		})
	}
	if value, ok := iv.mutation.SortType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSortType,
		})
	}
	if value, ok := iv.mutation.Caption(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldCaption,
		})
	}
	if value, ok := iv.mutation.Group(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldGroup,
		})
	}
	if value, ok := iv.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldIndex,
		})
	}
	if value, ok := iv.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldReleaseDate,
		})
	}
	if value, ok := iv.mutation.Format(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFormat,
		})
	}
	if value, ok := iv.mutation.Series(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSeries,
		})
	}
	if value, ok := iv.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldTags,
		})
	}
	if value, ok := iv.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldLength,
		})
	}
	if value, ok := iv.mutation.Sample(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldSample,
		})
	}
	if value, ok := iv.mutation.Uncensored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldUncensored,
		})
	}
	if value, ok := iv.mutation.Season(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSeason,
		})
	}
	if value, ok := iv.mutation.TotalEpisode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldTotalEpisode,
		})
	}
	if value, ok := iv.mutation.Episode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldEpisode,
		})
	}
	if value, ok := iv.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldLanguage,
		})
	}
	if value, ok := iv.mutation.Sharpness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSharpness,
		})
	}
	if value, ok := iv.mutation.Watermark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: informationv1.FieldWatermark,
		})
	}
	if value, ok := iv.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: informationv1.FieldPermission,
		})
	}
	if value, ok := iv.mutation.Sign(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSign,
		})
	}
	if iv.mutation.SignCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: informationv1.FieldSign,
		})
	}
	if value, ok := iv.mutation.TotalBlocks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: informationv1.FieldTotalBlocks,
		})
	}
	if value, ok := iv.mutation.AddedTotalBlocks(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: informationv1.FieldTotalBlocks,
		})
	}
	if iv.mutation.TopListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   informationv1.TopListsTable,
			Columns: []string{informationv1.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iv.mutation.RemovedTopListsIDs(); len(nodes) > 0 && !iv.mutation.TopListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   informationv1.TopListsTable,
			Columns: []string{informationv1.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iv.mutation.TopListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   informationv1.TopListsTable,
			Columns: []string{informationv1.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iv.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   informationv1.ChannelTable,
			Columns: []string{informationv1.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iv.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   informationv1.ChannelTable,
			Columns: []string{informationv1.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iv.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{informationv1.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InformationV1UpdateOne is the builder for updating a single InformationV1 entity.
type InformationV1UpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InformationV1Mutation
}

// SetCreatedUnix sets the "created_unix" field.
func (ivo *InformationV1UpdateOne) SetCreatedUnix(i int64) *InformationV1UpdateOne {
	ivo.mutation.ResetCreatedUnix()
	ivo.mutation.SetCreatedUnix(i)
	return ivo
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableCreatedUnix(i *int64) *InformationV1UpdateOne {
	if i != nil {
		ivo.SetCreatedUnix(*i)
	}
	return ivo
}

// AddCreatedUnix adds i to the "created_unix" field.
func (ivo *InformationV1UpdateOne) AddCreatedUnix(i int64) *InformationV1UpdateOne {
	ivo.mutation.AddCreatedUnix(i)
	return ivo
}

// SetUpdatedUnix sets the "updated_unix" field.
func (ivo *InformationV1UpdateOne) SetUpdatedUnix(i int64) *InformationV1UpdateOne {
	ivo.mutation.ResetUpdatedUnix()
	ivo.mutation.SetUpdatedUnix(i)
	return ivo
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableUpdatedUnix(i *int64) *InformationV1UpdateOne {
	if i != nil {
		ivo.SetUpdatedUnix(*i)
	}
	return ivo
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (ivo *InformationV1UpdateOne) AddUpdatedUnix(i int64) *InformationV1UpdateOne {
	ivo.mutation.AddUpdatedUnix(i)
	return ivo
}

// SetDeletedUnix sets the "deleted_unix" field.
func (ivo *InformationV1UpdateOne) SetDeletedUnix(i int64) *InformationV1UpdateOne {
	ivo.mutation.ResetDeletedUnix()
	ivo.mutation.SetDeletedUnix(i)
	return ivo
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableDeletedUnix(i *int64) *InformationV1UpdateOne {
	if i != nil {
		ivo.SetDeletedUnix(*i)
	}
	return ivo
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (ivo *InformationV1UpdateOne) AddDeletedUnix(i int64) *InformationV1UpdateOne {
	ivo.mutation.AddDeletedUnix(i)
	return ivo
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (ivo *InformationV1UpdateOne) ClearDeletedUnix() *InformationV1UpdateOne {
	ivo.mutation.ClearDeletedUnix()
	return ivo
}

// SetChannelID sets the "channel_id" field.
func (ivo *InformationV1UpdateOne) SetChannelID(u uuid.UUID) *InformationV1UpdateOne {
	ivo.mutation.SetChannelID(u)
	return ivo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableChannelID(u *uuid.UUID) *InformationV1UpdateOne {
	if u != nil {
		ivo.SetChannelID(*u)
	}
	return ivo
}

// ClearChannelID clears the value of the "channel_id" field.
func (ivo *InformationV1UpdateOne) ClearChannelID() *InformationV1UpdateOne {
	ivo.mutation.ClearChannelID()
	return ivo
}

// SetRoot sets the "root" field.
func (ivo *InformationV1UpdateOne) SetRoot(s string) *InformationV1UpdateOne {
	ivo.mutation.SetRoot(s)
	return ivo
}

// SetNillableRoot sets the "root" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableRoot(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetRoot(*s)
	}
	return ivo
}

// SetThumb sets the "thumb" field.
func (ivo *InformationV1UpdateOne) SetThumb(s string) *InformationV1UpdateOne {
	ivo.mutation.SetThumb(s)
	return ivo
}

// SetNillableThumb sets the "thumb" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableThumb(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetThumb(*s)
	}
	return ivo
}

// SetThumbPath sets the "thumb_path" field.
func (ivo *InformationV1UpdateOne) SetThumbPath(s string) *InformationV1UpdateOne {
	ivo.mutation.SetThumbPath(s)
	return ivo
}

// SetNillableThumbPath sets the "thumb_path" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableThumbPath(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetThumbPath(*s)
	}
	return ivo
}

// SetPoster sets the "poster" field.
func (ivo *InformationV1UpdateOne) SetPoster(s string) *InformationV1UpdateOne {
	ivo.mutation.SetPoster(s)
	return ivo
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillablePoster(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetPoster(*s)
	}
	return ivo
}

// SetPosterPath sets the "poster_path" field.
func (ivo *InformationV1UpdateOne) SetPosterPath(s string) *InformationV1UpdateOne {
	ivo.mutation.SetPosterPath(s)
	return ivo
}

// SetNillablePosterPath sets the "poster_path" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillablePosterPath(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetPosterPath(*s)
	}
	return ivo
}

// SetMedia sets the "media" field.
func (ivo *InformationV1UpdateOne) SetMedia(s string) *InformationV1UpdateOne {
	ivo.mutation.SetMedia(s)
	return ivo
}

// SetNillableMedia sets the "media" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableMedia(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetMedia(*s)
	}
	return ivo
}

// SetMediaPath sets the "media_path" field.
func (ivo *InformationV1UpdateOne) SetMediaPath(s string) *InformationV1UpdateOne {
	ivo.mutation.SetMediaPath(s)
	return ivo
}

// SetNillableMediaPath sets the "media_path" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableMediaPath(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetMediaPath(*s)
	}
	return ivo
}

// SetMediaIndex sets the "media_index" field.
func (ivo *InformationV1UpdateOne) SetMediaIndex(s string) *InformationV1UpdateOne {
	ivo.mutation.SetMediaIndex(s)
	return ivo
}

// SetNillableMediaIndex sets the "media_index" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableMediaIndex(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetMediaIndex(*s)
	}
	return ivo
}

// SetFrames sets the "frames" field.
func (ivo *InformationV1UpdateOne) SetFrames(s string) *InformationV1UpdateOne {
	ivo.mutation.SetFrames(s)
	return ivo
}

// SetNillableFrames sets the "frames" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableFrames(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetFrames(*s)
	}
	return ivo
}

// SetFramesPath sets the "frames_path" field.
func (ivo *InformationV1UpdateOne) SetFramesPath(s string) *InformationV1UpdateOne {
	ivo.mutation.SetFramesPath(s)
	return ivo
}

// SetNillableFramesPath sets the "frames_path" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableFramesPath(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetFramesPath(*s)
	}
	return ivo
}

// SetFramesParticulars sets the "frames_particulars" field.
func (ivo *InformationV1UpdateOne) SetFramesParticulars(sf []schema.SkipFrame) *InformationV1UpdateOne {
	ivo.mutation.SetFramesParticulars(sf)
	return ivo
}

// ClearFramesParticulars clears the value of the "frames_particulars" field.
func (ivo *InformationV1UpdateOne) ClearFramesParticulars() *InformationV1UpdateOne {
	ivo.mutation.ClearFramesParticulars()
	return ivo
}

// SetTitle sets the "title" field.
func (ivo *InformationV1UpdateOne) SetTitle(s string) *InformationV1UpdateOne {
	ivo.mutation.SetTitle(s)
	return ivo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableTitle(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetTitle(*s)
	}
	return ivo
}

// SetVideoNo sets the "video_no" field.
func (ivo *InformationV1UpdateOne) SetVideoNo(s string) *InformationV1UpdateOne {
	ivo.mutation.SetVideoNo(s)
	return ivo
}

// SetNillableVideoNo sets the "video_no" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableVideoNo(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetVideoNo(*s)
	}
	return ivo
}

// SetIntro sets the "intro" field.
func (ivo *InformationV1UpdateOne) SetIntro(s string) *InformationV1UpdateOne {
	ivo.mutation.SetIntro(s)
	return ivo
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableIntro(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetIntro(*s)
	}
	return ivo
}

// SetAlias sets the "alias" field.
func (ivo *InformationV1UpdateOne) SetAlias(s []string) *InformationV1UpdateOne {
	ivo.mutation.SetAlias(s)
	return ivo
}

// SetRole sets the "role" field.
func (ivo *InformationV1UpdateOne) SetRole(s []string) *InformationV1UpdateOne {
	ivo.mutation.SetRole(s)
	return ivo
}

// SetDirector sets the "director" field.
func (ivo *InformationV1UpdateOne) SetDirector(s string) *InformationV1UpdateOne {
	ivo.mutation.SetDirector(s)
	return ivo
}

// SetNillableDirector sets the "director" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableDirector(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetDirector(*s)
	}
	return ivo
}

// SetSystematics sets the "systematics" field.
func (ivo *InformationV1UpdateOne) SetSystematics(s string) *InformationV1UpdateOne {
	ivo.mutation.SetSystematics(s)
	return ivo
}

// SetNillableSystematics sets the "systematics" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableSystematics(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetSystematics(*s)
	}
	return ivo
}

// SetProducer sets the "producer" field.
func (ivo *InformationV1UpdateOne) SetProducer(s string) *InformationV1UpdateOne {
	ivo.mutation.SetProducer(s)
	return ivo
}

// SetNillableProducer sets the "producer" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableProducer(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetProducer(*s)
	}
	return ivo
}

// SetPublisher sets the "publisher" field.
func (ivo *InformationV1UpdateOne) SetPublisher(s string) *InformationV1UpdateOne {
	ivo.mutation.SetPublisher(s)
	return ivo
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillablePublisher(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetPublisher(*s)
	}
	return ivo
}

// SetSortType sets the "sort_type" field.
func (ivo *InformationV1UpdateOne) SetSortType(s string) *InformationV1UpdateOne {
	ivo.mutation.SetSortType(s)
	return ivo
}

// SetNillableSortType sets the "sort_type" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableSortType(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetSortType(*s)
	}
	return ivo
}

// SetCaption sets the "caption" field.
func (ivo *InformationV1UpdateOne) SetCaption(s string) *InformationV1UpdateOne {
	ivo.mutation.SetCaption(s)
	return ivo
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableCaption(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetCaption(*s)
	}
	return ivo
}

// SetGroup sets the "group" field.
func (ivo *InformationV1UpdateOne) SetGroup(s string) *InformationV1UpdateOne {
	ivo.mutation.SetGroup(s)
	return ivo
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableGroup(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetGroup(*s)
	}
	return ivo
}

// SetIndex sets the "index" field.
func (ivo *InformationV1UpdateOne) SetIndex(s string) *InformationV1UpdateOne {
	ivo.mutation.SetIndex(s)
	return ivo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableIndex(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetIndex(*s)
	}
	return ivo
}

// SetReleaseDate sets the "release_date" field.
func (ivo *InformationV1UpdateOne) SetReleaseDate(s string) *InformationV1UpdateOne {
	ivo.mutation.SetReleaseDate(s)
	return ivo
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableReleaseDate(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetReleaseDate(*s)
	}
	return ivo
}

// SetFormat sets the "format" field.
func (ivo *InformationV1UpdateOne) SetFormat(s string) *InformationV1UpdateOne {
	ivo.mutation.SetFormat(s)
	return ivo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableFormat(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetFormat(*s)
	}
	return ivo
}

// SetSeries sets the "series" field.
func (ivo *InformationV1UpdateOne) SetSeries(s string) *InformationV1UpdateOne {
	ivo.mutation.SetSeries(s)
	return ivo
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableSeries(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetSeries(*s)
	}
	return ivo
}

// SetTags sets the "tags" field.
func (ivo *InformationV1UpdateOne) SetTags(s []string) *InformationV1UpdateOne {
	ivo.mutation.SetTags(s)
	return ivo
}

// SetLength sets the "length" field.
func (ivo *InformationV1UpdateOne) SetLength(s string) *InformationV1UpdateOne {
	ivo.mutation.SetLength(s)
	return ivo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableLength(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetLength(*s)
	}
	return ivo
}

// SetSample sets the "sample" field.
func (ivo *InformationV1UpdateOne) SetSample(s []string) *InformationV1UpdateOne {
	ivo.mutation.SetSample(s)
	return ivo
}

// SetUncensored sets the "uncensored" field.
func (ivo *InformationV1UpdateOne) SetUncensored(s string) *InformationV1UpdateOne {
	ivo.mutation.SetUncensored(s)
	return ivo
}

// SetNillableUncensored sets the "uncensored" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableUncensored(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetUncensored(*s)
	}
	return ivo
}

// SetSeason sets the "season" field.
func (ivo *InformationV1UpdateOne) SetSeason(s string) *InformationV1UpdateOne {
	ivo.mutation.SetSeason(s)
	return ivo
}

// SetNillableSeason sets the "season" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableSeason(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetSeason(*s)
	}
	return ivo
}

// SetTotalEpisode sets the "total_episode" field.
func (ivo *InformationV1UpdateOne) SetTotalEpisode(s string) *InformationV1UpdateOne {
	ivo.mutation.SetTotalEpisode(s)
	return ivo
}

// SetNillableTotalEpisode sets the "total_episode" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableTotalEpisode(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetTotalEpisode(*s)
	}
	return ivo
}

// SetEpisode sets the "episode" field.
func (ivo *InformationV1UpdateOne) SetEpisode(s string) *InformationV1UpdateOne {
	ivo.mutation.SetEpisode(s)
	return ivo
}

// SetNillableEpisode sets the "episode" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableEpisode(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetEpisode(*s)
	}
	return ivo
}

// SetLanguage sets the "language" field.
func (ivo *InformationV1UpdateOne) SetLanguage(s string) *InformationV1UpdateOne {
	ivo.mutation.SetLanguage(s)
	return ivo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableLanguage(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetLanguage(*s)
	}
	return ivo
}

// SetSharpness sets the "sharpness" field.
func (ivo *InformationV1UpdateOne) SetSharpness(s string) *InformationV1UpdateOne {
	ivo.mutation.SetSharpness(s)
	return ivo
}

// SetNillableSharpness sets the "sharpness" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableSharpness(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetSharpness(*s)
	}
	return ivo
}

// SetWatermark sets the "watermark" field.
func (ivo *InformationV1UpdateOne) SetWatermark(b bool) *InformationV1UpdateOne {
	ivo.mutation.SetWatermark(b)
	return ivo
}

// SetNillableWatermark sets the "watermark" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableWatermark(b *bool) *InformationV1UpdateOne {
	if b != nil {
		ivo.SetWatermark(*b)
	}
	return ivo
}

// SetPermission sets the "permission" field.
func (ivo *InformationV1UpdateOne) SetPermission(i informationv1.Permission) *InformationV1UpdateOne {
	ivo.mutation.SetPermission(i)
	return ivo
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillablePermission(i *informationv1.Permission) *InformationV1UpdateOne {
	if i != nil {
		ivo.SetPermission(*i)
	}
	return ivo
}

// SetSign sets the "sign" field.
func (ivo *InformationV1UpdateOne) SetSign(s string) *InformationV1UpdateOne {
	ivo.mutation.SetSign(s)
	return ivo
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableSign(s *string) *InformationV1UpdateOne {
	if s != nil {
		ivo.SetSign(*s)
	}
	return ivo
}

// ClearSign clears the value of the "sign" field.
func (ivo *InformationV1UpdateOne) ClearSign() *InformationV1UpdateOne {
	ivo.mutation.ClearSign()
	return ivo
}

// SetTotalBlocks sets the "total_blocks" field.
func (ivo *InformationV1UpdateOne) SetTotalBlocks(i int) *InformationV1UpdateOne {
	ivo.mutation.ResetTotalBlocks()
	ivo.mutation.SetTotalBlocks(i)
	return ivo
}

// SetNillableTotalBlocks sets the "total_blocks" field if the given value is not nil.
func (ivo *InformationV1UpdateOne) SetNillableTotalBlocks(i *int) *InformationV1UpdateOne {
	if i != nil {
		ivo.SetTotalBlocks(*i)
	}
	return ivo
}

// AddTotalBlocks adds i to the "total_blocks" field.
func (ivo *InformationV1UpdateOne) AddTotalBlocks(i int) *InformationV1UpdateOne {
	ivo.mutation.AddTotalBlocks(i)
	return ivo
}

// AddTopListIDs adds the "top_lists" edge to the TopList entity by IDs.
func (ivo *InformationV1UpdateOne) AddTopListIDs(ids ...uuid.UUID) *InformationV1UpdateOne {
	ivo.mutation.AddTopListIDs(ids...)
	return ivo
}

// AddTopLists adds the "top_lists" edges to the TopList entity.
func (ivo *InformationV1UpdateOne) AddTopLists(t ...*TopList) *InformationV1UpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ivo.AddTopListIDs(ids...)
}

// SetChannel sets the "channel" edge to the Channel entity.
func (ivo *InformationV1UpdateOne) SetChannel(c *Channel) *InformationV1UpdateOne {
	return ivo.SetChannelID(c.ID)
}

// Mutation returns the InformationV1Mutation object of the builder.
func (ivo *InformationV1UpdateOne) Mutation() *InformationV1Mutation {
	return ivo.mutation
}

// ClearTopLists clears all "top_lists" edges to the TopList entity.
func (ivo *InformationV1UpdateOne) ClearTopLists() *InformationV1UpdateOne {
	ivo.mutation.ClearTopLists()
	return ivo
}

// RemoveTopListIDs removes the "top_lists" edge to TopList entities by IDs.
func (ivo *InformationV1UpdateOne) RemoveTopListIDs(ids ...uuid.UUID) *InformationV1UpdateOne {
	ivo.mutation.RemoveTopListIDs(ids...)
	return ivo
}

// RemoveTopLists removes "top_lists" edges to TopList entities.
func (ivo *InformationV1UpdateOne) RemoveTopLists(t ...*TopList) *InformationV1UpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ivo.RemoveTopListIDs(ids...)
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (ivo *InformationV1UpdateOne) ClearChannel() *InformationV1UpdateOne {
	ivo.mutation.ClearChannel()
	return ivo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ivo *InformationV1UpdateOne) Select(field string, fields ...string) *InformationV1UpdateOne {
	ivo.fields = append([]string{field}, fields...)
	return ivo
}

// Save executes the query and returns the updated InformationV1 entity.
func (ivo *InformationV1UpdateOne) Save(ctx context.Context) (*InformationV1, error) {
	var (
		err  error
		node *InformationV1
	)
	if len(ivo.hooks) == 0 {
		if err = ivo.check(); err != nil {
			return nil, err
		}
		node, err = ivo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InformationV1Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ivo.check(); err != nil {
				return nil, err
			}
			ivo.mutation = mutation
			node, err = ivo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ivo.hooks) - 1; i >= 0; i-- {
			if ivo.hooks[i] == nil {
				return nil, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = ivo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ivo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ivo *InformationV1UpdateOne) SaveX(ctx context.Context) *InformationV1 {
	node, err := ivo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ivo *InformationV1UpdateOne) Exec(ctx context.Context) error {
	_, err := ivo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivo *InformationV1UpdateOne) ExecX(ctx context.Context) {
	if err := ivo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivo *InformationV1UpdateOne) check() error {
	if v, ok := ivo.mutation.Permission(); ok {
		if err := informationv1.PermissionValidator(v); err != nil {
			return &ValidationError{Name: "permission", err: fmt.Errorf(`media: validator failed for field "InformationV1.permission": %w`, err)}
		}
	}
	return nil
}

func (ivo *InformationV1UpdateOne) sqlSave(ctx context.Context) (_node *InformationV1, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   informationv1.Table,
			Columns: informationv1.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: informationv1.FieldID,
			},
		},
	}
	id, ok := ivo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`media: missing "InformationV1.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ivo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, informationv1.FieldID)
		for _, f := range fields {
			if !informationv1.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("media: invalid field %q for query", f)}
			}
			if f != informationv1.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ivo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ivo.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldCreatedUnix,
		})
	}
	if value, ok := ivo.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldCreatedUnix,
		})
	}
	if value, ok := ivo.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldUpdatedUnix,
		})
	}
	if value, ok := ivo.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldUpdatedUnix,
		})
	}
	if value, ok := ivo.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldDeletedUnix,
		})
	}
	if value, ok := ivo.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: informationv1.FieldDeletedUnix,
		})
	}
	if ivo.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: informationv1.FieldDeletedUnix,
		})
	}
	if value, ok := ivo.mutation.Root(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldRoot,
		})
	}
	if value, ok := ivo.mutation.Thumb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldThumb,
		})
	}
	if value, ok := ivo.mutation.ThumbPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldThumbPath,
		})
	}
	if value, ok := ivo.mutation.Poster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPoster,
		})
	}
	if value, ok := ivo.mutation.PosterPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPosterPath,
		})
	}
	if value, ok := ivo.mutation.Media(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMedia,
		})
	}
	if value, ok := ivo.mutation.MediaPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMediaPath,
		})
	}
	if value, ok := ivo.mutation.MediaIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldMediaIndex,
		})
	}
	if value, ok := ivo.mutation.Frames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFrames,
		})
	}
	if value, ok := ivo.mutation.FramesPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFramesPath,
		})
	}
	if value, ok := ivo.mutation.FramesParticulars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldFramesParticulars,
		})
	}
	if ivo.mutation.FramesParticularsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: informationv1.FieldFramesParticulars,
		})
	}
	if value, ok := ivo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldTitle,
		})
	}
	if value, ok := ivo.mutation.VideoNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldVideoNo,
		})
	}
	if value, ok := ivo.mutation.Intro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldIntro,
		})
	}
	if value, ok := ivo.mutation.Alias(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldAlias,
		})
	}
	if value, ok := ivo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldRole,
		})
	}
	if value, ok := ivo.mutation.Director(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldDirector,
		})
	}
	if value, ok := ivo.mutation.Systematics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSystematics,
		})
	}
	if value, ok := ivo.mutation.Producer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldProducer,
		})
	}
	if value, ok := ivo.mutation.Publisher(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldPublisher,
		})
	}
	if value, ok := ivo.mutation.SortType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSortType,
		})
	}
	if value, ok := ivo.mutation.Caption(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldCaption,
		})
	}
	if value, ok := ivo.mutation.Group(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldGroup,
		})
	}
	if value, ok := ivo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldIndex,
		})
	}
	if value, ok := ivo.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldReleaseDate,
		})
	}
	if value, ok := ivo.mutation.Format(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldFormat,
		})
	}
	if value, ok := ivo.mutation.Series(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSeries,
		})
	}
	if value, ok := ivo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldTags,
		})
	}
	if value, ok := ivo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldLength,
		})
	}
	if value, ok := ivo.mutation.Sample(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: informationv1.FieldSample,
		})
	}
	if value, ok := ivo.mutation.Uncensored(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldUncensored,
		})
	}
	if value, ok := ivo.mutation.Season(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSeason,
		})
	}
	if value, ok := ivo.mutation.TotalEpisode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldTotalEpisode,
		})
	}
	if value, ok := ivo.mutation.Episode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldEpisode,
		})
	}
	if value, ok := ivo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldLanguage,
		})
	}
	if value, ok := ivo.mutation.Sharpness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSharpness,
		})
	}
	if value, ok := ivo.mutation.Watermark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: informationv1.FieldWatermark,
		})
	}
	if value, ok := ivo.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: informationv1.FieldPermission,
		})
	}
	if value, ok := ivo.mutation.Sign(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: informationv1.FieldSign,
		})
	}
	if ivo.mutation.SignCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: informationv1.FieldSign,
		})
	}
	if value, ok := ivo.mutation.TotalBlocks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: informationv1.FieldTotalBlocks,
		})
	}
	if value, ok := ivo.mutation.AddedTotalBlocks(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: informationv1.FieldTotalBlocks,
		})
	}
	if ivo.mutation.TopListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   informationv1.TopListsTable,
			Columns: []string{informationv1.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivo.mutation.RemovedTopListsIDs(); len(nodes) > 0 && !ivo.mutation.TopListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   informationv1.TopListsTable,
			Columns: []string{informationv1.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivo.mutation.TopListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   informationv1.TopListsTable,
			Columns: []string{informationv1.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ivo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   informationv1.ChannelTable,
			Columns: []string{informationv1.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   informationv1.ChannelTable,
			Columns: []string{informationv1.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InformationV1{config: ivo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ivo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{informationv1.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
