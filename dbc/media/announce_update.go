// Code generated by entc, DO NOT EDIT.

package media

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tikafog/of/dbc/media/announce"
	"github.com/tikafog/of/dbc/media/predicate"
)

// AnnounceUpdate is the builder for updating Announce entities.
type AnnounceUpdate struct {
	config
	hooks    []Hook
	mutation *AnnounceMutation
}

// Where appends a list predicates to the AnnounceUpdate builder.
func (au *AnnounceUpdate) Where(ps ...predicate.Announce) *AnnounceUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedUnix sets the "created_unix" field.
func (au *AnnounceUpdate) SetCreatedUnix(i int64) *AnnounceUpdate {
	au.mutation.ResetCreatedUnix()
	au.mutation.SetCreatedUnix(i)
	return au
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableCreatedUnix(i *int64) *AnnounceUpdate {
	if i != nil {
		au.SetCreatedUnix(*i)
	}
	return au
}

// AddCreatedUnix adds i to the "created_unix" field.
func (au *AnnounceUpdate) AddCreatedUnix(i int64) *AnnounceUpdate {
	au.mutation.AddCreatedUnix(i)
	return au
}

// SetUpdatedUnix sets the "updated_unix" field.
func (au *AnnounceUpdate) SetUpdatedUnix(i int64) *AnnounceUpdate {
	au.mutation.ResetUpdatedUnix()
	au.mutation.SetUpdatedUnix(i)
	return au
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableUpdatedUnix(i *int64) *AnnounceUpdate {
	if i != nil {
		au.SetUpdatedUnix(*i)
	}
	return au
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (au *AnnounceUpdate) AddUpdatedUnix(i int64) *AnnounceUpdate {
	au.mutation.AddUpdatedUnix(i)
	return au
}

// SetDeletedUnix sets the "deleted_unix" field.
func (au *AnnounceUpdate) SetDeletedUnix(i int64) *AnnounceUpdate {
	au.mutation.ResetDeletedUnix()
	au.mutation.SetDeletedUnix(i)
	return au
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableDeletedUnix(i *int64) *AnnounceUpdate {
	if i != nil {
		au.SetDeletedUnix(*i)
	}
	return au
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (au *AnnounceUpdate) AddDeletedUnix(i int64) *AnnounceUpdate {
	au.mutation.AddDeletedUnix(i)
	return au
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (au *AnnounceUpdate) ClearDeletedUnix() *AnnounceUpdate {
	au.mutation.ClearDeletedUnix()
	return au
}

// SetAnnounceNo sets the "announce_no" field.
func (au *AnnounceUpdate) SetAnnounceNo(s string) *AnnounceUpdate {
	au.mutation.SetAnnounceNo(s)
	return au
}

// SetNillableAnnounceNo sets the "announce_no" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableAnnounceNo(s *string) *AnnounceUpdate {
	if s != nil {
		au.SetAnnounceNo(*s)
	}
	return au
}

// SetTitle sets the "title" field.
func (au *AnnounceUpdate) SetTitle(s string) *AnnounceUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableTitle(s *string) *AnnounceUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetKind sets the "kind" field.
func (au *AnnounceUpdate) SetKind(a announce.Kind) *AnnounceUpdate {
	au.mutation.SetKind(a)
	return au
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableKind(a *announce.Kind) *AnnounceUpdate {
	if a != nil {
		au.SetKind(*a)
	}
	return au
}

// SetContent sets the "content" field.
func (au *AnnounceUpdate) SetContent(s string) *AnnounceUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableContent(s *string) *AnnounceUpdate {
	if s != nil {
		au.SetContent(*s)
	}
	return au
}

// SetLink sets the "link" field.
func (au *AnnounceUpdate) SetLink(s string) *AnnounceUpdate {
	au.mutation.SetLink(s)
	return au
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableLink(s *string) *AnnounceUpdate {
	if s != nil {
		au.SetLink(*s)
	}
	return au
}

// SetSign sets the "sign" field.
func (au *AnnounceUpdate) SetSign(s string) *AnnounceUpdate {
	au.mutation.SetSign(s)
	return au
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (au *AnnounceUpdate) SetNillableSign(s *string) *AnnounceUpdate {
	if s != nil {
		au.SetSign(*s)
	}
	return au
}

// ClearSign clears the value of the "sign" field.
func (au *AnnounceUpdate) ClearSign() *AnnounceUpdate {
	au.mutation.ClearSign()
	return au
}

// Mutation returns the AnnounceMutation object of the builder.
func (au *AnnounceUpdate) Mutation() *AnnounceMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnnounceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnounceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnnounceUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnnounceUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnnounceUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AnnounceUpdate) check() error {
	if v, ok := au.mutation.Kind(); ok {
		if err := announce.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`media: validator failed for field "Announce.kind": %w`, err)}
		}
	}
	return nil
}

func (au *AnnounceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   announce.Table,
			Columns: announce.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: announce.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldCreatedUnix,
		})
	}
	if value, ok := au.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldCreatedUnix,
		})
	}
	if value, ok := au.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldUpdatedUnix,
		})
	}
	if value, ok := au.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldUpdatedUnix,
		})
	}
	if value, ok := au.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldDeletedUnix,
		})
	}
	if value, ok := au.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldDeletedUnix,
		})
	}
	if au.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: announce.FieldDeletedUnix,
		})
	}
	if value, ok := au.mutation.AnnounceNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldAnnounceNo,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldTitle,
		})
	}
	if value, ok := au.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: announce.FieldKind,
		})
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldContent,
		})
	}
	if value, ok := au.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldLink,
		})
	}
	if value, ok := au.mutation.Sign(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldSign,
		})
	}
	if au.mutation.SignCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: announce.FieldSign,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{announce.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AnnounceUpdateOne is the builder for updating a single Announce entity.
type AnnounceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnnounceMutation
}

// SetCreatedUnix sets the "created_unix" field.
func (auo *AnnounceUpdateOne) SetCreatedUnix(i int64) *AnnounceUpdateOne {
	auo.mutation.ResetCreatedUnix()
	auo.mutation.SetCreatedUnix(i)
	return auo
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableCreatedUnix(i *int64) *AnnounceUpdateOne {
	if i != nil {
		auo.SetCreatedUnix(*i)
	}
	return auo
}

// AddCreatedUnix adds i to the "created_unix" field.
func (auo *AnnounceUpdateOne) AddCreatedUnix(i int64) *AnnounceUpdateOne {
	auo.mutation.AddCreatedUnix(i)
	return auo
}

// SetUpdatedUnix sets the "updated_unix" field.
func (auo *AnnounceUpdateOne) SetUpdatedUnix(i int64) *AnnounceUpdateOne {
	auo.mutation.ResetUpdatedUnix()
	auo.mutation.SetUpdatedUnix(i)
	return auo
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableUpdatedUnix(i *int64) *AnnounceUpdateOne {
	if i != nil {
		auo.SetUpdatedUnix(*i)
	}
	return auo
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (auo *AnnounceUpdateOne) AddUpdatedUnix(i int64) *AnnounceUpdateOne {
	auo.mutation.AddUpdatedUnix(i)
	return auo
}

// SetDeletedUnix sets the "deleted_unix" field.
func (auo *AnnounceUpdateOne) SetDeletedUnix(i int64) *AnnounceUpdateOne {
	auo.mutation.ResetDeletedUnix()
	auo.mutation.SetDeletedUnix(i)
	return auo
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableDeletedUnix(i *int64) *AnnounceUpdateOne {
	if i != nil {
		auo.SetDeletedUnix(*i)
	}
	return auo
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (auo *AnnounceUpdateOne) AddDeletedUnix(i int64) *AnnounceUpdateOne {
	auo.mutation.AddDeletedUnix(i)
	return auo
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (auo *AnnounceUpdateOne) ClearDeletedUnix() *AnnounceUpdateOne {
	auo.mutation.ClearDeletedUnix()
	return auo
}

// SetAnnounceNo sets the "announce_no" field.
func (auo *AnnounceUpdateOne) SetAnnounceNo(s string) *AnnounceUpdateOne {
	auo.mutation.SetAnnounceNo(s)
	return auo
}

// SetNillableAnnounceNo sets the "announce_no" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableAnnounceNo(s *string) *AnnounceUpdateOne {
	if s != nil {
		auo.SetAnnounceNo(*s)
	}
	return auo
}

// SetTitle sets the "title" field.
func (auo *AnnounceUpdateOne) SetTitle(s string) *AnnounceUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableTitle(s *string) *AnnounceUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetKind sets the "kind" field.
func (auo *AnnounceUpdateOne) SetKind(a announce.Kind) *AnnounceUpdateOne {
	auo.mutation.SetKind(a)
	return auo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableKind(a *announce.Kind) *AnnounceUpdateOne {
	if a != nil {
		auo.SetKind(*a)
	}
	return auo
}

// SetContent sets the "content" field.
func (auo *AnnounceUpdateOne) SetContent(s string) *AnnounceUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableContent(s *string) *AnnounceUpdateOne {
	if s != nil {
		auo.SetContent(*s)
	}
	return auo
}

// SetLink sets the "link" field.
func (auo *AnnounceUpdateOne) SetLink(s string) *AnnounceUpdateOne {
	auo.mutation.SetLink(s)
	return auo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableLink(s *string) *AnnounceUpdateOne {
	if s != nil {
		auo.SetLink(*s)
	}
	return auo
}

// SetSign sets the "sign" field.
func (auo *AnnounceUpdateOne) SetSign(s string) *AnnounceUpdateOne {
	auo.mutation.SetSign(s)
	return auo
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (auo *AnnounceUpdateOne) SetNillableSign(s *string) *AnnounceUpdateOne {
	if s != nil {
		auo.SetSign(*s)
	}
	return auo
}

// ClearSign clears the value of the "sign" field.
func (auo *AnnounceUpdateOne) ClearSign() *AnnounceUpdateOne {
	auo.mutation.ClearSign()
	return auo
}

// Mutation returns the AnnounceMutation object of the builder.
func (auo *AnnounceUpdateOne) Mutation() *AnnounceMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnnounceUpdateOne) Select(field string, fields ...string) *AnnounceUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Announce entity.
func (auo *AnnounceUpdateOne) Save(ctx context.Context) (*Announce, error) {
	var (
		err  error
		node *Announce
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnounceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnnounceUpdateOne) SaveX(ctx context.Context) *Announce {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnnounceUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnnounceUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AnnounceUpdateOne) check() error {
	if v, ok := auo.mutation.Kind(); ok {
		if err := announce.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`media: validator failed for field "Announce.kind": %w`, err)}
		}
	}
	return nil
}

func (auo *AnnounceUpdateOne) sqlSave(ctx context.Context) (_node *Announce, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   announce.Table,
			Columns: announce.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: announce.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`media: missing "Announce.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, announce.FieldID)
		for _, f := range fields {
			if !announce.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("media: invalid field %q for query", f)}
			}
			if f != announce.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldCreatedUnix,
		})
	}
	if value, ok := auo.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldCreatedUnix,
		})
	}
	if value, ok := auo.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldUpdatedUnix,
		})
	}
	if value, ok := auo.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldUpdatedUnix,
		})
	}
	if value, ok := auo.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldDeletedUnix,
		})
	}
	if value, ok := auo.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: announce.FieldDeletedUnix,
		})
	}
	if auo.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: announce.FieldDeletedUnix,
		})
	}
	if value, ok := auo.mutation.AnnounceNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldAnnounceNo,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: announce.FieldKind,
		})
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldContent,
		})
	}
	if value, ok := auo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldLink,
		})
	}
	if value, ok := auo.mutation.Sign(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announce.FieldSign,
		})
	}
	if auo.mutation.SignCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: announce.FieldSign,
		})
	}
	_node = &Announce{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{announce.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
