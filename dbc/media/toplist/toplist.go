// Code generated by entc, DO NOT EDIT.

package toplist

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the toplist type in the database.
	Label = "top_list"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedUnix holds the string denoting the created_unix field in the database.
	FieldCreatedUnix = "created_unix"
	// FieldUpdatedUnix holds the string denoting the updated_unix field in the database.
	FieldUpdatedUnix = "updated_unix"
	// FieldDeletedUnix holds the string denoting the deleted_unix field in the database.
	FieldDeletedUnix = "deleted_unix"
	// FieldInformationID holds the string denoting the information_id field in the database.
	FieldInformationID = "information_id"
	// FieldPageID holds the string denoting the page_id field in the database.
	FieldPageID = "page_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldIntro holds the string denoting the intro field in the database.
	FieldIntro = "intro"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldLowerBanner holds the string denoting the lower_banner field in the database.
	FieldLowerBanner = "lower_banner"
	// FieldTopRight holds the string denoting the top_right field in the database.
	FieldTopRight = "top_right"
	// EdgeInformation holds the string denoting the information edge name in mutations.
	EdgeInformation = "information"
	// EdgePage holds the string denoting the page edge name in mutations.
	EdgePage = "page"
	// Table holds the table name of the toplist in the database.
	Table = "top_lists"
	// InformationTable is the table that holds the information relation/edge.
	InformationTable = "top_lists"
	// InformationInverseTable is the table name for the InformationV1 entity.
	// It exists in this package in order to avoid circular dependency with the "informationv1" package.
	InformationInverseTable = "information_v1s"
	// InformationColumn is the table column denoting the information relation/edge.
	InformationColumn = "information_id"
	// PageTable is the table that holds the page relation/edge.
	PageTable = "top_lists"
	// PageInverseTable is the table name for the Page entity.
	// It exists in this package in order to avoid circular dependency with the "page" package.
	PageInverseTable = "pages"
	// PageColumn is the table column denoting the page relation/edge.
	PageColumn = "page_id"
)

// Columns holds all SQL columns for toplist fields.
var Columns = []string{
	FieldID,
	FieldCreatedUnix,
	FieldUpdatedUnix,
	FieldDeletedUnix,
	FieldInformationID,
	FieldPageID,
	FieldTitle,
	FieldIntro,
	FieldCategory,
	FieldLowerBanner,
	FieldTopRight,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedUnix holds the default value on creation for the "created_unix" field.
	DefaultCreatedUnix int64
	// DefaultUpdatedUnix holds the default value on creation for the "updated_unix" field.
	DefaultUpdatedUnix int64
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultIntro holds the default value on creation for the "intro" field.
	DefaultIntro string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Category defines the type for the "category" enum field.
type Category string

// CategoryNormal is the default value of the Category enum.
const DefaultCategory = CategoryNormal

// Category values.
const (
	CategoryTop       Category = "top"
	CategoryNewest    Category = "newest"
	CategoryHottest   Category = "hottest"
	CategoryStar      Category = "star"
	CategorySpecial   Category = "special"
	CategoryFeatured  Category = "featured"
	CategoryProducer  Category = "producer"
	CategoryExclusive Category = "exclusive"
	CategoryNormal    Category = "normal"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryTop, CategoryNewest, CategoryHottest, CategoryStar, CategorySpecial, CategoryFeatured, CategoryProducer, CategoryExclusive, CategoryNormal:
		return nil
	default:
		return fmt.Errorf("toplist: invalid enum value for category field: %q", c)
	}
}

// LowerBanner defines the type for the "lower_banner" enum field.
type LowerBanner string

// LowerBannerNone is the default value of the LowerBanner enum.
const DefaultLowerBanner = LowerBannerNone

// LowerBanner values.
const (
	LowerBannerFree       LowerBanner = "free"
	LowerBannerDiscount   LowerBanner = "discount"
	LowerBannerEvent      LowerBanner = "event"
	LowerBannerPremium    LowerBanner = "premium"
	LowerBannerCollection LowerBanner = "collection"
	LowerBannerLiked      LowerBanner = "liked"
	LowerBannerNone       LowerBanner = "none"
)

func (lb LowerBanner) String() string {
	return string(lb)
}

// LowerBannerValidator is a validator for the "lower_banner" field enum values. It is called by the builders before save.
func LowerBannerValidator(lb LowerBanner) error {
	switch lb {
	case LowerBannerFree, LowerBannerDiscount, LowerBannerEvent, LowerBannerPremium, LowerBannerCollection, LowerBannerLiked, LowerBannerNone:
		return nil
	default:
		return fmt.Errorf("toplist: invalid enum value for lower_banner field: %q", lb)
	}
}

// TopRight defines the type for the "top_right" enum field.
type TopRight string

// TopRightNone is the default value of the TopRight enum.
const DefaultTopRight = TopRightNone

// TopRight values.
const (
	TopRightFree       TopRight = "free"
	TopRightDiscount   TopRight = "discount"
	TopRightEvent      TopRight = "event"
	TopRightPremium    TopRight = "premium"
	TopRightCollection TopRight = "collection"
	TopRightLiked      TopRight = "liked"
	TopRightNone       TopRight = "none"
)

func (tr TopRight) String() string {
	return string(tr)
}

// TopRightValidator is a validator for the "top_right" field enum values. It is called by the builders before save.
func TopRightValidator(tr TopRight) error {
	switch tr {
	case TopRightFree, TopRightDiscount, TopRightEvent, TopRightPremium, TopRightCollection, TopRightLiked, TopRightNone:
		return nil
	default:
		return fmt.Errorf("toplist: invalid enum value for top_right field: %q", tr)
	}
}
