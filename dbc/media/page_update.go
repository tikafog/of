// Code generated by entc, DO NOT EDIT.

package media

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/page"
	"github.com/tikafog/of/dbc/media/predicate"
	"github.com/tikafog/of/dbc/media/toplist"
)

// PageUpdate is the builder for updating Page entities.
type PageUpdate struct {
	config
	hooks    []Hook
	mutation *PageMutation
}

// Where appends a list predicates to the PageUpdate builder.
func (pu *PageUpdate) Where(ps ...predicate.Page) *PageUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedUnix sets the "created_unix" field.
func (pu *PageUpdate) SetCreatedUnix(i int64) *PageUpdate {
	pu.mutation.ResetCreatedUnix()
	pu.mutation.SetCreatedUnix(i)
	return pu
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (pu *PageUpdate) SetNillableCreatedUnix(i *int64) *PageUpdate {
	if i != nil {
		pu.SetCreatedUnix(*i)
	}
	return pu
}

// AddCreatedUnix adds i to the "created_unix" field.
func (pu *PageUpdate) AddCreatedUnix(i int64) *PageUpdate {
	pu.mutation.AddCreatedUnix(i)
	return pu
}

// SetUpdatedUnix sets the "updated_unix" field.
func (pu *PageUpdate) SetUpdatedUnix(i int64) *PageUpdate {
	pu.mutation.ResetUpdatedUnix()
	pu.mutation.SetUpdatedUnix(i)
	return pu
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (pu *PageUpdate) SetNillableUpdatedUnix(i *int64) *PageUpdate {
	if i != nil {
		pu.SetUpdatedUnix(*i)
	}
	return pu
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (pu *PageUpdate) AddUpdatedUnix(i int64) *PageUpdate {
	pu.mutation.AddUpdatedUnix(i)
	return pu
}

// SetDeletedUnix sets the "deleted_unix" field.
func (pu *PageUpdate) SetDeletedUnix(i int64) *PageUpdate {
	pu.mutation.ResetDeletedUnix()
	pu.mutation.SetDeletedUnix(i)
	return pu
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (pu *PageUpdate) SetNillableDeletedUnix(i *int64) *PageUpdate {
	if i != nil {
		pu.SetDeletedUnix(*i)
	}
	return pu
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (pu *PageUpdate) AddDeletedUnix(i int64) *PageUpdate {
	pu.mutation.AddDeletedUnix(i)
	return pu
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (pu *PageUpdate) ClearDeletedUnix() *PageUpdate {
	pu.mutation.ClearDeletedUnix()
	return pu
}

// SetParentID sets the "parent_id" field.
func (pu *PageUpdate) SetParentID(u uuid.UUID) *PageUpdate {
	pu.mutation.SetParentID(u)
	return pu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pu *PageUpdate) SetNillableParentID(u *uuid.UUID) *PageUpdate {
	if u != nil {
		pu.SetParentID(*u)
	}
	return pu
}

// ClearParentID clears the value of the "parent_id" field.
func (pu *PageUpdate) ClearParentID() *PageUpdate {
	pu.mutation.ClearParentID()
	return pu
}

// SetTitle sets the "title" field.
func (pu *PageUpdate) SetTitle(s string) *PageUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTitle(s *string) *PageUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetFeaturedIndex sets the "featured_index" field.
func (pu *PageUpdate) SetFeaturedIndex(i int8) *PageUpdate {
	pu.mutation.ResetFeaturedIndex()
	pu.mutation.SetFeaturedIndex(i)
	return pu
}

// SetNillableFeaturedIndex sets the "featured_index" field if the given value is not nil.
func (pu *PageUpdate) SetNillableFeaturedIndex(i *int8) *PageUpdate {
	if i != nil {
		pu.SetFeaturedIndex(*i)
	}
	return pu
}

// AddFeaturedIndex adds i to the "featured_index" field.
func (pu *PageUpdate) AddFeaturedIndex(i int8) *PageUpdate {
	pu.mutation.AddFeaturedIndex(i)
	return pu
}

// SetFeaturedContent sets the "featured_content" field.
func (pu *PageUpdate) SetFeaturedContent(s string) *PageUpdate {
	pu.mutation.SetFeaturedContent(s)
	return pu
}

// SetNillableFeaturedContent sets the "featured_content" field if the given value is not nil.
func (pu *PageUpdate) SetNillableFeaturedContent(s *string) *PageUpdate {
	if s != nil {
		pu.SetFeaturedContent(*s)
	}
	return pu
}

// SetRecommend sets the "recommend" field.
func (pu *PageUpdate) SetRecommend(i int64) *PageUpdate {
	pu.mutation.ResetRecommend()
	pu.mutation.SetRecommend(i)
	return pu
}

// SetNillableRecommend sets the "recommend" field if the given value is not nil.
func (pu *PageUpdate) SetNillableRecommend(i *int64) *PageUpdate {
	if i != nil {
		pu.SetRecommend(*i)
	}
	return pu
}

// AddRecommend adds i to the "recommend" field.
func (pu *PageUpdate) AddRecommend(i int64) *PageUpdate {
	pu.mutation.AddRecommend(i)
	return pu
}

// SetParent sets the "parent" edge to the Page entity.
func (pu *PageUpdate) SetParent(p *Page) *PageUpdate {
	return pu.SetParentID(p.ID)
}

// AddSubpageIDs adds the "subpages" edge to the Page entity by IDs.
func (pu *PageUpdate) AddSubpageIDs(ids ...uuid.UUID) *PageUpdate {
	pu.mutation.AddSubpageIDs(ids...)
	return pu
}

// AddSubpages adds the "subpages" edges to the Page entity.
func (pu *PageUpdate) AddSubpages(p ...*Page) *PageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddSubpageIDs(ids...)
}

// AddTopListIDs adds the "top_lists" edge to the TopList entity by IDs.
func (pu *PageUpdate) AddTopListIDs(ids ...uuid.UUID) *PageUpdate {
	pu.mutation.AddTopListIDs(ids...)
	return pu
}

// AddTopLists adds the "top_lists" edges to the TopList entity.
func (pu *PageUpdate) AddTopLists(t ...*TopList) *PageUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTopListIDs(ids...)
}

// Mutation returns the PageMutation object of the builder.
func (pu *PageUpdate) Mutation() *PageMutation {
	return pu.mutation
}

// ClearParent clears the "parent" edge to the Page entity.
func (pu *PageUpdate) ClearParent() *PageUpdate {
	pu.mutation.ClearParent()
	return pu
}

// ClearSubpages clears all "subpages" edges to the Page entity.
func (pu *PageUpdate) ClearSubpages() *PageUpdate {
	pu.mutation.ClearSubpages()
	return pu
}

// RemoveSubpageIDs removes the "subpages" edge to Page entities by IDs.
func (pu *PageUpdate) RemoveSubpageIDs(ids ...uuid.UUID) *PageUpdate {
	pu.mutation.RemoveSubpageIDs(ids...)
	return pu
}

// RemoveSubpages removes "subpages" edges to Page entities.
func (pu *PageUpdate) RemoveSubpages(p ...*Page) *PageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveSubpageIDs(ids...)
}

// ClearTopLists clears all "top_lists" edges to the TopList entity.
func (pu *PageUpdate) ClearTopLists() *PageUpdate {
	pu.mutation.ClearTopLists()
	return pu
}

// RemoveTopListIDs removes the "top_lists" edge to TopList entities by IDs.
func (pu *PageUpdate) RemoveTopListIDs(ids ...uuid.UUID) *PageUpdate {
	pu.mutation.RemoveTopListIDs(ids...)
	return pu
}

// RemoveTopLists removes "top_lists" edges to TopList entities.
func (pu *PageUpdate) RemoveTopLists(t ...*TopList) *PageUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTopListIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PageUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PageUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PageUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   page.Table,
			Columns: page.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: page.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldCreatedUnix,
		})
	}
	if value, ok := pu.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldCreatedUnix,
		})
	}
	if value, ok := pu.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldUpdatedUnix,
		})
	}
	if value, ok := pu.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldUpdatedUnix,
		})
	}
	if value, ok := pu.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldDeletedUnix,
		})
	}
	if value, ok := pu.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldDeletedUnix,
		})
	}
	if pu.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: page.FieldDeletedUnix,
		})
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldTitle,
		})
	}
	if value, ok := pu.mutation.FeaturedIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: page.FieldFeaturedIndex,
		})
	}
	if value, ok := pu.mutation.AddedFeaturedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: page.FieldFeaturedIndex,
		})
	}
	if value, ok := pu.mutation.FeaturedContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldFeaturedContent,
		})
	}
	if value, ok := pu.mutation.Recommend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldRecommend,
		})
	}
	if value, ok := pu.mutation.AddedRecommend(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldRecommend,
		})
	}
	if pu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.ParentTable,
			Columns: []string{page.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.ParentTable,
			Columns: []string{page.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SubpagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.SubpagesTable,
			Columns: []string{page.SubpagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSubpagesIDs(); len(nodes) > 0 && !pu.mutation.SubpagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.SubpagesTable,
			Columns: []string{page.SubpagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubpagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.SubpagesTable,
			Columns: []string{page.SubpagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TopListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.TopListsTable,
			Columns: []string{page.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTopListsIDs(); len(nodes) > 0 && !pu.mutation.TopListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.TopListsTable,
			Columns: []string{page.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TopListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.TopListsTable,
			Columns: []string{page.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PageUpdateOne is the builder for updating a single Page entity.
type PageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageMutation
}

// SetCreatedUnix sets the "created_unix" field.
func (puo *PageUpdateOne) SetCreatedUnix(i int64) *PageUpdateOne {
	puo.mutation.ResetCreatedUnix()
	puo.mutation.SetCreatedUnix(i)
	return puo
}

// SetNillableCreatedUnix sets the "created_unix" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableCreatedUnix(i *int64) *PageUpdateOne {
	if i != nil {
		puo.SetCreatedUnix(*i)
	}
	return puo
}

// AddCreatedUnix adds i to the "created_unix" field.
func (puo *PageUpdateOne) AddCreatedUnix(i int64) *PageUpdateOne {
	puo.mutation.AddCreatedUnix(i)
	return puo
}

// SetUpdatedUnix sets the "updated_unix" field.
func (puo *PageUpdateOne) SetUpdatedUnix(i int64) *PageUpdateOne {
	puo.mutation.ResetUpdatedUnix()
	puo.mutation.SetUpdatedUnix(i)
	return puo
}

// SetNillableUpdatedUnix sets the "updated_unix" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableUpdatedUnix(i *int64) *PageUpdateOne {
	if i != nil {
		puo.SetUpdatedUnix(*i)
	}
	return puo
}

// AddUpdatedUnix adds i to the "updated_unix" field.
func (puo *PageUpdateOne) AddUpdatedUnix(i int64) *PageUpdateOne {
	puo.mutation.AddUpdatedUnix(i)
	return puo
}

// SetDeletedUnix sets the "deleted_unix" field.
func (puo *PageUpdateOne) SetDeletedUnix(i int64) *PageUpdateOne {
	puo.mutation.ResetDeletedUnix()
	puo.mutation.SetDeletedUnix(i)
	return puo
}

// SetNillableDeletedUnix sets the "deleted_unix" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableDeletedUnix(i *int64) *PageUpdateOne {
	if i != nil {
		puo.SetDeletedUnix(*i)
	}
	return puo
}

// AddDeletedUnix adds i to the "deleted_unix" field.
func (puo *PageUpdateOne) AddDeletedUnix(i int64) *PageUpdateOne {
	puo.mutation.AddDeletedUnix(i)
	return puo
}

// ClearDeletedUnix clears the value of the "deleted_unix" field.
func (puo *PageUpdateOne) ClearDeletedUnix() *PageUpdateOne {
	puo.mutation.ClearDeletedUnix()
	return puo
}

// SetParentID sets the "parent_id" field.
func (puo *PageUpdateOne) SetParentID(u uuid.UUID) *PageUpdateOne {
	puo.mutation.SetParentID(u)
	return puo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableParentID(u *uuid.UUID) *PageUpdateOne {
	if u != nil {
		puo.SetParentID(*u)
	}
	return puo
}

// ClearParentID clears the value of the "parent_id" field.
func (puo *PageUpdateOne) ClearParentID() *PageUpdateOne {
	puo.mutation.ClearParentID()
	return puo
}

// SetTitle sets the "title" field.
func (puo *PageUpdateOne) SetTitle(s string) *PageUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTitle(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetFeaturedIndex sets the "featured_index" field.
func (puo *PageUpdateOne) SetFeaturedIndex(i int8) *PageUpdateOne {
	puo.mutation.ResetFeaturedIndex()
	puo.mutation.SetFeaturedIndex(i)
	return puo
}

// SetNillableFeaturedIndex sets the "featured_index" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableFeaturedIndex(i *int8) *PageUpdateOne {
	if i != nil {
		puo.SetFeaturedIndex(*i)
	}
	return puo
}

// AddFeaturedIndex adds i to the "featured_index" field.
func (puo *PageUpdateOne) AddFeaturedIndex(i int8) *PageUpdateOne {
	puo.mutation.AddFeaturedIndex(i)
	return puo
}

// SetFeaturedContent sets the "featured_content" field.
func (puo *PageUpdateOne) SetFeaturedContent(s string) *PageUpdateOne {
	puo.mutation.SetFeaturedContent(s)
	return puo
}

// SetNillableFeaturedContent sets the "featured_content" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableFeaturedContent(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetFeaturedContent(*s)
	}
	return puo
}

// SetRecommend sets the "recommend" field.
func (puo *PageUpdateOne) SetRecommend(i int64) *PageUpdateOne {
	puo.mutation.ResetRecommend()
	puo.mutation.SetRecommend(i)
	return puo
}

// SetNillableRecommend sets the "recommend" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableRecommend(i *int64) *PageUpdateOne {
	if i != nil {
		puo.SetRecommend(*i)
	}
	return puo
}

// AddRecommend adds i to the "recommend" field.
func (puo *PageUpdateOne) AddRecommend(i int64) *PageUpdateOne {
	puo.mutation.AddRecommend(i)
	return puo
}

// SetParent sets the "parent" edge to the Page entity.
func (puo *PageUpdateOne) SetParent(p *Page) *PageUpdateOne {
	return puo.SetParentID(p.ID)
}

// AddSubpageIDs adds the "subpages" edge to the Page entity by IDs.
func (puo *PageUpdateOne) AddSubpageIDs(ids ...uuid.UUID) *PageUpdateOne {
	puo.mutation.AddSubpageIDs(ids...)
	return puo
}

// AddSubpages adds the "subpages" edges to the Page entity.
func (puo *PageUpdateOne) AddSubpages(p ...*Page) *PageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddSubpageIDs(ids...)
}

// AddTopListIDs adds the "top_lists" edge to the TopList entity by IDs.
func (puo *PageUpdateOne) AddTopListIDs(ids ...uuid.UUID) *PageUpdateOne {
	puo.mutation.AddTopListIDs(ids...)
	return puo
}

// AddTopLists adds the "top_lists" edges to the TopList entity.
func (puo *PageUpdateOne) AddTopLists(t ...*TopList) *PageUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTopListIDs(ids...)
}

// Mutation returns the PageMutation object of the builder.
func (puo *PageUpdateOne) Mutation() *PageMutation {
	return puo.mutation
}

// ClearParent clears the "parent" edge to the Page entity.
func (puo *PageUpdateOne) ClearParent() *PageUpdateOne {
	puo.mutation.ClearParent()
	return puo
}

// ClearSubpages clears all "subpages" edges to the Page entity.
func (puo *PageUpdateOne) ClearSubpages() *PageUpdateOne {
	puo.mutation.ClearSubpages()
	return puo
}

// RemoveSubpageIDs removes the "subpages" edge to Page entities by IDs.
func (puo *PageUpdateOne) RemoveSubpageIDs(ids ...uuid.UUID) *PageUpdateOne {
	puo.mutation.RemoveSubpageIDs(ids...)
	return puo
}

// RemoveSubpages removes "subpages" edges to Page entities.
func (puo *PageUpdateOne) RemoveSubpages(p ...*Page) *PageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveSubpageIDs(ids...)
}

// ClearTopLists clears all "top_lists" edges to the TopList entity.
func (puo *PageUpdateOne) ClearTopLists() *PageUpdateOne {
	puo.mutation.ClearTopLists()
	return puo
}

// RemoveTopListIDs removes the "top_lists" edge to TopList entities by IDs.
func (puo *PageUpdateOne) RemoveTopListIDs(ids ...uuid.UUID) *PageUpdateOne {
	puo.mutation.RemoveTopListIDs(ids...)
	return puo
}

// RemoveTopLists removes "top_lists" edges to TopList entities.
func (puo *PageUpdateOne) RemoveTopLists(t ...*TopList) *PageUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTopListIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PageUpdateOne) Select(field string, fields ...string) *PageUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Page entity.
func (puo *PageUpdateOne) Save(ctx context.Context) (*Page, error) {
	var (
		err  error
		node *Page
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("media: uninitialized hook (forgotten import media/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PageUpdateOne) SaveX(ctx context.Context) *Page {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PageUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PageUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PageUpdateOne) sqlSave(ctx context.Context) (_node *Page, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   page.Table,
			Columns: page.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: page.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`media: missing "Page.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, page.FieldID)
		for _, f := range fields {
			if !page.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("media: invalid field %q for query", f)}
			}
			if f != page.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldCreatedUnix,
		})
	}
	if value, ok := puo.mutation.AddedCreatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldCreatedUnix,
		})
	}
	if value, ok := puo.mutation.UpdatedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldUpdatedUnix,
		})
	}
	if value, ok := puo.mutation.AddedUpdatedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldUpdatedUnix,
		})
	}
	if value, ok := puo.mutation.DeletedUnix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldDeletedUnix,
		})
	}
	if value, ok := puo.mutation.AddedDeletedUnix(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldDeletedUnix,
		})
	}
	if puo.mutation.DeletedUnixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: page.FieldDeletedUnix,
		})
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldTitle,
		})
	}
	if value, ok := puo.mutation.FeaturedIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: page.FieldFeaturedIndex,
		})
	}
	if value, ok := puo.mutation.AddedFeaturedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: page.FieldFeaturedIndex,
		})
	}
	if value, ok := puo.mutation.FeaturedContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldFeaturedContent,
		})
	}
	if value, ok := puo.mutation.Recommend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldRecommend,
		})
	}
	if value, ok := puo.mutation.AddedRecommend(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: page.FieldRecommend,
		})
	}
	if puo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.ParentTable,
			Columns: []string{page.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.ParentTable,
			Columns: []string{page.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SubpagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.SubpagesTable,
			Columns: []string{page.SubpagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSubpagesIDs(); len(nodes) > 0 && !puo.mutation.SubpagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.SubpagesTable,
			Columns: []string{page.SubpagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubpagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.SubpagesTable,
			Columns: []string{page.SubpagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TopListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.TopListsTable,
			Columns: []string{page.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTopListsIDs(); len(nodes) > 0 && !puo.mutation.TopListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.TopListsTable,
			Columns: []string{page.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TopListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.TopListsTable,
			Columns: []string{page.TopListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: toplist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Page{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
