// Code generated by entc, DO NOT EDIT.

package page

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedUnix applies equality check predicate on the "created_unix" field. It's identical to CreatedUnixEQ.
func CreatedUnix(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedUnix), v))
	})
}

// UpdatedUnix applies equality check predicate on the "updated_unix" field. It's identical to UpdatedUnixEQ.
func UpdatedUnix(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// DeletedUnix applies equality check predicate on the "deleted_unix" field. It's identical to DeletedUnixEQ.
func DeletedUnix(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedUnix), v))
	})
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// FeaturedIndex applies equality check predicate on the "featured_index" field. It's identical to FeaturedIndexEQ.
func FeaturedIndex(v int8) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeaturedIndex), v))
	})
}

// FeaturedContent applies equality check predicate on the "featured_content" field. It's identical to FeaturedContentEQ.
func FeaturedContent(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeaturedContent), v))
	})
}

// Recommend applies equality check predicate on the "recommend" field. It's identical to RecommendEQ.
func Recommend(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecommend), v))
	})
}

// CreatedUnixEQ applies the EQ predicate on the "created_unix" field.
func CreatedUnixEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixNEQ applies the NEQ predicate on the "created_unix" field.
func CreatedUnixNEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixIn applies the In predicate on the "created_unix" field.
func CreatedUnixIn(vs ...int64) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedUnix), v...))
	})
}

// CreatedUnixNotIn applies the NotIn predicate on the "created_unix" field.
func CreatedUnixNotIn(vs ...int64) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedUnix), v...))
	})
}

// CreatedUnixGT applies the GT predicate on the "created_unix" field.
func CreatedUnixGT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixGTE applies the GTE predicate on the "created_unix" field.
func CreatedUnixGTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixLT applies the LT predicate on the "created_unix" field.
func CreatedUnixLT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedUnix), v))
	})
}

// CreatedUnixLTE applies the LTE predicate on the "created_unix" field.
func CreatedUnixLTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedUnix), v))
	})
}

// UpdatedUnixEQ applies the EQ predicate on the "updated_unix" field.
func UpdatedUnixEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixNEQ applies the NEQ predicate on the "updated_unix" field.
func UpdatedUnixNEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixIn applies the In predicate on the "updated_unix" field.
func UpdatedUnixIn(vs ...int64) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixNotIn applies the NotIn predicate on the "updated_unix" field.
func UpdatedUnixNotIn(vs ...int64) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedUnix), v...))
	})
}

// UpdatedUnixGT applies the GT predicate on the "updated_unix" field.
func UpdatedUnixGT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixGTE applies the GTE predicate on the "updated_unix" field.
func UpdatedUnixGTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLT applies the LT predicate on the "updated_unix" field.
func UpdatedUnixLT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedUnix), v))
	})
}

// UpdatedUnixLTE applies the LTE predicate on the "updated_unix" field.
func UpdatedUnixLTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedUnix), v))
	})
}

// DeletedUnixEQ applies the EQ predicate on the "deleted_unix" field.
func DeletedUnixEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixNEQ applies the NEQ predicate on the "deleted_unix" field.
func DeletedUnixNEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixIn applies the In predicate on the "deleted_unix" field.
func DeletedUnixIn(vs ...int64) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedUnix), v...))
	})
}

// DeletedUnixNotIn applies the NotIn predicate on the "deleted_unix" field.
func DeletedUnixNotIn(vs ...int64) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedUnix), v...))
	})
}

// DeletedUnixGT applies the GT predicate on the "deleted_unix" field.
func DeletedUnixGT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixGTE applies the GTE predicate on the "deleted_unix" field.
func DeletedUnixGTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixLT applies the LT predicate on the "deleted_unix" field.
func DeletedUnixLT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixLTE applies the LTE predicate on the "deleted_unix" field.
func DeletedUnixLTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedUnix), v))
	})
}

// DeletedUnixIsNil applies the IsNil predicate on the "deleted_unix" field.
func DeletedUnixIsNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedUnix)))
	})
}

// DeletedUnixNotNil applies the NotNil predicate on the "deleted_unix" field.
func DeletedUnixNotNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedUnix)))
	})
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uuid.UUID) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentID), v))
	})
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uuid.UUID) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentID), v...))
	})
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uuid.UUID) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentID), v...))
	})
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParentID)))
	})
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParentID)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// FeaturedIndexEQ applies the EQ predicate on the "featured_index" field.
func FeaturedIndexEQ(v int8) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeaturedIndex), v))
	})
}

// FeaturedIndexNEQ applies the NEQ predicate on the "featured_index" field.
func FeaturedIndexNEQ(v int8) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeaturedIndex), v))
	})
}

// FeaturedIndexIn applies the In predicate on the "featured_index" field.
func FeaturedIndexIn(vs ...int8) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeaturedIndex), v...))
	})
}

// FeaturedIndexNotIn applies the NotIn predicate on the "featured_index" field.
func FeaturedIndexNotIn(vs ...int8) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeaturedIndex), v...))
	})
}

// FeaturedIndexGT applies the GT predicate on the "featured_index" field.
func FeaturedIndexGT(v int8) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeaturedIndex), v))
	})
}

// FeaturedIndexGTE applies the GTE predicate on the "featured_index" field.
func FeaturedIndexGTE(v int8) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeaturedIndex), v))
	})
}

// FeaturedIndexLT applies the LT predicate on the "featured_index" field.
func FeaturedIndexLT(v int8) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeaturedIndex), v))
	})
}

// FeaturedIndexLTE applies the LTE predicate on the "featured_index" field.
func FeaturedIndexLTE(v int8) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeaturedIndex), v))
	})
}

// FeaturedContentEQ applies the EQ predicate on the "featured_content" field.
func FeaturedContentEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentNEQ applies the NEQ predicate on the "featured_content" field.
func FeaturedContentNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentIn applies the In predicate on the "featured_content" field.
func FeaturedContentIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeaturedContent), v...))
	})
}

// FeaturedContentNotIn applies the NotIn predicate on the "featured_content" field.
func FeaturedContentNotIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeaturedContent), v...))
	})
}

// FeaturedContentGT applies the GT predicate on the "featured_content" field.
func FeaturedContentGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentGTE applies the GTE predicate on the "featured_content" field.
func FeaturedContentGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentLT applies the LT predicate on the "featured_content" field.
func FeaturedContentLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentLTE applies the LTE predicate on the "featured_content" field.
func FeaturedContentLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentContains applies the Contains predicate on the "featured_content" field.
func FeaturedContentContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentHasPrefix applies the HasPrefix predicate on the "featured_content" field.
func FeaturedContentHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentHasSuffix applies the HasSuffix predicate on the "featured_content" field.
func FeaturedContentHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentEqualFold applies the EqualFold predicate on the "featured_content" field.
func FeaturedContentEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeaturedContent), v))
	})
}

// FeaturedContentContainsFold applies the ContainsFold predicate on the "featured_content" field.
func FeaturedContentContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeaturedContent), v))
	})
}

// RecommendEQ applies the EQ predicate on the "recommend" field.
func RecommendEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecommend), v))
	})
}

// RecommendNEQ applies the NEQ predicate on the "recommend" field.
func RecommendNEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecommend), v))
	})
}

// RecommendIn applies the In predicate on the "recommend" field.
func RecommendIn(vs ...int64) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecommend), v...))
	})
}

// RecommendNotIn applies the NotIn predicate on the "recommend" field.
func RecommendNotIn(vs ...int64) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecommend), v...))
	})
}

// RecommendGT applies the GT predicate on the "recommend" field.
func RecommendGT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecommend), v))
	})
}

// RecommendGTE applies the GTE predicate on the "recommend" field.
func RecommendGTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecommend), v))
	})
}

// RecommendLT applies the LT predicate on the "recommend" field.
func RecommendLT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecommend), v))
	})
}

// RecommendLTE applies the LTE predicate on the "recommend" field.
func RecommendLTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecommend), v))
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubpages applies the HasEdge predicate on the "subpages" edge.
func HasSubpages() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubpagesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubpagesTable, SubpagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubpagesWith applies the HasEdge predicate on the "subpages" edge with a given conditions (other predicates).
func HasSubpagesWith(preds ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubpagesTable, SubpagesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTopLists applies the HasEdge predicate on the "top_lists" edge.
func HasTopLists() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TopListsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TopListsTable, TopListsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopListsWith applies the HasEdge predicate on the "top_lists" edge with a given conditions (other predicates).
func HasTopListsWith(preds ...predicate.TopList) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TopListsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TopListsTable, TopListsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		p(s.Not())
	})
}
