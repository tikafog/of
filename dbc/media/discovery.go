// Code generated by entc, DO NOT EDIT.

package media

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/discovery"
)

// Discovery is the model entity for the Discovery schema.
type Discovery struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedUnix holds the value of the "created_unix" field.
	CreatedUnix int64 `json:"created_unix,omitempty"`
	// UpdatedUnix holds the value of the "updated_unix" field.
	UpdatedUnix int64 `json:"updated_unix,omitempty"`
	// DeletedUnix holds the value of the "deleted_unix" field.
	DeletedUnix int64 `json:"deleted_unix,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Rid holds the value of the "rid" field.
	Rid string `json:"rid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// Mtype holds the value of the "mtype" field.
	Mtype discovery.Mtype `json:"mtype,omitempty"`
	// Links holds the value of the "links" field.
	Links []string `json:"links,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Discovery) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case discovery.FieldLinks:
			values[i] = new([]byte)
		case discovery.FieldCreatedUnix, discovery.FieldUpdatedUnix, discovery.FieldDeletedUnix:
			values[i] = new(sql.NullInt64)
		case discovery.FieldDate, discovery.FieldRid, discovery.FieldTitle, discovery.FieldDetail, discovery.FieldMtype:
			values[i] = new(sql.NullString)
		case discovery.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Discovery", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Discovery fields.
func (d *Discovery) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discovery.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case discovery.FieldCreatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_unix", values[i])
			} else if value.Valid {
				d.CreatedUnix = value.Int64
			}
		case discovery.FieldUpdatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_unix", values[i])
			} else if value.Valid {
				d.UpdatedUnix = value.Int64
			}
		case discovery.FieldDeletedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_unix", values[i])
			} else if value.Valid {
				d.DeletedUnix = value.Int64
			}
		case discovery.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				d.Date = value.String
			}
		case discovery.FieldRid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rid", values[i])
			} else if value.Valid {
				d.Rid = value.String
			}
		case discovery.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				d.Title = value.String
			}
		case discovery.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				d.Detail = value.String
			}
		case discovery.FieldMtype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mtype", values[i])
			} else if value.Valid {
				d.Mtype = discovery.Mtype(value.String)
			}
		case discovery.FieldLinks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field links", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Links); err != nil {
					return fmt.Errorf("unmarshal field links: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Discovery.
// Note that you need to call Discovery.Unwrap() before calling this method if this Discovery
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Discovery) Update() *DiscoveryUpdateOne {
	return (&DiscoveryClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Discovery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Discovery) Unwrap() *Discovery {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("media: Discovery is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Discovery) String() string {
	var builder strings.Builder
	builder.WriteString("Discovery(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", created_unix=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedUnix))
	builder.WriteString(", updated_unix=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedUnix))
	builder.WriteString(", deleted_unix=")
	builder.WriteString(fmt.Sprintf("%v", d.DeletedUnix))
	builder.WriteString(", date=")
	builder.WriteString(d.Date)
	builder.WriteString(", rid=")
	builder.WriteString(d.Rid)
	builder.WriteString(", title=")
	builder.WriteString(d.Title)
	builder.WriteString(", detail=")
	builder.WriteString(d.Detail)
	builder.WriteString(", mtype=")
	builder.WriteString(fmt.Sprintf("%v", d.Mtype))
	builder.WriteString(", links=")
	builder.WriteString(fmt.Sprintf("%v", d.Links))
	builder.WriteByte(')')
	return builder.String()
}

// Discoveries is a parsable slice of Discovery.
type Discoveries []*Discovery

func (d Discoveries) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
