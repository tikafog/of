// Code generated by entc, DO NOT EDIT.

package media

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/announce"
)

// Announce is the model entity for the Announce schema.
type Announce struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedUnix holds the value of the "created_unix" field.
	CreatedUnix int64 `json:"created_unix,omitempty"`
	// UpdatedUnix holds the value of the "updated_unix" field.
	UpdatedUnix int64 `json:"updated_unix,omitempty"`
	// DeletedUnix holds the value of the "deleted_unix" field.
	DeletedUnix int64 `json:"deleted_unix,omitempty"`
	// AnnounceNo holds the value of the "announce_no" field.
	AnnounceNo string `json:"announce_no,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind announce.Kind `json:"kind,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Sign holds the value of the "sign" field.
	Sign string `json:"sign,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Announce) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case announce.FieldCreatedUnix, announce.FieldUpdatedUnix, announce.FieldDeletedUnix:
			values[i] = new(sql.NullInt64)
		case announce.FieldAnnounceNo, announce.FieldTitle, announce.FieldKind, announce.FieldContent, announce.FieldLink, announce.FieldSign:
			values[i] = new(sql.NullString)
		case announce.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Announce", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Announce fields.
func (a *Announce) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case announce.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case announce.FieldCreatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_unix", values[i])
			} else if value.Valid {
				a.CreatedUnix = value.Int64
			}
		case announce.FieldUpdatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_unix", values[i])
			} else if value.Valid {
				a.UpdatedUnix = value.Int64
			}
		case announce.FieldDeletedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_unix", values[i])
			} else if value.Valid {
				a.DeletedUnix = value.Int64
			}
		case announce.FieldAnnounceNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field announce_no", values[i])
			} else if value.Valid {
				a.AnnounceNo = value.String
			}
		case announce.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case announce.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				a.Kind = announce.Kind(value.String)
			}
		case announce.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				a.Content = value.String
			}
		case announce.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				a.Link = value.String
			}
		case announce.FieldSign:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sign", values[i])
			} else if value.Valid {
				a.Sign = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Announce.
// Note that you need to call Announce.Unwrap() before calling this method if this Announce
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Announce) Update() *AnnounceUpdateOne {
	return (&AnnounceClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Announce entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Announce) Unwrap() *Announce {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("media: Announce is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Announce) String() string {
	var builder strings.Builder
	builder.WriteString("Announce(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_unix=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedUnix))
	builder.WriteString(", updated_unix=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdatedUnix))
	builder.WriteString(", deleted_unix=")
	builder.WriteString(fmt.Sprintf("%v", a.DeletedUnix))
	builder.WriteString(", announce_no=")
	builder.WriteString(a.AnnounceNo)
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", kind=")
	builder.WriteString(fmt.Sprintf("%v", a.Kind))
	builder.WriteString(", content=")
	builder.WriteString(a.Content)
	builder.WriteString(", link=")
	builder.WriteString(a.Link)
	builder.WriteString(", sign=")
	builder.WriteString(a.Sign)
	builder.WriteByte(')')
	return builder.String()
}

// Announces is a parsable slice of Announce.
type Announces []*Announce

func (a Announces) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
