// Code generated by ent, DO NOT EDIT.

package media

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/informationv1"
	"github.com/tikafog/of/dbc/media/page"
	"github.com/tikafog/of/dbc/media/predicate"
	"github.com/tikafog/of/dbc/media/toplist"
)

// TopListQuery is the builder for querying TopList entities.
type TopListQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TopList
	// eager-loading edges.
	withInformation *InformationV1Query
	withPage        *PageQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TopListQuery builder.
func (tlq *TopListQuery) Where(ps ...predicate.TopList) *TopListQuery {
	tlq.predicates = append(tlq.predicates, ps...)
	return tlq
}

// Limit adds a limit step to the query.
func (tlq *TopListQuery) Limit(limit int) *TopListQuery {
	tlq.limit = &limit
	return tlq
}

// Offset adds an offset step to the query.
func (tlq *TopListQuery) Offset(offset int) *TopListQuery {
	tlq.offset = &offset
	return tlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tlq *TopListQuery) Unique(unique bool) *TopListQuery {
	tlq.unique = &unique
	return tlq
}

// Order adds an order step to the query.
func (tlq *TopListQuery) Order(o ...OrderFunc) *TopListQuery {
	tlq.order = append(tlq.order, o...)
	return tlq
}

// QueryInformation chains the current query on the "information" edge.
func (tlq *TopListQuery) QueryInformation() *InformationV1Query {
	query := &InformationV1Query{config: tlq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(toplist.Table, toplist.FieldID, selector),
			sqlgraph.To(informationv1.Table, informationv1.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, toplist.InformationTable, toplist.InformationColumn),
		)
		fromU = sqlgraph.SetNeighbors(tlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPage chains the current query on the "page" edge.
func (tlq *TopListQuery) QueryPage() *PageQuery {
	query := &PageQuery{config: tlq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(toplist.Table, toplist.FieldID, selector),
			sqlgraph.To(page.Table, page.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, toplist.PageTable, toplist.PageColumn),
		)
		fromU = sqlgraph.SetNeighbors(tlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TopList entity from the query.
// Returns a *NotFoundError when no TopList was found.
func (tlq *TopListQuery) First(ctx context.Context) (*TopList, error) {
	nodes, err := tlq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{toplist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tlq *TopListQuery) FirstX(ctx context.Context) *TopList {
	node, err := tlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TopList ID from the query.
// Returns a *NotFoundError when no TopList ID was found.
func (tlq *TopListQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tlq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{toplist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tlq *TopListQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TopList entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TopList entity is found.
// Returns a *NotFoundError when no TopList entities are found.
func (tlq *TopListQuery) Only(ctx context.Context) (*TopList, error) {
	nodes, err := tlq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{toplist.Label}
	default:
		return nil, &NotSingularError{toplist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tlq *TopListQuery) OnlyX(ctx context.Context) *TopList {
	node, err := tlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TopList ID in the query.
// Returns a *NotSingularError when more than one TopList ID is found.
// Returns a *NotFoundError when no entities are found.
func (tlq *TopListQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tlq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{toplist.Label}
	default:
		err = &NotSingularError{toplist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tlq *TopListQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TopLists.
func (tlq *TopListQuery) All(ctx context.Context) ([]*TopList, error) {
	if err := tlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tlq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tlq *TopListQuery) AllX(ctx context.Context) []*TopList {
	nodes, err := tlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TopList IDs.
func (tlq *TopListQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := tlq.Select(toplist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tlq *TopListQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tlq *TopListQuery) Count(ctx context.Context) (int, error) {
	if err := tlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tlq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tlq *TopListQuery) CountX(ctx context.Context) int {
	count, err := tlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tlq *TopListQuery) Exist(ctx context.Context) (bool, error) {
	if err := tlq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tlq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tlq *TopListQuery) ExistX(ctx context.Context) bool {
	exist, err := tlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TopListQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tlq *TopListQuery) Clone() *TopListQuery {
	if tlq == nil {
		return nil
	}
	return &TopListQuery{
		config:          tlq.config,
		limit:           tlq.limit,
		offset:          tlq.offset,
		order:           append([]OrderFunc{}, tlq.order...),
		predicates:      append([]predicate.TopList{}, tlq.predicates...),
		withInformation: tlq.withInformation.Clone(),
		withPage:        tlq.withPage.Clone(),
		// clone intermediate query.
		sql:    tlq.sql.Clone(),
		path:   tlq.path,
		unique: tlq.unique,
	}
}

// WithInformation tells the query-builder to eager-load the nodes that are connected to
// the "information" edge. The optional arguments are used to configure the query builder of the edge.
func (tlq *TopListQuery) WithInformation(opts ...func(*InformationV1Query)) *TopListQuery {
	query := &InformationV1Query{config: tlq.config}
	for _, opt := range opts {
		opt(query)
	}
	tlq.withInformation = query
	return tlq
}

// WithPage tells the query-builder to eager-load the nodes that are connected to
// the "page" edge. The optional arguments are used to configure the query builder of the edge.
func (tlq *TopListQuery) WithPage(opts ...func(*PageQuery)) *TopListQuery {
	query := &PageQuery{config: tlq.config}
	for _, opt := range opts {
		opt(query)
	}
	tlq.withPage = query
	return tlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedUnix int64 `json:"created_unix,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TopList.Query().
//		GroupBy(toplist.FieldCreatedUnix).
//		Aggregate(media.Count()).
//		Scan(ctx, &v)
func (tlq *TopListQuery) GroupBy(field string, fields ...string) *TopListGroupBy {
	grbuild := &TopListGroupBy{config: tlq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tlq.sqlQuery(ctx), nil
	}
	grbuild.label = toplist.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedUnix int64 `json:"created_unix,omitempty"`
//	}
//
//	client.TopList.Query().
//		Select(toplist.FieldCreatedUnix).
//		Scan(ctx, &v)
func (tlq *TopListQuery) Select(fields ...string) *TopListSelect {
	tlq.fields = append(tlq.fields, fields...)
	selbuild := &TopListSelect{TopListQuery: tlq}
	selbuild.label = toplist.Label
	selbuild.flds, selbuild.scan = &tlq.fields, selbuild.Scan
	return selbuild
}

func (tlq *TopListQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tlq.fields {
		if !toplist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("media: invalid field %q for query", f)}
		}
	}
	if tlq.path != nil {
		prev, err := tlq.path(ctx)
		if err != nil {
			return err
		}
		tlq.sql = prev
	}
	return nil
}

func (tlq *TopListQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TopList, error) {
	var (
		nodes       = []*TopList{}
		_spec       = tlq.querySpec()
		loadedTypes = [2]bool{
			tlq.withInformation != nil,
			tlq.withPage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*TopList).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &TopList{config: tlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tlq.modifiers) > 0 {
		_spec.Modifiers = tlq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tlq.withInformation; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*TopList)
		for i := range nodes {
			fk := nodes[i].InformationID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(informationv1.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "information_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Information = n
			}
		}
	}

	if query := tlq.withPage; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*TopList)
		for i := range nodes {
			fk := nodes[i].PageID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(page.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "page_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Page = n
			}
		}
	}

	return nodes, nil
}

func (tlq *TopListQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tlq.querySpec()
	if len(tlq.modifiers) > 0 {
		_spec.Modifiers = tlq.modifiers
	}
	_spec.Node.Columns = tlq.fields
	if len(tlq.fields) > 0 {
		_spec.Unique = tlq.unique != nil && *tlq.unique
	}
	return sqlgraph.CountNodes(ctx, tlq.driver, _spec)
}

func (tlq *TopListQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tlq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("media: check existence: %w", err)
	}
	return n > 0, nil
}

func (tlq *TopListQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   toplist.Table,
			Columns: toplist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: toplist.FieldID,
			},
		},
		From:   tlq.sql,
		Unique: true,
	}
	if unique := tlq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tlq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, toplist.FieldID)
		for i := range fields {
			if fields[i] != toplist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tlq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tlq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tlq *TopListQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tlq.driver.Dialect())
	t1 := builder.Table(toplist.Table)
	columns := tlq.fields
	if len(columns) == 0 {
		columns = toplist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tlq.sql != nil {
		selector = tlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tlq.unique != nil && *tlq.unique {
		selector.Distinct()
	}
	for _, m := range tlq.modifiers {
		m(selector)
	}
	for _, p := range tlq.predicates {
		p(selector)
	}
	for _, p := range tlq.order {
		p(selector)
	}
	if offset := tlq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tlq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (tlq *TopListQuery) ForUpdate(opts ...sql.LockOption) *TopListQuery {
	if tlq.driver.Dialect() == dialect.Postgres {
		tlq.Unique(false)
	}
	tlq.modifiers = append(tlq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return tlq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (tlq *TopListQuery) ForShare(opts ...sql.LockOption) *TopListQuery {
	if tlq.driver.Dialect() == dialect.Postgres {
		tlq.Unique(false)
	}
	tlq.modifiers = append(tlq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return tlq
}

// TopListGroupBy is the group-by builder for TopList entities.
type TopListGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tlgb *TopListGroupBy) Aggregate(fns ...AggregateFunc) *TopListGroupBy {
	tlgb.fns = append(tlgb.fns, fns...)
	return tlgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tlgb *TopListGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tlgb.path(ctx)
	if err != nil {
		return err
	}
	tlgb.sql = query
	return tlgb.sqlScan(ctx, v)
}

func (tlgb *TopListGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tlgb.fields {
		if !toplist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tlgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tlgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tlgb *TopListGroupBy) sqlQuery() *sql.Selector {
	selector := tlgb.sql.Select()
	aggregation := make([]string, 0, len(tlgb.fns))
	for _, fn := range tlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tlgb.fields)+len(tlgb.fns))
		for _, f := range tlgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tlgb.fields...)...)
}

// TopListSelect is the builder for selecting fields of TopList entities.
type TopListSelect struct {
	*TopListQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tls *TopListSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tls.prepareQuery(ctx); err != nil {
		return err
	}
	tls.sql = tls.TopListQuery.sqlQuery(ctx)
	return tls.sqlScan(ctx, v)
}

func (tls *TopListSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tls.sql.Query()
	if err := tls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
