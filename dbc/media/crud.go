// Code generated by entc, DO NOT EDIT.

package media

import (
	"time"

	"github.com/tikafog/of/dbc/media/announce"
	"github.com/tikafog/of/dbc/media/channel"
	"github.com/tikafog/of/dbc/media/discovery"
	"github.com/tikafog/of/dbc/media/informationv1"
	"github.com/tikafog/of/dbc/media/page"
	"github.com/tikafog/of/dbc/media/toplist"
)

func (ac *AnnounceCreate) SetAnnounce(input *Announce) *AnnounceCreate {
	ac.SetCreatedUnix(input.CreatedUnix)
	ac.SetUpdatedUnix(input.UpdatedUnix)
	ac.SetAnnounceNo(input.AnnounceNo)
	ac.SetTitle(input.Title)
	ac.SetKind(input.Kind)
	ac.SetContent(input.Content)
	ac.SetLink(input.Link)
	return ac
}

func (ac *AnnounceCreate) SetAnnounceWithOptional(input *Announce) *AnnounceCreate {
	ac.SetCreatedUnix(input.CreatedUnix)
	ac.SetUpdatedUnix(input.UpdatedUnix)
	ac.SetAnnounceNo(input.AnnounceNo)
	ac.SetTitle(input.Title)
	ac.SetKind(input.Kind)
	ac.SetContent(input.Content)
	ac.SetLink(input.Link)
	ac.SetSign(input.Sign)
	return ac
}
func (ac *AnnounceCreate) SoftDelete() *AnnounceCreate {
	ac.SetDeletedUnix(time.Now().Unix())
	return ac
}

func (auo *AnnounceUpdateOne) SoftDelete() *AnnounceUpdateOne {
	auo.SetDeletedUnix(time.Now().Unix())
	return auo
}

func (auo *AnnounceUpdateOne) SetAnnounce(input *Announce) *AnnounceUpdateOne {
	auo.SetUpdatedUnix(input.UpdatedUnix)
	auo.SetAnnounceNo(input.AnnounceNo)
	auo.SetTitle(input.Title)
	auo.SetKind(input.Kind)
	auo.SetContent(input.Content)
	auo.SetLink(input.Link)
	return auo
}

func (au *AnnounceUpdate) SoftDelete() *AnnounceUpdate {
	au.SetDeletedUnix(time.Now().Unix())
	return au
}

func (au *AnnounceUpdate) SetAnnounce(input *Announce) *AnnounceUpdate {
	au.SetUpdatedUnix(input.UpdatedUnix)
	au.SetAnnounceNo(input.AnnounceNo)
	au.SetTitle(input.Title)
	au.SetKind(input.Kind)
	au.SetContent(input.Content)
	au.SetLink(input.Link)
	return au
}

func (au *AnnounceUpdate) SetAnnounceWithOptional(input *Announce) *AnnounceUpdate {
	au.SetUpdatedUnix(input.UpdatedUnix)
	au.SetAnnounceNo(input.AnnounceNo)
	au.SetTitle(input.Title)
	au.SetKind(input.Kind)
	au.SetContent(input.Content)
	au.SetLink(input.Link)
	au.SetSign(input.Sign)
	return au
}

func (aq *AnnounceQuery) UseSoftDelete() *AnnounceQuery {
	return aq.Where(announce.DeletedUnixIsNil())
}

func (cc *ChannelCreate) SetChannel(input *Channel) *ChannelCreate {
	cc.SetCreatedUnix(input.CreatedUnix)
	cc.SetUpdatedUnix(input.UpdatedUnix)
	return cc
}

func (cc *ChannelCreate) SetChannelWithOptional(input *Channel) *ChannelCreate {
	cc.SetCreatedUnix(input.CreatedUnix)
	cc.SetUpdatedUnix(input.UpdatedUnix)
	cc.SetComment(input.Comment)
	return cc
}
func (cc *ChannelCreate) SoftDelete() *ChannelCreate {
	cc.SetDeletedUnix(time.Now().Unix())
	return cc
}

func (cuo *ChannelUpdateOne) SoftDelete() *ChannelUpdateOne {
	cuo.SetDeletedUnix(time.Now().Unix())
	return cuo
}

func (cuo *ChannelUpdateOne) SetChannel(input *Channel) *ChannelUpdateOne {
	cuo.SetUpdatedUnix(input.UpdatedUnix)
	return cuo
}

func (cu *ChannelUpdate) SoftDelete() *ChannelUpdate {
	cu.SetDeletedUnix(time.Now().Unix())
	return cu
}

func (cu *ChannelUpdate) SetChannel(input *Channel) *ChannelUpdate {
	cu.SetUpdatedUnix(input.UpdatedUnix)
	return cu
}

func (cu *ChannelUpdate) SetChannelWithOptional(input *Channel) *ChannelUpdate {
	cu.SetUpdatedUnix(input.UpdatedUnix)
	cu.SetComment(input.Comment)
	return cu
}

func (cq *ChannelQuery) UseSoftDelete() *ChannelQuery {
	return cq.Where(channel.DeletedUnixIsNil())
}

func (dc *DiscoveryCreate) SetDiscovery(input *Discovery) *DiscoveryCreate {
	dc.SetCreatedUnix(input.CreatedUnix)
	dc.SetUpdatedUnix(input.UpdatedUnix)
	dc.SetDate(input.Date)
	dc.SetRid(input.Rid)
	dc.SetTitle(input.Title)
	dc.SetDetail(input.Detail)
	dc.SetMtype(input.Mtype)
	dc.SetLinks(input.Links)
	return dc
}

func (dc *DiscoveryCreate) SetDiscoveryWithOptional(input *Discovery) *DiscoveryCreate {
	dc.SetCreatedUnix(input.CreatedUnix)
	dc.SetUpdatedUnix(input.UpdatedUnix)
	dc.SetDate(input.Date)
	dc.SetRid(input.Rid)
	dc.SetTitle(input.Title)
	dc.SetDetail(input.Detail)
	dc.SetMtype(input.Mtype)
	dc.SetLinks(input.Links)
	return dc
}
func (dc *DiscoveryCreate) SoftDelete() *DiscoveryCreate {
	dc.SetDeletedUnix(time.Now().Unix())
	return dc
}

func (duo *DiscoveryUpdateOne) SoftDelete() *DiscoveryUpdateOne {
	duo.SetDeletedUnix(time.Now().Unix())
	return duo
}

func (duo *DiscoveryUpdateOne) SetDiscovery(input *Discovery) *DiscoveryUpdateOne {
	duo.SetUpdatedUnix(input.UpdatedUnix)
	duo.SetDate(input.Date)
	duo.SetRid(input.Rid)
	duo.SetTitle(input.Title)
	duo.SetDetail(input.Detail)
	duo.SetMtype(input.Mtype)
	duo.SetLinks(input.Links)
	return duo
}

func (du *DiscoveryUpdate) SoftDelete() *DiscoveryUpdate {
	du.SetDeletedUnix(time.Now().Unix())
	return du
}

func (du *DiscoveryUpdate) SetDiscovery(input *Discovery) *DiscoveryUpdate {
	du.SetUpdatedUnix(input.UpdatedUnix)
	du.SetDate(input.Date)
	du.SetRid(input.Rid)
	du.SetTitle(input.Title)
	du.SetDetail(input.Detail)
	du.SetMtype(input.Mtype)
	du.SetLinks(input.Links)
	return du
}

func (du *DiscoveryUpdate) SetDiscoveryWithOptional(input *Discovery) *DiscoveryUpdate {
	du.SetUpdatedUnix(input.UpdatedUnix)
	du.SetDate(input.Date)
	du.SetRid(input.Rid)
	du.SetTitle(input.Title)
	du.SetDetail(input.Detail)
	du.SetMtype(input.Mtype)
	du.SetLinks(input.Links)
	return du
}

func (dq *DiscoveryQuery) UseSoftDelete() *DiscoveryQuery {
	return dq.Where(discovery.DeletedUnixIsNil())
}

func (iv *InformationV1Create) SetInformationV1(input *InformationV1) *InformationV1Create {
	iv.SetCreatedUnix(input.CreatedUnix)
	iv.SetUpdatedUnix(input.UpdatedUnix)
	iv.SetRoot(input.Root)
	iv.SetThumb(input.Thumb)
	iv.SetThumbPath(input.ThumbPath)
	iv.SetPoster(input.Poster)
	iv.SetPosterPath(input.PosterPath)
	iv.SetMedia(input.Media)
	iv.SetMediaPath(input.MediaPath)
	iv.SetMediaIndex(input.MediaIndex)
	iv.SetFrames(input.Frames)
	iv.SetFramesPath(input.FramesPath)
	iv.SetTitle(input.Title)
	iv.SetVideoNo(input.VideoNo)
	iv.SetIntro(input.Intro)
	iv.SetAlias(input.Alias)
	iv.SetRole(input.Role)
	iv.SetDirector(input.Director)
	iv.SetSystematics(input.Systematics)
	iv.SetProducer(input.Producer)
	iv.SetPublisher(input.Publisher)
	iv.SetSortType(input.SortType)
	iv.SetCaption(input.Caption)
	iv.SetGroup(input.Group)
	iv.SetIndex(input.Index)
	iv.SetReleaseDate(input.ReleaseDate)
	iv.SetFormat(input.Format)
	iv.SetSeries(input.Series)
	iv.SetTags(input.Tags)
	iv.SetLength(input.Length)
	iv.SetSample(input.Sample)
	iv.SetUncensored(input.Uncensored)
	iv.SetSeason(input.Season)
	iv.SetTotalEpisode(input.TotalEpisode)
	iv.SetEpisode(input.Episode)
	iv.SetLanguage(input.Language)
	iv.SetSharpness(input.Sharpness)
	iv.SetWatermark(input.Watermark)
	iv.SetPermission(input.Permission)
	iv.SetTotalBlocks(input.TotalBlocks)
	return iv
}

func (iv *InformationV1Create) SetInformationV1WithOptional(input *InformationV1) *InformationV1Create {
	iv.SetCreatedUnix(input.CreatedUnix)
	iv.SetUpdatedUnix(input.UpdatedUnix)
	iv.SetChannelID(input.ChannelID)
	iv.SetRoot(input.Root)
	iv.SetThumb(input.Thumb)
	iv.SetThumbPath(input.ThumbPath)
	iv.SetPoster(input.Poster)
	iv.SetPosterPath(input.PosterPath)
	iv.SetMedia(input.Media)
	iv.SetMediaPath(input.MediaPath)
	iv.SetMediaIndex(input.MediaIndex)
	iv.SetFrames(input.Frames)
	iv.SetFramesPath(input.FramesPath)
	iv.SetFramesParticulars(input.FramesParticulars)
	iv.SetTitle(input.Title)
	iv.SetVideoNo(input.VideoNo)
	iv.SetIntro(input.Intro)
	iv.SetAlias(input.Alias)
	iv.SetRole(input.Role)
	iv.SetDirector(input.Director)
	iv.SetSystematics(input.Systematics)
	iv.SetProducer(input.Producer)
	iv.SetPublisher(input.Publisher)
	iv.SetSortType(input.SortType)
	iv.SetCaption(input.Caption)
	iv.SetGroup(input.Group)
	iv.SetIndex(input.Index)
	iv.SetReleaseDate(input.ReleaseDate)
	iv.SetFormat(input.Format)
	iv.SetSeries(input.Series)
	iv.SetTags(input.Tags)
	iv.SetLength(input.Length)
	iv.SetSample(input.Sample)
	iv.SetUncensored(input.Uncensored)
	iv.SetSeason(input.Season)
	iv.SetTotalEpisode(input.TotalEpisode)
	iv.SetEpisode(input.Episode)
	iv.SetLanguage(input.Language)
	iv.SetSharpness(input.Sharpness)
	iv.SetWatermark(input.Watermark)
	iv.SetPermission(input.Permission)
	iv.SetSign(input.Sign)
	iv.SetTotalBlocks(input.TotalBlocks)
	return iv
}
func (iv *InformationV1Create) SoftDelete() *InformationV1Create {
	iv.SetDeletedUnix(time.Now().Unix())
	return iv
}

func (ivo *InformationV1UpdateOne) SoftDelete() *InformationV1UpdateOne {
	ivo.SetDeletedUnix(time.Now().Unix())
	return ivo
}

func (ivo *InformationV1UpdateOne) SetInformationV1(input *InformationV1) *InformationV1UpdateOne {
	ivo.SetUpdatedUnix(input.UpdatedUnix)
	ivo.SetRoot(input.Root)
	ivo.SetThumb(input.Thumb)
	ivo.SetThumbPath(input.ThumbPath)
	ivo.SetPoster(input.Poster)
	ivo.SetPosterPath(input.PosterPath)
	ivo.SetMedia(input.Media)
	ivo.SetMediaPath(input.MediaPath)
	ivo.SetMediaIndex(input.MediaIndex)
	ivo.SetFrames(input.Frames)
	ivo.SetFramesPath(input.FramesPath)
	ivo.SetTitle(input.Title)
	ivo.SetVideoNo(input.VideoNo)
	ivo.SetIntro(input.Intro)
	ivo.SetAlias(input.Alias)
	ivo.SetRole(input.Role)
	ivo.SetDirector(input.Director)
	ivo.SetSystematics(input.Systematics)
	ivo.SetProducer(input.Producer)
	ivo.SetPublisher(input.Publisher)
	ivo.SetSortType(input.SortType)
	ivo.SetCaption(input.Caption)
	ivo.SetGroup(input.Group)
	ivo.SetIndex(input.Index)
	ivo.SetReleaseDate(input.ReleaseDate)
	ivo.SetFormat(input.Format)
	ivo.SetSeries(input.Series)
	ivo.SetTags(input.Tags)
	ivo.SetLength(input.Length)
	ivo.SetSample(input.Sample)
	ivo.SetUncensored(input.Uncensored)
	ivo.SetSeason(input.Season)
	ivo.SetTotalEpisode(input.TotalEpisode)
	ivo.SetEpisode(input.Episode)
	ivo.SetLanguage(input.Language)
	ivo.SetSharpness(input.Sharpness)
	ivo.SetWatermark(input.Watermark)
	ivo.SetPermission(input.Permission)
	ivo.SetTotalBlocks(input.TotalBlocks)
	return ivo
}

func (iv *InformationV1Update) SoftDelete() *InformationV1Update {
	iv.SetDeletedUnix(time.Now().Unix())
	return iv
}

func (iv *InformationV1Update) SetInformationV1(input *InformationV1) *InformationV1Update {
	iv.SetUpdatedUnix(input.UpdatedUnix)
	iv.SetRoot(input.Root)
	iv.SetThumb(input.Thumb)
	iv.SetThumbPath(input.ThumbPath)
	iv.SetPoster(input.Poster)
	iv.SetPosterPath(input.PosterPath)
	iv.SetMedia(input.Media)
	iv.SetMediaPath(input.MediaPath)
	iv.SetMediaIndex(input.MediaIndex)
	iv.SetFrames(input.Frames)
	iv.SetFramesPath(input.FramesPath)
	iv.SetTitle(input.Title)
	iv.SetVideoNo(input.VideoNo)
	iv.SetIntro(input.Intro)
	iv.SetAlias(input.Alias)
	iv.SetRole(input.Role)
	iv.SetDirector(input.Director)
	iv.SetSystematics(input.Systematics)
	iv.SetProducer(input.Producer)
	iv.SetPublisher(input.Publisher)
	iv.SetSortType(input.SortType)
	iv.SetCaption(input.Caption)
	iv.SetGroup(input.Group)
	iv.SetIndex(input.Index)
	iv.SetReleaseDate(input.ReleaseDate)
	iv.SetFormat(input.Format)
	iv.SetSeries(input.Series)
	iv.SetTags(input.Tags)
	iv.SetLength(input.Length)
	iv.SetSample(input.Sample)
	iv.SetUncensored(input.Uncensored)
	iv.SetSeason(input.Season)
	iv.SetTotalEpisode(input.TotalEpisode)
	iv.SetEpisode(input.Episode)
	iv.SetLanguage(input.Language)
	iv.SetSharpness(input.Sharpness)
	iv.SetWatermark(input.Watermark)
	iv.SetPermission(input.Permission)
	iv.SetTotalBlocks(input.TotalBlocks)
	return iv
}

func (iv *InformationV1Update) SetInformationV1WithOptional(input *InformationV1) *InformationV1Update {
	iv.SetUpdatedUnix(input.UpdatedUnix)
	iv.SetChannelID(input.ChannelID)
	iv.SetRoot(input.Root)
	iv.SetThumb(input.Thumb)
	iv.SetThumbPath(input.ThumbPath)
	iv.SetPoster(input.Poster)
	iv.SetPosterPath(input.PosterPath)
	iv.SetMedia(input.Media)
	iv.SetMediaPath(input.MediaPath)
	iv.SetMediaIndex(input.MediaIndex)
	iv.SetFrames(input.Frames)
	iv.SetFramesPath(input.FramesPath)
	iv.SetFramesParticulars(input.FramesParticulars)
	iv.SetTitle(input.Title)
	iv.SetVideoNo(input.VideoNo)
	iv.SetIntro(input.Intro)
	iv.SetAlias(input.Alias)
	iv.SetRole(input.Role)
	iv.SetDirector(input.Director)
	iv.SetSystematics(input.Systematics)
	iv.SetProducer(input.Producer)
	iv.SetPublisher(input.Publisher)
	iv.SetSortType(input.SortType)
	iv.SetCaption(input.Caption)
	iv.SetGroup(input.Group)
	iv.SetIndex(input.Index)
	iv.SetReleaseDate(input.ReleaseDate)
	iv.SetFormat(input.Format)
	iv.SetSeries(input.Series)
	iv.SetTags(input.Tags)
	iv.SetLength(input.Length)
	iv.SetSample(input.Sample)
	iv.SetUncensored(input.Uncensored)
	iv.SetSeason(input.Season)
	iv.SetTotalEpisode(input.TotalEpisode)
	iv.SetEpisode(input.Episode)
	iv.SetLanguage(input.Language)
	iv.SetSharpness(input.Sharpness)
	iv.SetWatermark(input.Watermark)
	iv.SetPermission(input.Permission)
	iv.SetSign(input.Sign)
	iv.SetTotalBlocks(input.TotalBlocks)
	return iv
}

func (iv *InformationV1Query) UseSoftDelete() *InformationV1Query {
	return iv.Where(informationv1.DeletedUnixIsNil())
}

func (pc *PageCreate) SetPage(input *Page) *PageCreate {
	pc.SetCreatedUnix(input.CreatedUnix)
	pc.SetUpdatedUnix(input.UpdatedUnix)
	pc.SetTitle(input.Title)
	pc.SetFeaturedIndex(input.FeaturedIndex)
	pc.SetFeaturedContent(input.FeaturedContent)
	pc.SetRecommend(input.Recommend)
	return pc
}

func (pc *PageCreate) SetPageWithOptional(input *Page) *PageCreate {
	pc.SetCreatedUnix(input.CreatedUnix)
	pc.SetUpdatedUnix(input.UpdatedUnix)
	pc.SetParentID(input.ParentID)
	pc.SetTitle(input.Title)
	pc.SetFeaturedIndex(input.FeaturedIndex)
	pc.SetFeaturedContent(input.FeaturedContent)
	pc.SetRecommend(input.Recommend)
	return pc
}
func (pc *PageCreate) SoftDelete() *PageCreate {
	pc.SetDeletedUnix(time.Now().Unix())
	return pc
}

func (puo *PageUpdateOne) SoftDelete() *PageUpdateOne {
	puo.SetDeletedUnix(time.Now().Unix())
	return puo
}

func (puo *PageUpdateOne) SetPage(input *Page) *PageUpdateOne {
	puo.SetUpdatedUnix(input.UpdatedUnix)
	puo.SetTitle(input.Title)
	puo.SetFeaturedIndex(input.FeaturedIndex)
	puo.SetFeaturedContent(input.FeaturedContent)
	puo.SetRecommend(input.Recommend)
	return puo
}

func (pu *PageUpdate) SoftDelete() *PageUpdate {
	pu.SetDeletedUnix(time.Now().Unix())
	return pu
}

func (pu *PageUpdate) SetPage(input *Page) *PageUpdate {
	pu.SetUpdatedUnix(input.UpdatedUnix)
	pu.SetTitle(input.Title)
	pu.SetFeaturedIndex(input.FeaturedIndex)
	pu.SetFeaturedContent(input.FeaturedContent)
	pu.SetRecommend(input.Recommend)
	return pu
}

func (pu *PageUpdate) SetPageWithOptional(input *Page) *PageUpdate {
	pu.SetUpdatedUnix(input.UpdatedUnix)
	pu.SetParentID(input.ParentID)
	pu.SetTitle(input.Title)
	pu.SetFeaturedIndex(input.FeaturedIndex)
	pu.SetFeaturedContent(input.FeaturedContent)
	pu.SetRecommend(input.Recommend)
	return pu
}

func (pq *PageQuery) UseSoftDelete() *PageQuery {
	return pq.Where(page.DeletedUnixIsNil())
}

func (tlc *TopListCreate) SetTopList(input *TopList) *TopListCreate {
	tlc.SetCreatedUnix(input.CreatedUnix)
	tlc.SetUpdatedUnix(input.UpdatedUnix)
	tlc.SetTitle(input.Title)
	tlc.SetIntro(input.Intro)
	tlc.SetCategory(input.Category)
	tlc.SetLowerBanner(input.LowerBanner)
	tlc.SetTopRight(input.TopRight)
	return tlc
}

func (tlc *TopListCreate) SetTopListWithOptional(input *TopList) *TopListCreate {
	tlc.SetCreatedUnix(input.CreatedUnix)
	tlc.SetUpdatedUnix(input.UpdatedUnix)
	tlc.SetInformationID(input.InformationID)
	tlc.SetPageID(input.PageID)
	tlc.SetTitle(input.Title)
	tlc.SetIntro(input.Intro)
	tlc.SetCategory(input.Category)
	tlc.SetLowerBanner(input.LowerBanner)
	tlc.SetTopRight(input.TopRight)
	return tlc
}
func (tlc *TopListCreate) SoftDelete() *TopListCreate {
	tlc.SetDeletedUnix(time.Now().Unix())
	return tlc
}

func (tluo *TopListUpdateOne) SoftDelete() *TopListUpdateOne {
	tluo.SetDeletedUnix(time.Now().Unix())
	return tluo
}

func (tluo *TopListUpdateOne) SetTopList(input *TopList) *TopListUpdateOne {
	tluo.SetUpdatedUnix(input.UpdatedUnix)
	tluo.SetTitle(input.Title)
	tluo.SetIntro(input.Intro)
	tluo.SetCategory(input.Category)
	tluo.SetLowerBanner(input.LowerBanner)
	tluo.SetTopRight(input.TopRight)
	return tluo
}

func (tlu *TopListUpdate) SoftDelete() *TopListUpdate {
	tlu.SetDeletedUnix(time.Now().Unix())
	return tlu
}

func (tlu *TopListUpdate) SetTopList(input *TopList) *TopListUpdate {
	tlu.SetUpdatedUnix(input.UpdatedUnix)
	tlu.SetTitle(input.Title)
	tlu.SetIntro(input.Intro)
	tlu.SetCategory(input.Category)
	tlu.SetLowerBanner(input.LowerBanner)
	tlu.SetTopRight(input.TopRight)
	return tlu
}

func (tlu *TopListUpdate) SetTopListWithOptional(input *TopList) *TopListUpdate {
	tlu.SetUpdatedUnix(input.UpdatedUnix)
	tlu.SetInformationID(input.InformationID)
	tlu.SetPageID(input.PageID)
	tlu.SetTitle(input.Title)
	tlu.SetIntro(input.Intro)
	tlu.SetCategory(input.Category)
	tlu.SetLowerBanner(input.LowerBanner)
	tlu.SetTopRight(input.TopRight)
	return tlu
}

func (tlq *TopListQuery) UseSoftDelete() *TopListQuery {
	return tlq.Where(toplist.DeletedUnixIsNil())
}

func (vc *VersionCreate) SetVersion(input *Version) *VersionCreate {
	vc.SetCurrent(input.Current)
	vc.SetLast(input.Last)
	return vc
}

func (vc *VersionCreate) SetVersionWithOptional(input *Version) *VersionCreate {
	vc.SetCurrent(input.Current)
	vc.SetLast(input.Last)
	return vc
}

func (vuo *VersionUpdateOne) SetVersion(input *Version) *VersionUpdateOne {
	vuo.SetCurrent(input.Current)
	vuo.SetLast(input.Last)
	return vuo
}

func (vu *VersionUpdate) SetVersion(input *Version) *VersionUpdate {
	vu.SetCurrent(input.Current)
	vu.SetLast(input.Last)
	return vu
}

func (vu *VersionUpdate) SetVersionWithOptional(input *Version) *VersionUpdate {
	vu.SetCurrent(input.Current)
	vu.SetLast(input.Last)
	return vu
}
