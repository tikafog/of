// Code generated by ent, DO NOT EDIT.

package media

import (
	"context"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/tikafog/of/dbc/media/migrate"

	"github.com/tikafog/of/dbc/media/announce"
	"github.com/tikafog/of/dbc/media/channel"
	"github.com/tikafog/of/dbc/media/discovery"
	"github.com/tikafog/of/dbc/media/informationv1"
	"github.com/tikafog/of/dbc/media/page"
	"github.com/tikafog/of/dbc/media/toplist"
	"github.com/tikafog/of/dbc/media/version"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Announce is the client for interacting with the Announce builders.
	Announce *AnnounceClient
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// Discovery is the client for interacting with the Discovery builders.
	Discovery *DiscoveryClient
	// InformationV1 is the client for interacting with the InformationV1 builders.
	InformationV1 *InformationV1Client
	// Page is the client for interacting with the Page builders.
	Page *PageClient
	// TopList is the client for interacting with the TopList builders.
	TopList *TopListClient
	// Version is the client for interacting with the Version builders.
	Version *VersionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Announce = NewAnnounceClient(c.config)
	c.Channel = NewChannelClient(c.config)
	c.Discovery = NewDiscoveryClient(c.config)
	c.InformationV1 = NewInformationV1Client(c.config)
	c.Page = NewPageClient(c.config)
	c.TopList = NewTopListClient(c.config)
	c.Version = NewVersionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("media: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("media: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Announce:      NewAnnounceClient(cfg),
		Channel:       NewChannelClient(cfg),
		Discovery:     NewDiscoveryClient(cfg),
		InformationV1: NewInformationV1Client(cfg),
		Page:          NewPageClient(cfg),
		TopList:       NewTopListClient(cfg),
		Version:       NewVersionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Announce:      NewAnnounceClient(cfg),
		Channel:       NewChannelClient(cfg),
		Discovery:     NewDiscoveryClient(cfg),
		InformationV1: NewInformationV1Client(cfg),
		Page:          NewPageClient(cfg),
		TopList:       NewTopListClient(cfg),
		Version:       NewVersionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Announce.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Announce.Use(hooks...)
	c.Channel.Use(hooks...)
	c.Discovery.Use(hooks...)
	c.InformationV1.Use(hooks...)
	c.Page.Use(hooks...)
	c.TopList.Use(hooks...)
	c.Version.Use(hooks...)
}

// AnnounceClient is a client for the Announce schema.
type AnnounceClient struct {
	config
}

// NewAnnounceClient returns a client for the Announce from the given config.
func NewAnnounceClient(c config) *AnnounceClient {
	return &AnnounceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `announce.Hooks(f(g(h())))`.
func (c *AnnounceClient) Use(hooks ...Hook) {
	c.hooks.Announce = append(c.hooks.Announce, hooks...)
}

// Create returns a builder for creating a Announce entity.
func (c *AnnounceClient) Create() *AnnounceCreate {
	mutation := newAnnounceMutation(c.config, OpCreate)
	return &AnnounceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Announce entities.
func (c *AnnounceClient) CreateBulk(builders ...*AnnounceCreate) *AnnounceCreateBulk {
	return &AnnounceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Announce.
func (c *AnnounceClient) Update() *AnnounceUpdate {
	mutation := newAnnounceMutation(c.config, OpUpdate)
	return &AnnounceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnnounceClient) UpdateOne(a *Announce) *AnnounceUpdateOne {
	mutation := newAnnounceMutation(c.config, OpUpdateOne, withAnnounce(a))
	return &AnnounceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnnounceClient) UpdateOneID(id uuid.UUID) *AnnounceUpdateOne {
	mutation := newAnnounceMutation(c.config, OpUpdateOne, withAnnounceID(id))
	return &AnnounceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Announce.
func (c *AnnounceClient) Delete() *AnnounceDelete {
	mutation := newAnnounceMutation(c.config, OpDelete)
	return &AnnounceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnnounceClient) DeleteOne(a *Announce) *AnnounceDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AnnounceClient) DeleteOneID(id uuid.UUID) *AnnounceDeleteOne {
	builder := c.Delete().Where(announce.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnnounceDeleteOne{builder}
}

// Query returns a query builder for Announce.
func (c *AnnounceClient) Query() *AnnounceQuery {
	return &AnnounceQuery{
		config: c.config,
	}
}

// Get returns a Announce entity by its id.
func (c *AnnounceClient) Get(ctx context.Context, id uuid.UUID) (*Announce, error) {
	return c.Query().Where(announce.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnnounceClient) GetX(ctx context.Context, id uuid.UUID) *Announce {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AnnounceClient) Hooks() []Hook {
	return c.hooks.Announce
}

// ChannelClient is a client for the Channel schema.
type ChannelClient struct {
	config
}

// NewChannelClient returns a client for the Channel from the given config.
func NewChannelClient(c config) *ChannelClient {
	return &ChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channel.Hooks(f(g(h())))`.
func (c *ChannelClient) Use(hooks ...Hook) {
	c.hooks.Channel = append(c.hooks.Channel, hooks...)
}

// Create returns a builder for creating a Channel entity.
func (c *ChannelClient) Create() *ChannelCreate {
	mutation := newChannelMutation(c.config, OpCreate)
	return &ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Channel entities.
func (c *ChannelClient) CreateBulk(builders ...*ChannelCreate) *ChannelCreateBulk {
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Channel.
func (c *ChannelClient) Update() *ChannelUpdate {
	mutation := newChannelMutation(c.config, OpUpdate)
	return &ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelClient) UpdateOne(ch *Channel) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannel(ch))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelClient) UpdateOneID(id uuid.UUID) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannelID(id))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Channel.
func (c *ChannelClient) Delete() *ChannelDelete {
	mutation := newChannelMutation(c.config, OpDelete)
	return &ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelClient) DeleteOne(ch *Channel) *ChannelDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ChannelClient) DeleteOneID(id uuid.UUID) *ChannelDeleteOne {
	builder := c.Delete().Where(channel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelDeleteOne{builder}
}

// Query returns a query builder for Channel.
func (c *ChannelClient) Query() *ChannelQuery {
	return &ChannelQuery{
		config: c.config,
	}
}

// Get returns a Channel entity by its id.
func (c *ChannelClient) Get(ctx context.Context, id uuid.UUID) (*Channel, error) {
	return c.Query().Where(channel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelClient) GetX(ctx context.Context, id uuid.UUID) *Channel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInformations queries the informations edge of a Channel.
func (c *ChannelClient) QueryInformations(ch *Channel) *InformationV1Query {
	query := &InformationV1Query{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(informationv1.Table, informationv1.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.InformationsTable, channel.InformationsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelClient) Hooks() []Hook {
	return c.hooks.Channel
}

// DiscoveryClient is a client for the Discovery schema.
type DiscoveryClient struct {
	config
}

// NewDiscoveryClient returns a client for the Discovery from the given config.
func NewDiscoveryClient(c config) *DiscoveryClient {
	return &DiscoveryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discovery.Hooks(f(g(h())))`.
func (c *DiscoveryClient) Use(hooks ...Hook) {
	c.hooks.Discovery = append(c.hooks.Discovery, hooks...)
}

// Create returns a builder for creating a Discovery entity.
func (c *DiscoveryClient) Create() *DiscoveryCreate {
	mutation := newDiscoveryMutation(c.config, OpCreate)
	return &DiscoveryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Discovery entities.
func (c *DiscoveryClient) CreateBulk(builders ...*DiscoveryCreate) *DiscoveryCreateBulk {
	return &DiscoveryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Discovery.
func (c *DiscoveryClient) Update() *DiscoveryUpdate {
	mutation := newDiscoveryMutation(c.config, OpUpdate)
	return &DiscoveryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscoveryClient) UpdateOne(d *Discovery) *DiscoveryUpdateOne {
	mutation := newDiscoveryMutation(c.config, OpUpdateOne, withDiscovery(d))
	return &DiscoveryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscoveryClient) UpdateOneID(id uuid.UUID) *DiscoveryUpdateOne {
	mutation := newDiscoveryMutation(c.config, OpUpdateOne, withDiscoveryID(id))
	return &DiscoveryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Discovery.
func (c *DiscoveryClient) Delete() *DiscoveryDelete {
	mutation := newDiscoveryMutation(c.config, OpDelete)
	return &DiscoveryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DiscoveryClient) DeleteOne(d *Discovery) *DiscoveryDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DiscoveryClient) DeleteOneID(id uuid.UUID) *DiscoveryDeleteOne {
	builder := c.Delete().Where(discovery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscoveryDeleteOne{builder}
}

// Query returns a query builder for Discovery.
func (c *DiscoveryClient) Query() *DiscoveryQuery {
	return &DiscoveryQuery{
		config: c.config,
	}
}

// Get returns a Discovery entity by its id.
func (c *DiscoveryClient) Get(ctx context.Context, id uuid.UUID) (*Discovery, error) {
	return c.Query().Where(discovery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscoveryClient) GetX(ctx context.Context, id uuid.UUID) *Discovery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DiscoveryClient) Hooks() []Hook {
	return c.hooks.Discovery
}

// InformationV1Client is a client for the InformationV1 schema.
type InformationV1Client struct {
	config
}

// NewInformationV1Client returns a client for the InformationV1 from the given config.
func NewInformationV1Client(c config) *InformationV1Client {
	return &InformationV1Client{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `informationv1.Hooks(f(g(h())))`.
func (c *InformationV1Client) Use(hooks ...Hook) {
	c.hooks.InformationV1 = append(c.hooks.InformationV1, hooks...)
}

// Create returns a builder for creating a InformationV1 entity.
func (c *InformationV1Client) Create() *InformationV1Create {
	mutation := newInformationV1Mutation(c.config, OpCreate)
	return &InformationV1Create{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InformationV1 entities.
func (c *InformationV1Client) CreateBulk(builders ...*InformationV1Create) *InformationV1CreateBulk {
	return &InformationV1CreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InformationV1.
func (c *InformationV1Client) Update() *InformationV1Update {
	mutation := newInformationV1Mutation(c.config, OpUpdate)
	return &InformationV1Update{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InformationV1Client) UpdateOne(i *InformationV1) *InformationV1UpdateOne {
	mutation := newInformationV1Mutation(c.config, OpUpdateOne, withInformationV1(i))
	return &InformationV1UpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InformationV1Client) UpdateOneID(id uuid.UUID) *InformationV1UpdateOne {
	mutation := newInformationV1Mutation(c.config, OpUpdateOne, withInformationV1ID(id))
	return &InformationV1UpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InformationV1.
func (c *InformationV1Client) Delete() *InformationV1Delete {
	mutation := newInformationV1Mutation(c.config, OpDelete)
	return &InformationV1Delete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InformationV1Client) DeleteOne(i *InformationV1) *InformationV1DeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *InformationV1Client) DeleteOneID(id uuid.UUID) *InformationV1DeleteOne {
	builder := c.Delete().Where(informationv1.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InformationV1DeleteOne{builder}
}

// Query returns a query builder for InformationV1.
func (c *InformationV1Client) Query() *InformationV1Query {
	return &InformationV1Query{
		config: c.config,
	}
}

// Get returns a InformationV1 entity by its id.
func (c *InformationV1Client) Get(ctx context.Context, id uuid.UUID) (*InformationV1, error) {
	return c.Query().Where(informationv1.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InformationV1Client) GetX(ctx context.Context, id uuid.UUID) *InformationV1 {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTopLists queries the top_lists edge of a InformationV1.
func (c *InformationV1Client) QueryTopLists(i *InformationV1) *TopListQuery {
	query := &TopListQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(informationv1.Table, informationv1.FieldID, id),
			sqlgraph.To(toplist.Table, toplist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, informationv1.TopListsTable, informationv1.TopListsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a InformationV1.
func (c *InformationV1Client) QueryChannel(i *InformationV1) *ChannelQuery {
	query := &ChannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(informationv1.Table, informationv1.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, informationv1.ChannelTable, informationv1.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InformationV1Client) Hooks() []Hook {
	return c.hooks.InformationV1
}

// PageClient is a client for the Page schema.
type PageClient struct {
	config
}

// NewPageClient returns a client for the Page from the given config.
func NewPageClient(c config) *PageClient {
	return &PageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `page.Hooks(f(g(h())))`.
func (c *PageClient) Use(hooks ...Hook) {
	c.hooks.Page = append(c.hooks.Page, hooks...)
}

// Create returns a builder for creating a Page entity.
func (c *PageClient) Create() *PageCreate {
	mutation := newPageMutation(c.config, OpCreate)
	return &PageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Page entities.
func (c *PageClient) CreateBulk(builders ...*PageCreate) *PageCreateBulk {
	return &PageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Page.
func (c *PageClient) Update() *PageUpdate {
	mutation := newPageMutation(c.config, OpUpdate)
	return &PageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PageClient) UpdateOne(pa *Page) *PageUpdateOne {
	mutation := newPageMutation(c.config, OpUpdateOne, withPage(pa))
	return &PageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PageClient) UpdateOneID(id uuid.UUID) *PageUpdateOne {
	mutation := newPageMutation(c.config, OpUpdateOne, withPageID(id))
	return &PageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Page.
func (c *PageClient) Delete() *PageDelete {
	mutation := newPageMutation(c.config, OpDelete)
	return &PageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PageClient) DeleteOne(pa *Page) *PageDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PageClient) DeleteOneID(id uuid.UUID) *PageDeleteOne {
	builder := c.Delete().Where(page.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PageDeleteOne{builder}
}

// Query returns a query builder for Page.
func (c *PageClient) Query() *PageQuery {
	return &PageQuery{
		config: c.config,
	}
}

// Get returns a Page entity by its id.
func (c *PageClient) Get(ctx context.Context, id uuid.UUID) (*Page, error) {
	return c.Query().Where(page.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PageClient) GetX(ctx context.Context, id uuid.UUID) *Page {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a Page.
func (c *PageClient) QueryParent(pa *Page) *PageQuery {
	query := &PageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(page.Table, page.FieldID, id),
			sqlgraph.To(page.Table, page.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, page.ParentTable, page.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubpages queries the subpages edge of a Page.
func (c *PageClient) QuerySubpages(pa *Page) *PageQuery {
	query := &PageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(page.Table, page.FieldID, id),
			sqlgraph.To(page.Table, page.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, page.SubpagesTable, page.SubpagesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTopLists queries the top_lists edge of a Page.
func (c *PageClient) QueryTopLists(pa *Page) *TopListQuery {
	query := &TopListQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(page.Table, page.FieldID, id),
			sqlgraph.To(toplist.Table, toplist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, page.TopListsTable, page.TopListsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PageClient) Hooks() []Hook {
	return c.hooks.Page
}

// TopListClient is a client for the TopList schema.
type TopListClient struct {
	config
}

// NewTopListClient returns a client for the TopList from the given config.
func NewTopListClient(c config) *TopListClient {
	return &TopListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `toplist.Hooks(f(g(h())))`.
func (c *TopListClient) Use(hooks ...Hook) {
	c.hooks.TopList = append(c.hooks.TopList, hooks...)
}

// Create returns a builder for creating a TopList entity.
func (c *TopListClient) Create() *TopListCreate {
	mutation := newTopListMutation(c.config, OpCreate)
	return &TopListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopList entities.
func (c *TopListClient) CreateBulk(builders ...*TopListCreate) *TopListCreateBulk {
	return &TopListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopList.
func (c *TopListClient) Update() *TopListUpdate {
	mutation := newTopListMutation(c.config, OpUpdate)
	return &TopListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopListClient) UpdateOne(tl *TopList) *TopListUpdateOne {
	mutation := newTopListMutation(c.config, OpUpdateOne, withTopList(tl))
	return &TopListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopListClient) UpdateOneID(id uuid.UUID) *TopListUpdateOne {
	mutation := newTopListMutation(c.config, OpUpdateOne, withTopListID(id))
	return &TopListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopList.
func (c *TopListClient) Delete() *TopListDelete {
	mutation := newTopListMutation(c.config, OpDelete)
	return &TopListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopListClient) DeleteOne(tl *TopList) *TopListDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopListClient) DeleteOneID(id uuid.UUID) *TopListDeleteOne {
	builder := c.Delete().Where(toplist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopListDeleteOne{builder}
}

// Query returns a query builder for TopList.
func (c *TopListClient) Query() *TopListQuery {
	return &TopListQuery{
		config: c.config,
	}
}

// Get returns a TopList entity by its id.
func (c *TopListClient) Get(ctx context.Context, id uuid.UUID) (*TopList, error) {
	return c.Query().Where(toplist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopListClient) GetX(ctx context.Context, id uuid.UUID) *TopList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInformation queries the information edge of a TopList.
func (c *TopListClient) QueryInformation(tl *TopList) *InformationV1Query {
	query := &InformationV1Query{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(toplist.Table, toplist.FieldID, id),
			sqlgraph.To(informationv1.Table, informationv1.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, toplist.InformationTable, toplist.InformationColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPage queries the page edge of a TopList.
func (c *TopListClient) QueryPage(tl *TopList) *PageQuery {
	query := &PageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(toplist.Table, toplist.FieldID, id),
			sqlgraph.To(page.Table, page.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, toplist.PageTable, toplist.PageColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TopListClient) Hooks() []Hook {
	return c.hooks.TopList
}

// VersionClient is a client for the Version schema.
type VersionClient struct {
	config
}

// NewVersionClient returns a client for the Version from the given config.
func NewVersionClient(c config) *VersionClient {
	return &VersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `version.Hooks(f(g(h())))`.
func (c *VersionClient) Use(hooks ...Hook) {
	c.hooks.Version = append(c.hooks.Version, hooks...)
}

// Create returns a builder for creating a Version entity.
func (c *VersionClient) Create() *VersionCreate {
	mutation := newVersionMutation(c.config, OpCreate)
	return &VersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Version entities.
func (c *VersionClient) CreateBulk(builders ...*VersionCreate) *VersionCreateBulk {
	return &VersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Version.
func (c *VersionClient) Update() *VersionUpdate {
	mutation := newVersionMutation(c.config, OpUpdate)
	return &VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VersionClient) UpdateOne(v *Version) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersion(v))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VersionClient) UpdateOneID(id int) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersionID(id))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Version.
func (c *VersionClient) Delete() *VersionDelete {
	mutation := newVersionMutation(c.config, OpDelete)
	return &VersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VersionClient) DeleteOne(v *Version) *VersionDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *VersionClient) DeleteOneID(id int) *VersionDeleteOne {
	builder := c.Delete().Where(version.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VersionDeleteOne{builder}
}

// Query returns a query builder for Version.
func (c *VersionClient) Query() *VersionQuery {
	return &VersionQuery{
		config: c.config,
	}
}

// Get returns a Version entity by its id.
func (c *VersionClient) Get(ctx context.Context, id int) (*Version, error) {
	return c.Query().Where(version.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VersionClient) GetX(ctx context.Context, id int) *Version {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VersionClient) Hooks() []Hook {
	return c.hooks.Version
}
